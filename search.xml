<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法笔记1（数组）</title>
      <link href="/2021/02/24/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%88%E6%95%B0%E7%BB%84%EF%BC%89/"/>
      <url>/2021/02/24/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%88%E6%95%B0%E7%BB%84%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>参考</strong>:<a href="https://mp.weixin.qq.com/s/X7R55wSENyY62le0Fiawsg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/X7R55wSENyY62le0Fiawsg</a>（几乎就是复制这位大佬的帖子，做了一些删减hh）</p><h1 id="一、数组"><a href="#一、数组" class="headerlink" title="一、数组"></a>一、数组</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><ul><li><p><strong>数组是存放在连续内存空间上的相同类型数据的集合。</strong></p></li><li><p><strong>数组下表都是从0开始的</strong></p></li><li><p><strong>数组内存空间的地址是连续的</strong>。<strong>因为数组的在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址</strong>。<img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20210224160828124.png" alt="image-20210224160828124"></p><p>==时间复杂度为O(n)==，所以数组不适合做频繁的增删操作 ，这一点在以后解题选择容器的时候中也是非常重要的。</p></li><li><p>二维数组<img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20210224161355472.png" alt="image-20210224161355472"></p><ul><li><p><strong>二维数组在内存的空间地址不是连续的！</strong>它是一个线性数组存放这其他数组的首地址。<img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20210224161907851.png" alt="image-20210224161907851"></p><p>在上图中，rating数组在内存中不是3x4的连续地址空间，而是四条连续的地址空间组成。</p></li></ul></li></ul><h2 id="2-题目"><a href="#2-题目" class="headerlink" title="2. 题目"></a>2. 题目</h2><hr><ul><li><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20210225143142260.png" alt="image-20210225143142260"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20210225143226825.png" alt="image-20210225143226825"></p><ul><li><p>暴力解法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="comment">// 分别处理如下三种情况</span></span><br><span class="line">        <span class="comment">// 目标值在数组所有元素之前</span></span><br><span class="line">        <span class="comment">// 目标值等于数组中某一个元素  </span></span><br><span class="line">        <span class="comment">// 目标值插入数组中的位置 </span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt;= target) &#123; <span class="comment">// 一旦发现大于或者等于target的num[i]，那么i就是我们要的结果</span></span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 目标值在数组所有元素之后的情况 </span></span><br><span class="line">        <span class="keyword">return</span> nums.<span class="built_in">size</span>(); <span class="comment">// 如果target是最大的，或者 nums为空，则返回nums的长度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//时间复杂度O(n)</span></span><br><span class="line"><span class="comment">//空间复杂度O(1)</span></span><br></pre></td></tr></table></figure></li><li><p>二分法</p><p><strong>只要看到面试题里给出的数组是有序数组，都可以想一想是否可以使用二分法。同时题目还强调数组中无重复元素，因为一旦有重复元素，使用二分查找法返回的元素下表可能不是唯一的。</strong></p><p>使用二分法要重视<strong>边界条件</strong>，确定好<strong>==循环不变量==</strong>，即target所在的区间，是左闭右闭[left, right]，还是左闭右开[left, right)，这影响到后续对边界的赋值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二分法（一）</span></span><br><span class="line"><span class="comment">//target位于左闭右闭区间[left, right]</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = n - <span class="number">1</span>; <span class="comment">// 定义target在左闭右闭的区间里，[left, right] </span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123; <span class="comment">// 当left==right，区间[left, right]依然有效</span></span><br><span class="line">            <span class="keyword">int</span> middle = left + ((right - left) / <span class="number">2</span>);<span class="comment">// 防止溢出 等同于(left + right)/2</span></span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target) &#123;</span><br><span class="line">                right = middle - <span class="number">1</span>; <span class="comment">// target 在左区间，所以[left, middle - 1]</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt; target) &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>; <span class="comment">// target 在右区间，所以[middle + 1, right]</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// nums[middle] == target</span></span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 分别处理如下四种情况</span></span><br><span class="line">        <span class="comment">// 目标值在数组所有元素之前  [0, -1]</span></span><br><span class="line">        <span class="comment">// 目标值等于数组中某一个元素  return middle;</span></span><br><span class="line">        <span class="comment">// 目标值插入数组中的位置 [left, right]，return  right + 1</span></span><br><span class="line">        <span class="comment">// 目标值在数组所有元素之后的情况 [left, right]， return right + 1</span></span><br><span class="line">        <span class="keyword">return</span> right + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//时间复杂度O(logn)</span></span><br><span class="line"><span class="comment">//空间复杂度O(1)</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二分法（二）</span></span><br><span class="line"><span class="comment">//target位于左闭右开区间[left, right)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = n; <span class="comment">// 定义target在左闭右开的区间里，[left, right)  target</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123; <span class="comment">// 因为left == right的时候，在[left, right)是无效的空间</span></span><br><span class="line">            <span class="keyword">int</span> middle = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target) &#123;</span><br><span class="line">                right = middle; <span class="comment">// target 在左区间，在[left, middle)中</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt; target) &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>; <span class="comment">// target 在右区间，在 [middle+1, right)中</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// nums[middle] == target</span></span><br><span class="line">                <span class="keyword">return</span> middle; <span class="comment">// 数组中找到目标值的情况，直接返回下标</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 分别处理如下四种情况</span></span><br><span class="line">        <span class="comment">// 目标值在数组所有元素之前 [0,0)</span></span><br><span class="line">        <span class="comment">// 目标值等于数组中某一个元素 return middle</span></span><br><span class="line">        <span class="comment">// 目标值插入数组中的位置 [left, right) ，return right 即可</span></span><br><span class="line">        <span class="comment">// 目标值在数组所有元素之后的情况 [left, right)，return right 即可</span></span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//时间复杂度O(logn)</span></span><br><span class="line"><span class="comment">//空间复杂度O(1)</span></span><br></pre></td></tr></table></figure></li></ul><hr></li><li><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20210225162934770.png" alt="image-20210225162934770"></p><p>==注==：<strong>数组的元素在内存地址中是连续的，不能单独删除数组中的某个元素，只能覆盖。</strong></p><ul><li><p>暴力解法，两层for循环</p><p><img src="https://mmbiz.qpic.cn/mmbiz_gif/ciaqDnJprwv4rN7Lc7cH7s9Xs5Gfgibnf7TXGEicwHiav5ChqT6UqgicWib6XRp7TxJva0A6ibrCA6Jx2jAibibWr811pOA/640?wx_fmt=gif&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="图片"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间复杂度：O(n^2)</span></span><br><span class="line"><span class="comment">// 空间复杂度：O(1)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == val) &#123; <span class="comment">// 发现需要移除的元素，就将数组集体向前移动一位</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; <span class="built_in">size</span>; j++) &#123;</span><br><span class="line">                    nums[j - <span class="number">1</span>] = nums[j];</span><br><span class="line">                &#125;</span><br><span class="line">                i--; <span class="comment">// 因为下表i以后的数值都向前移动了一位，所以i也向前移动一位</span></span><br><span class="line">                <span class="built_in">size</span>--; <span class="comment">// 此时数组的大小-1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">size</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>双指针法（快慢指针法）：<strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_gif/ciaqDnJprwv4rN7Lc7cH7s9Xs5Gfgibnf7kT8a6hE8xVSviaeZHuIqUAx3HRef0dDvg5roSXCIulV2XcjOnxKwYVA/640?wx_fmt=gif&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="图片"></p><p><strong>双指针法（快慢指针法）在数组和链表的操作中是非常常见的，很多考察数组和链表操作的面试题，都使用双指针法。</strong></p><p><strong>双指针法将时间复杂度O(n^2)的解法优化为 O(n)的解法。也就是降一个数量级</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间复杂度：O(n)</span></span><br><span class="line"><span class="comment">// 空间复杂度：O(1)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> slowIndex = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> fastIndex = <span class="number">0</span>; fastIndex &lt; nums.<span class="built_in">size</span>(); fastIndex++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (val != nums[fastIndex]) &#123; </span><br><span class="line">                nums[slowIndex++] = nums[fastIndex]; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slowIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><ul><li><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20210225205304647.png" alt="image-20210225205304647"></p><ul><li><p>暴力解法：两个for循环</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> s, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = INT32_MAX; <span class="comment">// 最终的结果</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">// 子序列的数值之和</span></span><br><span class="line">        <span class="keyword">int</span> subLength = <span class="number">0</span>; <span class="comment">// 子序列的长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 设置子序列起点为i</span></span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; nums.<span class="built_in">size</span>(); j++) &#123; <span class="comment">// 设置子序列终止位置为j</span></span><br><span class="line">                sum += nums[j];</span><br><span class="line">                <span class="keyword">if</span> (sum &gt;= s) &#123; <span class="comment">// 一旦发现子序列和超过了s，更新result</span></span><br><span class="line">                    subLength = j - i + <span class="number">1</span>; <span class="comment">// 取子序列的长度</span></span><br><span class="line">                    result = result &lt; subLength ? result : subLength;</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">// 因为我们是找符合条件最短的子序列，所以一旦符合条件就break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果result没有被赋值的话，就返回0，说明没有符合条件的子序列</span></span><br><span class="line">        <span class="keyword">return</span> result == INT32_MAX ? <span class="number">0</span> : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//时间复杂度：O(n^2)</span></span><br><span class="line"><span class="comment">//空间复杂度：O(1)</span></span><br></pre></td></tr></table></figure></li><li><p>滑动窗口：<strong>就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果</strong><img src="https://mmbiz.qpic.cn/mmbiz_gif/ciaqDnJprwv6MwIsdYLFnPSXSJ3WgSPQRf3oaBEAYc57vWs1aSc4YMjmMSawj3QQxd4A81P4XYF6sibPK0lZ1ic4w/640?wx_fmt=gif&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="图片"></p><p>在本题中实现滑动窗口，主要确定如下三点：</p><ul><li>窗口内是什么？</li><li>如何移动窗口的起始位置？</li><li>如何移动窗口的结束位置？</li></ul><p>窗口就是满足其和 ≥ s 的长度最小的 连续 子数组。</p><p>窗口的起始位置如何移动：如果当前窗口的值大于s了，窗口就要向前移动了（也就是该缩小了）。</p><p>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，窗口的起始位置设置为数组的起始位置就可以了。</p><p><strong>滑动窗口的精妙之处在于根据当前子序列和大小的情况，不断调节子序列的起始位置。从而将O(n^2)的暴力解法降为O(n)。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> s, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = INT32_MAX;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">// 滑动窗口数值之和</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">// 滑动窗口起始位置</span></span><br><span class="line">        <span class="keyword">int</span> subLength = <span class="number">0</span>; <span class="comment">// 滑动窗口的长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            sum += nums[j];</span><br><span class="line">            <span class="comment">// 注意这里使用while，每次更新 i（起始位置），并不断比较子序列是否符合条件</span></span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= s) &#123;</span><br><span class="line">                subLength = (j - i + <span class="number">1</span>); <span class="comment">// 取子序列的长度</span></span><br><span class="line">                result = result &lt; subLength ? result : subLength;</span><br><span class="line">                sum -= nums[i++]; <span class="comment">// 这里体现出滑动窗口的精髓之处，不断变更i（子序列的起始位置）</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果result没有被赋值的话，就返回0，说明没有符合条件的子序列</span></span><br><span class="line">        <span class="keyword">return</span> result == INT32_MAX ? <span class="number">0</span> : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//时间复杂度：O(n)</span></span><br><span class="line"><span class="comment">//空间复杂度：O(1)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><ul><li><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20210303105023817.png" alt="image-20210303105023817"></p><ul><li><p><strong>本题并不涉及到什么算法，就是模拟过程，但却十分考察对代码的掌控能力。</strong></p></li><li><p>本题依然是要坚持<strong>循环不变量</strong>原则。</p><p>模拟顺时针画矩阵的过程:</p><ul><li><p>填充上行从左到右</p></li><li><p>填充右列从上到下</p></li><li><p>填充下行从右到左</p></li><li><p>填充左列从下到上</p></li></ul></li></ul></li></ul><pre><code> 由外向内一圈一圈这么画下去。可以发现这里的边界条件非常多。一圈下来，我们要画每四条边，这四条边怎么画，每画一条边都要坚持一致的左闭右开，或者左开右闭的原则，这样这一圈才能按照统一的规则画下来。如左闭右开：![image-20210303105218687](https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20210303105218687.png)<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">generateMatrix</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">res</span><span class="params">(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n, <span class="number">0</span>))</span></span>; <span class="comment">// 使用vector定义一个二维数组</span></span><br><span class="line">        <span class="keyword">int</span> startx = <span class="number">0</span>, starty = <span class="number">0</span>; <span class="comment">// 定义每循环一个圈的起始位置</span></span><br><span class="line">        <span class="keyword">int</span> loop = n / <span class="number">2</span>; <span class="comment">// 每个圈循环几次，例如n为奇数3，那么loop = 1 只是循环一圈，矩阵中间的值需要单独处理</span></span><br><span class="line">        <span class="keyword">int</span> mid = n / <span class="number">2</span>; <span class="comment">// 矩阵中间的位置，例如：n为3， 中间的位置就是(1，1)，n为5，中间位置为(2, 2)</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>; <span class="comment">// 用来给矩阵中每一个空格赋值</span></span><br><span class="line">        <span class="keyword">int</span> offset = <span class="number">1</span>; <span class="comment">// 每一圈循环，需要控制每一条边遍历的长度</span></span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="keyword">while</span> (loop --) &#123;</span><br><span class="line">            i = startx;</span><br><span class="line">            j = starty;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 下面开始的四个for就是模拟转了一圈</span></span><br><span class="line">            <span class="comment">// 模拟填充上行从左到右(左闭右开)</span></span><br><span class="line">            <span class="keyword">for</span> (j = starty; j &lt; starty + n - offset; j++) &#123;</span><br><span class="line">                res[startx][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 模拟填充右列从上到下(左闭右开)</span></span><br><span class="line">            <span class="keyword">for</span> (i = startx; i &lt; startx + n - offset; i++) &#123;</span><br><span class="line">                res[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 模拟填充下行从右到左(左闭右开)</span></span><br><span class="line">            <span class="keyword">for</span> (; j &gt; starty; j--) &#123;</span><br><span class="line">                res[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 模拟填充左列从下到上(左闭右开)</span></span><br><span class="line">            <span class="keyword">for</span> (; i &gt; startx; i--) &#123;</span><br><span class="line">                res[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 第二圈开始的时候，起始位置要各自加1， 例如：第一圈起始位置是(0, 0)，第二圈起始位置是(1, 1)</span></span><br><span class="line">            startx++;</span><br><span class="line">            starty++;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// offset 控制每一圈里每一条边遍历的长度</span></span><br><span class="line">            offset += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果n为奇数的话，需要单独给矩阵最中间的位置赋值</span></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span>) &#123;</span><br><span class="line">            res[mid][mid] = count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> algorithm notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoogleNet_v1</title>
      <link href="/2020/12/20/GoogleNet_v1/"/>
      <url>/2020/12/20/GoogleNet_v1/</url>
      
        <content type="html"><![CDATA[<h1 id="Going-Deeper-with-Convolutions"><a href="#Going-Deeper-with-Convolutions" class="headerlink" title="Going Deeper with Convolutions"></a>Going Deeper with Convolutions</h1><h2 id="一-背景、成果和意义"><a href="#一-背景、成果和意义" class="headerlink" title="一. 背景、成果和意义"></a>一. 背景、成果和意义</h2><ol><li><p>相关研究</p><ol><li><p>NIN(Network in Network)：</p><ul><li><p>MLPCONV：在原来每一层输出后加一个 与通道数量相同的1 x 1 卷积。见下图MLPCONV与CNN对比。作用:</p><ol><li>其实相当于在通道之间做了特征融合。</li><li>每一层卷积之后加一个激活函数，比原结构多了一层激活函数，增加了结构的非线性表达能力。</li></ol></li><li><p>全局平均池化(Global Average Pooling)：</p><p>整个feature map平均池化结果作为softmax 输入，相较于Alexnet全连接的优点：</p><ol><li>减少参数量（1000x1000+1000x6x6x1000），从而减轻过拟合(见下图)</li><li>求和平均综合了整个feature map的所有信息</li><li>不限输入图片的大小</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201220220414033.png" alt="image-20201220220414033"></p></li><li><p>Robust Object Recognition with Cortex-Like Mechanisms</p><ul><li><p>特点：S1层采用**8种尺度Gabor滤波器提取不同尺度特征</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201220220330861.png" alt="image-20201220220330861"></p></li></ul></li></ol></li><li><p>研究成果</p><ul><li>GoogleNet分类1st，检测1st，定位2nd。</li></ul></li><li><p>研究意义</p><ul><li>开启多尺度卷积时代</li><li>拉开1x1卷积广泛应用序幕</li><li>为GoogleNet系列开辟道路</li></ul></li></ol><h2 id="二、摘要"><a href="#二、摘要" class="headerlink" title="二、摘要"></a>二、摘要</h2><ol><li>本文主题：提出名为Inception的深度卷积网络，在ILSVRC-2014获得分类和检测双冠军。</li><li>模型特点1：提高计算资源利用率，增加网络深度和宽度的同时，参数少量增加。</li><li>模型特点2：借鉴Hebbian理论和多尺度处理</li></ol><h2 id="三、GoogLeNet结构"><a href="#三、GoogLeNet结构" class="headerlink" title="三、GoogLeNet结构"></a>三、GoogLeNet结构</h2><ol><li><p>Inception Module</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201220221014839.png" alt="image-20201220221014839"></p><ul><li>多尺度</li><li>3x3max pooling：让最终特征图通道数增加，且计算量少。缺点是加入最大池化后，参与到后续计算的整体数据量和计算量激增。</li><li>引入1x1卷积压缩厚度<img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201220221352159.png" alt="image-20201220221352159"></li></ul></li><li><p>GoogleNet</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201220221453134.png" alt="image-20201220221453134"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201220223401305.png" alt="image-20201220223401305"></p></li></ol><h2 id="四、训练技巧"><a href="#四、训练技巧" class="headerlink" title="四、训练技巧"></a>四、训练技巧</h2><ul><li><p>辅助损失<img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201220223458565.png" alt="image-20201220223458565"></p></li><li><p>学习率下降策略<img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201220223607437.png" alt="image-20201220223607437"></p></li><li><p>数据增强</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201220223635331.png" alt="image-20201220223635331"></p></li></ul><h2 id="五、测试技巧"><a href="#五、测试技巧" class="headerlink" title="五、测试技巧"></a>五、测试技巧</h2><ul><li><p>Multi Crop</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201220223807343.png" alt="image-20201220223807343"></p></li><li><p>Model Fusion</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201220223906637.png" alt="image-20201220223906637"></p></li></ul><h2 id="六、实验结果及分析"><a href="#六、实验结果及分析" class="headerlink" title="六、实验结果及分析"></a>六、实验结果及分析</h2><ul><li><p>分类结果</p><ol><li><p>模型融合：多模型比单模型精度高</p></li><li><p>Multi Crop：Crop越多，精度越高</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201220224744790.png" alt="image-20201220224744790"></p></li></ol></li><li><p>检测结果</p><ol><li><p>模型融合：多模型比单模型精度高</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201220224824117.png" alt="image-20201220224824117"></p></li></ol></li></ul><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><ol><li><p>关键点&amp;创新点</p><ul><li>大量使用1x1卷积，可降低维度，减少计算量</li><li>多尺度卷积核，实现多尺度特征提取</li><li>辅助损失层，增加梯度回传，增加正则，减轻过拟合（事实上在较低的层级上这样处理基本没作用，作者在后来的inception v3论文中做了澄清）</li></ul></li><li><p>启发点</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201220230842839.png" alt="image-20201220230842839"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201220230842839.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201220231028131.png" alt="image-20201220231028131"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201220231028131.png" alt=""></p></li></ol><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li><p><a href="https://zhuanlan.zhihu.com/p/32702031" target="_blank" rel="noopener">Reference</a></p></li><li><p>多尺度卷积再聚合结构的解释</p><ol><li><p>解释1：在直观感觉上在多个尺度上同时进行卷积，能提取到不同尺度的特征。特征更为丰富也意味着最后分类判断时更加准确。</p></li><li><p>解释2：<strong>稀疏矩阵</strong>：数值为0的元素数目远远多 于非0元素的数目， 且无规律。<strong>稠密矩阵</strong>：数值非0的元素数目远远多 于为0元素的数目， 且无规律。</p><p>利用稀疏矩阵分解成密集矩阵计算的原理来加快收敛速度。举个例子下图左侧是个稀疏矩阵（很多元素都为0，不均匀分布在矩阵中），和一个2x2的矩阵进行卷积，需要对稀疏矩阵中的每一个元素进行计算；如果像右图那样把稀疏矩阵分解成2个子密集矩阵，再和2x2矩阵进行卷积，稀疏矩阵中0较多的区域就可以不用计算，计算量就大大降低。<strong>这个原理应用到inception上就是要在特征维度上进行分解！</strong>传统的卷积层的输入数据只和一种尺度（比如3x3）的卷积核进行卷积，输出固定维度（比如256个特征）的数据，所有256个输出特征基本上是均匀分布在3x3尺度范围上，这可以理解成输出了一个稀疏分布的特征集；而inception模块在多个尺度上提取特征（比如1x1，3x3，5x5），输出的256个特征就不再是均匀分布，而是相关性强的特征聚集在一起（比如1x1的的96个特征聚集在一起，3x3的96个特征聚集在一起，5x5的64个特征聚集在一起），这可以理解成多个密集分布的子特征集。这样的特征集中因为相关性较强的特征聚集在了一起，不相关的非关键特征就被弱化，同样是输出256个特征，inception方法输出的特征“冗余”的信息较少。用这样的“纯”的特征集层层传递最后作为反向计算的输入，自然收敛的速度更快。<img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201220231452289.png" alt="image-20201220231452289"></p></li><li><p>解释3：Hebbian赫布原理。Hebbian原理是神经科学上的一个理论，解释了在学习的过程中脑中神经元所发生的变化，用一句话概括就是<em>fire togethter, wire together</em>。赫布认为“两个神经元或者神经元系统，如果总是同时兴奋，就会形成一种‘组合’，其中一个神经元的兴奋会促进另一个的兴奋”。比如狗看到肉会流口水，反复刺激后，脑中识别肉的神经元会和掌管唾液分泌的神经元会相互促进，“缠绕”在一起，以后再看到肉就会更快流出口水。用在inception结构中就是要把相关性强的特征汇聚到一起。这有点类似上面的解释2，把1x1，3x3，5x5的特征分开。因为训练收敛的最终目的就是要提取出独立的特征，所以预先把相关性强的特征汇聚，就能起到加速收敛的作用。</p></li></ol></li><li><p>作者提出需要将全连接的结构转化成稀疏连接的结构。稀疏连接有两种方法，一种是空间（spatial）上的稀疏连接，也就是传统的CNN卷积结构：只对输入图像的某一部分patch进行卷积，而不是对整个图像进行卷积，共享参数降低了总参数的数目减少了计算量；另一种方法是在特征（feature）维度进行稀疏连接，就是前一节提到的在多个尺寸上进行卷积再聚合，把相关性强的特征聚集到一起，每一种尺寸的卷积只输出256个特征中的一部分，这也是种稀疏连接。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> paper reading,computer vision </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoogleNet </tag>
            
            <tag> computer vision </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ResNet</title>
      <link href="/2020/11/23/ResNet/"/>
      <url>/2020/11/23/ResNet/</url>
      
        <content type="html"><![CDATA[<h1 id="Deep-Residual-Learning-for-Image-Recognition"><a href="#Deep-Residual-Learning-for-Image-Recognition" class="headerlink" title="Deep Residual Learning for Image Recognition"></a>Deep Residual Learning for Image Recognition</h1><h2 id="1-背景、成果和意义"><a href="#1-背景、成果和意义" class="headerlink" title="1.背景、成果和意义"></a>1.背景、成果和意义</h2><h3 id="1-相关研究"><a href="#1-相关研究" class="headerlink" title="1. 相关研究"></a>1. 相关研究</h3><ul><li>Highway Network(2015年5月)，首个成功训练成百上千层(100层及900层)的卷积网络。借鉴LSTM，引入门控单元，将传统前向传播增加一条计算路径。</li></ul><h3 id="2-成果"><a href="#2-成果" class="headerlink" title="2. 成果"></a>2. 成果</h3><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201123210253632.png" alt="image-20201123210253632"></p><h3 id="3-意义"><a href="#3-意义" class="headerlink" title="3. 意义"></a>3. 意义</h3><ol><li>简洁高效的ResNet受到工业界宠爱，自提出以来已经成为工业界最受欢迎的卷积神经网络结构。</li><li>近代卷积神经网络发展史的又一里程碑，突破千层网络，跳层连接成为标配。</li></ol><h2 id="2-Paper"><a href="#2-Paper" class="headerlink" title="2.Paper"></a>2.Paper</h2><h3 id="1-摘要"><a href="#1-摘要" class="headerlink" title="1. 摘要"></a>1. 摘要</h3><ol><li>提出问题：深度卷积网络难训练</li><li>本文方法：残差学习框架可以让深层网络更容易训练</li><li>本文优点：ResNet易优化，并随着层数增加，精度也能提升</li><li>成果：ResNet比VGG深8倍，但计算复杂度更低，在ILSVRC-2015获得3.57%的top-error</li><li>other works：在CIFAR-10上训练了1000层的ResNet</li><li>其他成果：在coco检测任务中提升28%的精度，并基于ResNet夺得ILSVRC的检测、定位和COCO检测、分割四个任务的冠军</li></ol><h3 id="2-残差结构"><a href="#2-残差结构" class="headerlink" title="2. 残差结构"></a>2. 残差结构</h3><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201201154127701.png" alt="image-20201201154127701"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201201154225522.png" alt="image-20201201154225522"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201201154321823.png" alt="image-20201201154321823"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201201154402367.png" alt="image-20201201154402367"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201201154431671.png" alt="image-20201201154431671"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201201154447132.png" alt="image-20201201154447132"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201201154834389.png" alt="image-20201201154834389"></p><h3 id="3-ResNet结构"><a href="#3-ResNet结构" class="headerlink" title="3. ResNet结构"></a>3. ResNet结构</h3><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201201155036300.png" alt="image-20201201155036300"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201201155052569.png" alt="image-20201201155052569"></p><h3 id="4-预热训练-warm-up"><a href="#4-预热训练-warm-up" class="headerlink" title="4. 预热训练(warm-up)"></a>4. 预热训练(warm-up)</h3><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201201155229802.png" alt="image-20201201155229802"></p><h2 id="3-论文总结"><a href="#3-论文总结" class="headerlink" title="3.论文总结"></a>3.论文总结</h2><h3 id="1-关键点"><a href="#1-关键点" class="headerlink" title="1. 关键点"></a>1. 关键点</h3><ul><li>引入shortcut connection，让网络信息有效传播，梯度反传顺畅，使得上千层的卷积网络也可以收敛。</li></ul><h3 id="2-启发点"><a href="#2-启发点" class="headerlink" title="2. 启发点"></a>2. 启发点</h3><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201201155740005.png" alt="image-20201201155740005"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201201155800368.png" alt="image-20201201155800368"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201201155814823.png" alt="image-20201201155814823"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201201155832853.png" alt="image-20201201155832853"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201201155933172.png" alt="image-20201201155933172"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201201160100817.png" alt="image-20201201160100817"></p>]]></content>
      
      
      <categories>
          
          <category> paper reading,computer vision </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer vision </tag>
            
            <tag> ResNet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AlexNet</title>
      <link href="/2020/10/26/AlexNet/"/>
      <url>/2020/10/26/AlexNet/</url>
      
        <content type="html"><![CDATA[<h1 id="ImageNet-Classification-with-Deep-Convolutional-Neural-Networks"><a href="#ImageNet-Classification-with-Deep-Convolutional-Neural-Networks" class="headerlink" title="ImageNet Classification with Deep Convolutional Neural Networks"></a>ImageNet Classification with Deep Convolutional Neural Networks</h1><h2 id="1-研究背景"><a href="#1-研究背景" class="headerlink" title="1.研究背景"></a>1.研究背景</h2><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/10/26/16605ace52806eb70dbf2503cda5b138.png" alt="image-20201026214239316"></p><p>ILSVRC：大规模图像识别挑战赛 ImageNet Large Scale Visual Recognition Challenge 是李飞飞等人于2010年创办的图像识别挑战赛，自 2010起连续举办8年，极大地推动计算机视觉发展。比赛项目涵盖：图像分类(Classification)、目标定位(Object localization)、目标检测(Object detection)、视 频目标检测(Object detection from video)、场景分类(Scene classification)、场景解析(Scene parsing) 竞赛中脱颖而出大量经典模型： alexnet，vgg，googlenet，resnet，densenet等。</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/10/26/8d9a32ce1f48f80b0a34c611ef8f63d2.png" alt="image-20201026214630430"></p><p>TOP-5 error: For each image, algorithms will produce a list of at most 5 object categories in the descending order of confidence. The quality of a labeling will be evaluated based on the label that best matches the ground truth label for the image. The idea is to allow an algorithm to identify multiple objects in an image and not be penalized if one of the objects identified was in fact present, but not included in the ground truth. For each image, an algorithm will produce 5 labels <script type="math/tex">l_j</script>,<em>j</em>=1,…,5. The ground truth labels for the image are <script type="math/tex">g_k</script>,<em>k</em>=1,…,<em>n</em> with n classes of  objects labeled. The error of the algorithm for that image would be <script type="math/tex">e=\frac{1}{n} \cdot \sum_{k} \min _{j} d\left(l_{j}, g_{k}\right)</script>, <em>d</em>(<em>x</em>,<em>y</em>)=0 if <em>x</em>=<em>y</em> and 1 otherwise. The overall error score for an algorithm is the average error over  all test images. Note that for this version of the competition, n=1, that is, one ground truth label per image.</p><h2 id="2-研究成果"><a href="#2-研究成果" class="headerlink" title="2.研究成果"></a>2.研究成果</h2><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/10/27/dcef9899c597b68033d69fa64d38c234.png" alt="image-20201027193850118"></p><h2 id="3-AlexNet历史意义"><a href="#3-AlexNet历史意义" class="headerlink" title="3.AlexNet历史意义"></a>3.AlexNet历史意义</h2><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/10/27/2619444912a723bbd757a042bdbed49b.png" alt="image-20201027193948812"></p><h2 id="4-Paper"><a href="#4-Paper" class="headerlink" title="4.Paper"></a>4.Paper</h2><h3 id="4-1-Abstract"><a href="#4-1-Abstract" class="headerlink" title="4.1 Abstract"></a>4.1 Abstract</h3><ol><li>在ILSVRC-2010的120万张图片上训练深度卷积神经网络，获得最优结果，top-1和top-5 error分别为 37.5%, 17%。</li><li>该网络（AlexNet）由5个卷积层和3个全连接层构成，共计6000万参数，65万个神经元。</li><li>为加快训练，采用非饱和激活函数——ReLU，采用GPU训练。</li><li>为减轻过拟合，采用Dropout。</li><li>基于以上模型及技巧，在ILSVRC-2012以超出第二名10.9个百分点成绩夺冠。</li></ol><h3 id="4-2-AlexNet结构"><a href="#4-2-AlexNet结构" class="headerlink" title="4.2 AlexNet结构"></a>4.2 AlexNet结构</h3><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/10/28/b8c8788bcc19d602553cee68e517ad68.png" alt="image-20201028185046038"></p><ol><li><p>5个卷积层，3个全连接层</p></li><li><p>参数计算：</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/10/28/90846dc37d5a86465cf0ad54f4c5cb4a.png" alt="image-20201028200920234"></p><p><script type="math/tex">F_i</script>是输入通道数，<script type="math/tex">K_s</script>是卷积核尺寸，<script type="math/tex">K_n</script>是输出通道数。</p></li><li><p>结构特点</p><ol><li><p>ReLU Nonlinearity</p><ol><li><p>使网络训练更快</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/10/28/99f32879c9619b4c4d525df1c603fd2f.png" alt="image-20201028203115694" style="zoom:80%;" /></p></li><li><p>防止梯度消失</p></li><li><p>使网络具有稀疏性（负半轴归0）</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/10/28/0ef20eb499c101f1009aedbbc94870b0.png" alt="image-20201028203200576"></p></li></ol></li><li><p>Local Response Normalization(局部响应标准化) (现已基本弃用)</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/10/28/a91af481a1e7dbc974a221fe4a409e6d.png" alt="image-20201028204803548"></p><p>Response normalization reduces our top-1 and top-5 error rates by 1.4% and 1.2%, respectively.</p></li><li><p>Overlapping Pooling(带重叠的池化)</p><p>传统池化：步长stride=池化核大小z</p><p>Overlapping Pooling：步长stride&lt;池化核大小z</p><p>This scheme reduces the top-1 and top-5 error rates by 0.4% and 0.3%, respectively.</p></li></ol></li></ol><h3 id="4-3-训练技巧"><a href="#4-3-训练技巧" class="headerlink" title="4.3 训练技巧"></a>4.3 训练技巧</h3><ol><li><p>Data Augmentation</p><ul><li><p>针对位置</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/20201103203959.png" alt=""></p></li><li><p>针对颜色：通过PCA方法修改RGB通道的像素值，实现颜色扰动，在top-1中提升1个点</p></li></ul></li><li><p>Dropout</p><p>Combining the predictions of many different models is a very successful way to reduce test errors, but it appears to be too expensive for big neural networks that already take several days to train. There is, however, a very efficient version of model combination that only costs about a factor of two during training. The recently-introduced technique, called “dropout”, consists of setting to zero the output of each hidden neuron with probability 0.5. The neurons which are “dropped out” in this way do not contribute to the forward pass and do not participate in back-propagation. So every time an input is presented, the neural network samples a different architecture, but all these architectures share weights. </p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/20201103203838.png" alt=""></p></li></ol><h3 id="4-4-实验结果及分析"><a href="#4-4-实验结果及分析" class="headerlink" title="4.4 实验结果及分析"></a>4.4 实验结果及分析</h3><ol><li><p>ILSVRC-2012分类比赛<img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201109161600304.png" alt="image-20201109161600304"></p></li><li><p>卷积核可视化</p><ul><li>卷积核呈现出对不同频率、方向和颜色特征的敏感性</li><li>两个gpu呈现出分工学习的特点</li></ul><p>The kernels on GPU 1 are largely color-agnostic, while the kernels<br>on on GPU 2 are largely color-specific. This kind of specialization occurs during every run and is independent of any particular random weight initialization.</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201109162653524.png" alt="image-20201109162653524"></p></li><li><p>特征的相似性</p><ul><li><p>相似图片的第二个全连接层输出的特征向量的欧氏距离相近。</p></li><li><p>直接用欧氏距离计算4096维全连接输出向量的相似性仍是低效的，但可以通过自编码器(auto-encoder)来利用这些向量得到编码，这比直接将自编码器作用在原图(224x224x3)上更高效。</p></li><li><p>启发：可用AlexNet提取高级特征进行图像检索、图像聚类、图像编码。</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201109164602784.png" alt="image-20201109164602784"></p></li></ul></li></ol><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><ol><li><p>创新点</p><ul><li>采用ReLu加快网络训练（广泛使用）</li><li>采用LRN提升网络泛化能力</li><li>采用Overlapping Pooling提升指标</li><li>采用随机裁剪翻转及色彩扰动增加数据多样性（广泛使用）</li><li>采用Dropout减轻过拟合（FC层使用，广泛使用）</li></ul></li><li><p>启发点（可用于参考文献备用）</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201110134814268.png" alt="image-20201110134814268"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201110134840650.png" alt="image-20201110134840650"></p></li></ol><h2 id="6-代码"><a href="#6-代码" class="headerlink" title="6. 代码"></a>6. 代码</h2><ol><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">torch.topk(input, k, dim=<span class="literal">None</span>, largest=<span class="literal">True</span>, sorted=<span class="literal">True</span>, out=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 功能：找出前k大的数据，及其索引序号</span></span><br><span class="line"><span class="comment"># input:张量</span></span><br><span class="line"><span class="comment"># k:决定选取k个值</span></span><br><span class="line"><span class="comment"># dim:索引维度</span></span><br><span class="line"><span class="comment"># 返回：</span></span><br><span class="line"><span class="comment">#     Tensor:前k大的值</span></span><br><span class="line"><span class="comment">#     LongTensor:前k大的值所在的位置</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">transforms.FiveCrop(size)</span><br><span class="line">transforms.TenCrop(size, vertical_flip=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 功能：FiveCrop在图像的上下左右以及中心裁剪出尺寸为size的5张</span></span><br><span class="line"><span class="comment"># 图片。TenCrop对这5张图片进行水平或垂直镜像获得10张图片。</span></span><br><span class="line"><span class="comment"># size:所需裁剪图片尺寸</span></span><br><span class="line"><span class="comment"># vertical_flip:是否垂直翻转</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">torchvision.utils.make_grid(tensor, nrow=<span class="number">8</span>, padding=<span class="number">2</span>, normalize=<span class="literal">False</span>, range=<span class="literal">None</span>, scale_each=<span class="literal">False</span>, pad_value=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 功能：制作网格图像，如将一个tensor的数据展成一大张网格图来观察</span></span><br><span class="line"><span class="comment"># tensor:图像数据，B*C*H*W格式</span></span><br><span class="line"><span class="comment"># nrow:行数（列数自动计算）</span></span><br><span class="line"><span class="comment"># padding: 图像间距（像素单位）</span></span><br><span class="line"><span class="comment"># normalize:是否将像素值标准化</span></span><br><span class="line"><span class="comment"># range:标准化范围</span></span><br><span class="line"><span class="comment"># scale_each:是否单张图维度标准化</span></span><br><span class="line"><span class="comment"># pad_value:padding的像素值</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> paper reading </category>
          
          <category> computer vision </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer vision </tag>
            
            <tag> AlexNet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VGG</title>
      <link href="/2020/10/09/VGG/"/>
      <url>/2020/10/09/VGG/</url>
      
        <content type="html"><![CDATA[<h1 id="Very-deep-convolutional-networks-for-large-scale-image-recognition"><a href="#Very-deep-convolutional-networks-for-large-scale-image-recognition" class="headerlink" title="Very deep convolutional networks for large-scale image recognition"></a>Very deep convolutional networks for large-scale image recognition</h1><h2 id="1-学习目标"><a href="#1-学习目标" class="headerlink" title="1.学习目标"></a>1.学习目标</h2><ol><li>模型结构设计<ol><li>小卷积核</li><li>堆叠使用卷积核</li><li>分辨率减半，通道数翻倍</li></ol></li><li>训练技巧<ol><li>尺度扰动</li><li>预训练模型初始化</li></ol></li><li>测试技巧<ol><li>多尺度测试<ol><li>Dense测试</li><li>Multi-crop测试</li></ol></li><li>多模型融合</li></ol></li></ol><h2 id="2-研究背景、成果和意义"><a href="#2-研究背景、成果和意义" class="headerlink" title="2.研究背景、成果和意义"></a>2.研究背景、成果和意义</h2><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201111161555933.png" alt="image-20201111161555933"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201111161948685.png" alt="image-20201111161948685"></p><ol><li><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201111162100399.png" alt="image-20201111162100399"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201111162214168.png" alt="image-20201111162214168"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201111190030126.png" alt="image-20201111190030126"></p><p>该模型将全连接层替换为1x1卷积，使得可以多种维度输入，且减少了重复运算。</p></li><li><p>VGG在以上模型基础上：</p><ol><li>借鉴AlexNet卷积模型结构</li><li>借鉴ZFNet小卷积核思想</li><li>借鉴OverFeat全卷积思想，实现高效的Dense预测</li><li>借鉴NIN(Network in Network)的1x1卷积</li></ol></li><li><p>VGG在ILSVRC2014的成绩</p><ul><li>VGG定位第一名，分类第二名</li><li>GoogLeNet分类第一名，定位第二名</li></ul></li><li><p>研究意义</p><ol><li>开启小卷积核时代，3x3卷积核成为主流模型</li><li>作为各类图像任务的骨干网络结构：分类、定位、检测、分割等</li></ol></li></ol><h2 id="3-VGG结构"><a href="#3-VGG结构" class="headerlink" title="3.VGG结构"></a>3.VGG结构</h2><h3 id="3-1-模型演变（VGG11-VGG19）"><a href="#3-1-模型演变（VGG11-VGG19）" class="headerlink" title="3.1 模型演变（VGG11-VGG19）"></a>3.1 模型演变（VGG11-VGG19）</h3><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201115163138754.png" alt="image-20201115163138754"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201115163211898.png" alt="image-20201115163211898"></p><h3 id="3-2-参数计算"><a href="#3-2-参数计算" class="headerlink" title="3.2 参数计算"></a>3.2 参数计算</h3><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201115175901254.png" alt="image-20201115175901254"></p><p>注：一个像素需要4个Bytes存储。</p><h3 id="3-3-模型结构"><a href="#3-3-模型结构" class="headerlink" title="3.3 模型结构"></a>3.3 模型结构</h3><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/20201115180355.png" alt=""></p><h2 id="4-VGG特点"><a href="#4-VGG特点" class="headerlink" title="4.VGG特点"></a>4.VGG特点</h2><ol><li><p>堆叠3x3卷积核</p><ol><li><p>增大感受野：2个3x3堆叠等价于1个5x5；3个3x3堆叠等价于1个7x7.</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201115183158187.png" alt="image-20201115183158187"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201115183220654.png" alt="image-20201115183220654"></p></li><li><p>增加非线性激活函数，提升特征抽象能力</p></li><li><p>减少训练参数</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201115183327137.png" alt="image-20201115183327137"></p></li><li><p>可看成7x7卷积核的正则化，强迫7x7分解为3x3</p></li></ol></li><li><p>尝试1x1卷积</p><ul><li>借鉴NIN，引入利用1*1卷积，增加非线性激活函数，提升模型效果。</li></ul></li></ol><h2 id="5-训练技巧"><a href="#5-训练技巧" class="headerlink" title="5.训练技巧"></a>5.训练技巧</h2><h3 id="5-1-数据增强"><a href="#5-1-数据增强" class="headerlink" title="5.1 数据增强"></a>5.1 数据增强</h3><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201116211813939.png" alt="image-20201116211813939"></p><h3 id="5-2-预训练模型初始化"><a href="#5-2-预训练模型初始化" class="headerlink" title="5.2 预训练模型初始化"></a>5.2 预训练模型初始化</h3><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201116211925947.png" alt="image-20201116211925947"></p><h2 id="6-测试技巧"><a href="#6-测试技巧" class="headerlink" title="6.测试技巧"></a>6.测试技巧</h2><h3 id="6-1-多尺度测试"><a href="#6-1-多尺度测试" class="headerlink" title="6.1 多尺度测试"></a>6.1 多尺度测试</h3><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201116214336080.png" alt="image-20201116214336080"></p><h3 id="6-2-稠密测试（Dense-test"><a href="#6-2-稠密测试（Dense-test" class="headerlink" title="6.2 稠密测试（Dense test)"></a>6.2 稠密测试（Dense test)</h3><ol><li><p>将FC层转换为卷积操作，变为全卷积网络，实现任意尺寸图片输入</p></li><li><p>经过全卷积网络得到NxNx1000的特征图</p></li><li><p>在通道维度上求和计算平均值，得到1x1000的输出向量。（因为这里是分类网络，通过多尺度平均以得到最终分类结果）</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201116220302143.png" alt="image-20201116220302143"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201116220324918.png" alt="image-20201116220324918"></p></li></ol><h3 id="6-3-Multi-Crop测试"><a href="#6-3-Multi-Crop测试" class="headerlink" title="6.3 Multi-Crop测试"></a>6.3 Multi-Crop测试</h3><ul><li>借鉴AlexNet与GoogleNet，对图片进行Multi-Crop，裁剪大小为224x224，并水平翻转。</li><li>每张图，缩放成3种尺寸，然后每种尺寸裁剪出50张图片。(50=5x5x2，2源于水平翻转)</li></ul><h3 id="6-4-综合"><a href="#6-4-综合" class="headerlink" title="6.4 综合"></a>6.4 综合</h3><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201116220736653.png" alt="image-20201116220736653"></p><h2 id="7-实验结果及分析"><a href="#7-实验结果及分析" class="headerlink" title="7.实验结果及分析"></a>7.实验结果及分析</h2><h3 id="7-1-Single-scale-evaluation"><a href="#7-1-Single-scale-evaluation" class="headerlink" title="7.1 Single scale evaluation"></a>7.1 Single scale evaluation</h3><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201117162150582.png" alt="image-20201117162150582"></p><h3 id="7-2-Multi-scale-evaluation"><a href="#7-2-Multi-scale-evaluation" class="headerlink" title="7.2 Multi scale evaluation"></a>7.2 Multi scale evaluation</h3><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201117162342152.png" alt="image-20201117162342152"></p><h3 id="7-3-Multi-crop-evaluation"><a href="#7-3-Multi-crop-evaluation" class="headerlink" title="7.3 Multi crop evaluation"></a>7.3 Multi crop evaluation</h3><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201117163429629.png" alt="image-20201117163429629"></p><h3 id="7-4-Convnet-fusion"><a href="#7-4-Convnet-fusion" class="headerlink" title="7.4 Convnet fusion"></a>7.4 Convnet fusion</h3><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201117163614628.png" alt="image-20201117163614628"></p><h2 id="8-论文总结"><a href="#8-论文总结" class="headerlink" title="8.论文总结"></a>8.论文总结</h2><h3 id="8-1-关键点-amp-创新点"><a href="#8-1-关键点-amp-创新点" class="headerlink" title="8.1 关键点&amp;创新点"></a>8.1 关键点&amp;创新点</h3><ul><li>堆叠小卷积核，加深网络</li><li>训练阶段，尺度扰动</li><li>测试阶段，多尺度及Dense+Multi crop</li></ul><h3 id="8-2-启发点"><a href="#8-2-启发点" class="headerlink" title="8.2 启发点"></a>8.2 启发点</h3><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201117170045000.png" alt="image-20201117170045000"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201117170107328.png" alt="image-20201117170107328"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201117170230707.png" alt="image-20201117170230707"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201117170300609.png" alt="image-20201117170300609"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN/img/image-20201117170314055.png" alt="image-20201117170314055"></p>]]></content>
      
      
      <categories>
          
          <category> paper reading,computer vision </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer vision </tag>
            
            <tag> VGG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感受野(Receptive Field)</title>
      <link href="/2020/09/23/%E6%84%9F%E5%8F%97%E9%87%8E%EF%BC%88Receptive%20Field)/"/>
      <url>/2020/09/23/%E6%84%9F%E5%8F%97%E9%87%8E%EF%BC%88Receptive%20Field)/</url>
      
        <content type="html"><![CDATA[<h1 id="感受野（Receptive-Field"><a href="#感受野（Receptive-Field" class="headerlink" title="感受野（Receptive Field)"></a>感受野（Receptive Field)</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>The <strong>receptive field</strong> is defined as the region in the input space that <strong>a particular CNN’s feature</strong> is looking at (i.e. be affected by).</p><p>感受野，指的是神经网络中神经元“看到的”输入区域。在CNN中，feature map上某个元素的计算受<strong>输入图像上某个区域的影响</strong>，这个区域即该元素的感受野。</p><p>CNN中，越深层的神经元看到的输入区域越大（解释见下图）。下图中卷积核大小为<script type="math/tex">3\times 3</script>，stride为1，绿色标记的是Layer2每个神经元看到的区域，黄色标记的是Layer3看到的区域。由Layer3的一个元素可以向Layer2逆映射为<script type="math/tex">3\times 3</script>大小的区域，而由Layer2的9个元素又可以向Layer1逆映射为<script type="math/tex">5\times 5</script>大小的区域。</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/09/24/e7c6e95831455e1098467114bcb34d82.png" alt="image-20200924201619103"></p><p>为了具体计算感受野，有视觉系统中的概念：</p><script type="math/tex; mode=display">receptive field = center + surround</script><p>准确计算感受野，需要知道<strong>视野中心在哪</strong>和<strong>视野范围多大</strong>：</p><ul><li>只有看到“合适范围的信息”才可能做出正确的判断，否则会出现信息量过少或过多的情况</li><li>要知道神经元看到的是哪个区域，才能合理推断物体在哪以及判断是什么物体</li></ul><h2 id="2-计算"><a href="#2-计算" class="headerlink" title="2.计算"></a>2.计算</h2><h3 id="2-1-约定"><a href="#2-1-约定" class="headerlink" title="2.1 约定"></a>2.1 约定</h3><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/09/24/e6ede9fb87920428be28765644c1c443.png" alt="image-20200924203403863"></p><p>图中，</p><ul><li>Layer: 用Layer表示feature map，特别地，Layer0表示输入图像。</li><li>Conv: 用Conv表示卷积，k,p,s为卷积核的超参数，Conv l的输入和输出分别为Layer l-1和Layer l+1。</li><li>r: receptive field size 为<script type="math/tex">r\times r</script></li><li>j: feature map上相邻元素间的像素距离，即<strong>将feature map上的元素与输入图像Layer 0上感受野的中心对齐后，相邻元素在输入图像上的像素距离，也可以理解为 feature map上前进1步相当于输入图像上前进多少个像素</strong>。（如下图，feature map上前进1步，相当于输入图像上前进2个像素，故j=2）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/09/24/9aab12f013e827b828d534b11fb32100.png" alt=""></p><ul><li>start: feature map左上角元素在输入图像上的感受野中心坐标(start, start)，即<strong>视野中心的坐标</strong>。上图中，左上角绿色块感受野中心坐标为(0.5, 0.5)，左上角白色虚线块中心的坐标为(-0.5, -0.5)。</li></ul><h3 id="2-2-感受野大小"><a href="#2-2-感受野大小" class="headerlink" title="2.2 感受野大小"></a>2.2 感受野大小</h3><p>见前面第一幅图，feature map Layer2上的一个元素A看到Layer1上的区域为<script type="math/tex">3\times 3</script>大小，等于卷积核大小<script type="math/tex">k_2</script>，所以，A看到的感受野范围<script type="math/tex">r_{2}</script>等价于Layer1上<script type="math/tex">3\times 3</script>窗口看到的Layer0上的区域，据此建立相邻Layer间感受野的关系，如下所示，其中<script type="math/tex">r_{l}</script>为<script type="math/tex">Layer\space l</script>的感受野，<script type="math/tex">r_{l-1}</script>为<script type="math/tex">Layer\space l-1</script>的感受野，则有递推关系：</p><script type="math/tex; mode=display">r_{l} = r_{l-1} + (k_{l}-1)\times j_{l-1}</script><ul><li>$Layer\space l$一个元素的感受野$r_{l}$等价于$Layer\space l-1$上$k\times k$个感受野的叠加</li><li>$Layer\space l-1$中一个元素的感受野为$r_{l-1}$</li><li>$Layer\space l-1$上连续k个元素的感受野可以看成是<strong>第一个元素看到的感受野加上剩余$k-1$步扫过的范围</strong>，$Layer\space l-1$中每前进1个元素相当于在输入图像上前进<script type="math/tex">j_{l-1}</script>个像素，故结果等于<script type="math/tex">r_{l-1}+(k_{l}-1)\times j_{l-1}</script>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/09/24/89cf43841b8652e3b82bd8baaddc8731.png" alt="image-20200924213138228"></p><ul><li><p>如何求$j_{l}$？</p><p>$Layer\space l$中每前进1个元素相当于$Layer\space l-1$中前进$s_{l}$个元素，则有</p><script type="math/tex; mode=display">j_{l}=j_{l-1}\times s_{l}</script><p>其中，<script type="math/tex">s_{l}</script>为<script type="math/tex">Conv\space l</script>的卷积核在$Layer\space l-1$上滑动的步长，令输入图像的<script type="math/tex">s_{0}=1</script>。则有</p><script type="math/tex; mode=display">j_{l}=\prod_{i=0}^{l} s_{i}</script><p>故$Layer\space l$中前进1个元素，相当于在输入图像前进了<script type="math/tex">\prod_{i=0}^{l} s_{i}</script>个像素，即前面所有层的stride连乘。进一步可得$Layer\space l$的感受野大小为</p><script type="math/tex; mode=display">\begin{aligned}r_{l} &=r_{l-1}+\left(k_{l}-1\right) * j_{l-1} \\&=r_{l-1}+\left(\left(k_{l}-1\right) * \prod_{i=0}^{l-1} s_{i}\right)\end{aligned}</script></li></ul><h3 id="2-3-感受野中心"><a href="#2-3-感受野中心" class="headerlink" title="2.3 感受野中心"></a>2.3 感受野中心</h3><p><strong>感受野中心的计算也是个递推公式。</strong></p><p>在上一节中计算得<script type="math/tex">j_{l}=\prod_{i=0}^{l} s_{i}</script>，表示<strong>feature map$Layer\space l$中前进1个元素相当于在输入图像上前进的像素数目，如果将feature map上元素与感受野中心对齐，则$j_{l}$为感受野中心之间的像素距离。</strong>如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/09/24/45d43fd8e430b62f768c489f95fef957.png" alt="image-20200924215047554"></p><p>其中，右侧图为feature map和感受野中心对齐后的示意图。</p><p>相邻Layer间，感受野中心的关系为</p><script type="math/tex; mode=display">\text {start}_{l}=\operatorname{start}_{l-1}+\left(\frac{k_{l}-1}{2}-p_{l}\right) \times j_{l-1}</script><p><strong>所有的start坐标均相对于输入图像坐标系。</strong>其中，<script type="math/tex">start_{0}=(0.5,0.5)</script>为输入图像左上角像素的中心坐标，<script type="math/tex">start_{l-1}</script>表示<script type="math/tex">Layer\space l-1</script>左上角元素的感受野中心坐标，<script type="math/tex">\left(\frac{k_{l}-1}{2}-p_{l}\right)</script>为$Layer\space l$与<script type="math/tex">Layer\space l-1</script>感受野中心<strong>相对于<script type="math/tex">Layer\space l-1</script>坐标系的偏差，该偏差需折算到输入图像坐标系</strong>，其值需要乘上<script type="math/tex">j_{l-1}</script>，即<script type="math/tex">Layer\space l-1</script>相邻元素间的像素距离，相乘的结果为<script type="math/tex">\left(\frac{k_{l}-1}{2}-p_{l}\right)\times j_{l-1}</script>，即感受野中心间的像素距离——相对输入图像坐标系。这个过程可视化如下：</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/09/24/6c6455ccd50df412e78075cbcf79544c.png" alt="image-20200924220059422"></p><p><strong>知道了$Layer\space l$左上角元素的感受野中心坐标$(start<em>{l},start</em>{l})$，通过该层相邻元素间的像素距离$j_l$可以推算其他元素的感受野中心坐标。</strong></p><h2 id="3-注意"><a href="#3-注意" class="headerlink" title="3. 注意"></a>3. 注意</h2><p>最后，还有几点需要注意，</p><ul><li><script type="math/tex">Layer\space l</script>的感受野大小与<script type="math/tex">s_{l},p_{l}</script>无关，即当前feature map元素的感受野大小与该层相邻元素间的像素距离无关；</li><li>为了简化，通常将padding size设置为kernel的半径，即<script type="math/tex">p=\frac{k-1}{2}</script>，可得<script type="math/tex">\text {start}_{l}=\operatorname{star} t_{l-1}</script>，使得feature map $Layer\space l$上$(x,y)$位置的元素，其感受野中心坐标为<script type="math/tex">(start_{0}+x*j_{l},start_{0}+y*j_{l})</script>；</li><li>对于<strong>空洞卷积dilated convolution，相当于改变了卷积核的尺寸</strong>，若含有dilation rate参数，只需将<script type="math/tex">k_{l}</script>替换为<script type="math/tex">dilation rate\times (k_{l}−1)+1$ ，$dilation rate=1</script>时为正常卷积；</li><li><strong>对于pooling层，可将其当成特殊的卷积层</strong>，同样存在kernel size、padding、stride参数；</li><li><strong>非线性激活层为逐元素操作，不改变感受野。</strong></li></ul><h2 id="4-Reference"><a href="#4-Reference" class="headerlink" title="4. Reference"></a>4. Reference</h2><p><a href="https://www.cnblogs.com/shine-lee/p/12069176.html" target="_blank" rel="noopener">https://www.cnblogs.com/shine-lee/p/12069176.html</a></p>]]></content>
      
      
      <categories>
          
          <category> object detection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> object detection </tag>
            
            <tag> receptive field </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLOv4</title>
      <link href="/2020/09/01/yolo4_paper/"/>
      <url>/2020/09/01/yolo4_paper/</url>
      
        <content type="html"><![CDATA[<p>conference</p><ul><li><a href="https://arxiv.org/pdf/2004.10934.pdf" target="_blank" rel="noopener">yolov4</a></li></ul><ol><li><p>Abstract</p><p>43.5%AP (65.7% AP50) for the MS COCO dataset at a real-<br>time speed of ∼65 FPS on Tesla V100. </p></li><li><p>Introduction</p><ul><li>contributions:<ul><li>develope an efficient and powerful object detection<br>model. It makes everyone can use a 1080 Ti or 2080 Ti<br>GPU to train a super fast and accurate object detector.</li><li>verify the influence of state-of-the-art Bag-of-<br>Freebies and Bag-of-Specials methods of object detec-<br>tion during the detector training.</li><li>modify state-of-the-art methods and make them<br>more effecient and suitable for single GPU training,<br>including CBN [89], PAN [49], SAM [85], etc.</li></ul></li></ul></li><li><p>Related work</p><ul><li><p>Object detection models</p><ul><li><p>A detector is composed of two parts: a backbone which is pre-trained on ImageNet and a head which is used to predict classes and bounding boxes of objects.</p></li><li><p>As to the head part,it is usually categorized into two kinds, i.e., one-stage object detector and two-stage object detector.</p></li><li><p>Object detectors developed in recent years often insert some layers between backbone and head, and these layers are usually used to collect feature maps from different stages. We call it the neck of an object detector. </p></li><li><p>In addition, some researchers put their emphasis on directly building a new backbone (DetNet, DetNAS) or a new whole model (SpineNet, HitDetector ) for object detection.</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/09/05/a82c3ebfd0ddb07d6c5e019a9fc85863.png" alt="image-20200905152609774"></p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/09/05/9441244025ae7f064fd50200c453f9e7.png" alt="image-20200905152541897"></p></li></ul></li></ul></li></ol><ul><li><p>Bag of freebies</p><ol><li><p>definition: the methods that only change the training strategy or only increase the training cost.</p></li><li><p>data augmentation:</p><ol><li><p>pixel-wise adjustments: photometric distortions(brightness,contrast,hue,saturation and noise of an image), geometric distortion(random scaling,cropping,flipping and rotating)</p><p>Above methods retain original pixel information in the adjusted area.</p></li><li><p>simulating object occlusion issues: random erase and CutOut(randomly select the rectangle region in an image and fill in a random or complementary value of zero), MixUp(using two images to multiply and superimpose with different coefficient ratios, and then adjusts the label with these superimposed ratios), CutMix(covering the cropped image to rectangle region of other images and adjusting the label according to the size of the mix area), style transfer GAN(effectively reducing the texture bias learned by CNN)</p></li><li><p>data imbalance between different classes: hard negative example mining or online hard example mining(<strong>in two-stage object detector</strong>), focal loss(<strong>for one-stage object detector</strong>)</p></li><li><p>express the relationship of the degree of association between different categories with the one-hot hard representation: label smoothing</p></li><li><p>bounding box regression</p><ol><li>traditional: Mean Square Error(MSE),  <strong>but</strong> to directly estimate the coordinate values of each point of the BBox is to treat these points as independent variables, but does not consider the integrity of the object itself.</li><li>IoU loss, puts the coverage of predicted BBox area and ground truth BBox area into consideration.</li><li>GIoU loss(including the shape and orientation of object), finding the smallest area BBox that can simultaneously cover the predicted BBox and ground truth BBox, and using the BBox as the denominator to replace the denominator in IoU loss.</li><li>DIoU loss, additionally considers the distance of the center of an object.</li><li>CIoU loss, simultaneously considers the overlapping area, the distance between center points and the aspect ratio.</li></ol></li></ol></li></ol></li><li><p>Bag of specials</p><ol><li>definition: the methods that only increase the inference cost by a small amount but can significantly improve the accuracy of object detection.</li><li>enhance receptive field: SPP, ASPP, RFB. </li><li>attention module:<ol><li>channel-wise attention: Squeeze-and-Excitation(SE)</li><li>point-wise attention: Spatial Attention Module(SAM)</li></ol></li><li>feature integration: FPN, SFAM, ASFF, BiFPN.</li><li>good activation function: ReLU(substantially solve the gradient vanish problem which is frequently encounterd in traditional tanh and sigmoid activation function), LReLU, PReLU, ReLU6, Scaled Exponential Linear Unit(SELU), Swish, hard-Swish, Mish.(Swish and Mish are continuously differentiable activation function).</li><li>post-processing method: NMS(filtering BBoxes that badly predict the same object, and only retain the candidate BBoxes with higher response), greedy NMS, soft NMS(considering  the problem that the occlusion of an object may cause the degradation of confidence score in greedy NMS with IoU score), DIoU NMS(adding the information of the center point distance to the BBox screening process on the basis of soft NMS).</li></ol></li></ul><ol><li><p>Methodology</p><ul><li><p>Selection of architecture</p><p>Objective: find the optimal balance among the input network resolution, the convolutional layer number, the parameter number and the number of layer outputs(filters).</p><p>Next objective: select additional blocks for <strong>increasing the receptive field</strong> and the best method of parameter aggregation from different backbone levels for different detector levels: FPN,PAN,ASFF,BiFPN.</p><p>Detector requires the following:</p><ul><li>Higher input network size(resolution)-for detecting multiple small-sized objects</li><li>More layers-for a higher receptive field to cover the increased size of input network</li><li>More parameters-for greater capacity of a model to detect multiple objects of different sizes in a single image</li></ul><p>The influence of the receptive field with different sizes:</p><ul><li>up to the object size - allows viewing the entire object</li><li>up to network size - allows viewing the context around the object</li><li>exceeding the network size - increases the number of connections between the image point and the final activation</li></ul><p><strong>Finally, the paper(Yolov4) chooses choose CSPDarknet53 backbone, SPP additional module, PANet path-aggregation neck, and YOLOv3(anchor based) head as the architecture of YOLOv4.</strong></p></li><li><p>Selection of BoF and BoS</p><p>a CNN usually uses the following training tricks:</p><ul><li>Activations: ReLU, leaky-ReLU, parametric-ReLU, ReLU6, SELU, Swish, Mish</li><li>Bounding box regression loss: MSE, IoU, GIoU, CIoU, DIoU</li><li>Data augmentation: CutOut, MixUp, CutMix</li><li>Regularization method: DropOut, DropPath, Spatial DropOut, DropBlock</li><li>Normalization of the network activations by their mean and variance: Batch Normalization, Cross-GPU Batch Normalization(CGBN or SyncBN), Filter Response Normalization(FRN), Cross-Iteration Batch Normalization(CBN)</li><li>Skip-connections: Residual connections, Weighted residual connections, Multi-input weighted residual connections, Cross stage partial connections(CSP)</li></ul><p>PReLU and SELU are more difficult to train, and ReLU6 is specifically designed for quantization network.</p></li><li><p>Additional improvements</p><ul><li>Introducing a new method of data augmentation Mosaic, and Self-Adversarial Training(SAT)</li><li>Selecting optimal hyper-parameters while applying genetic algorithms</li><li>Modifying some exsiting methods: modified SAM, modified PAN, and Cross mini-Batch Normalization(CmBN)</li></ul></li><li><p>YOLOv4</p><p>consists of:</p><ul><li>Backbone: CSPDarknet53</li><li>Neck: SPP, PAN</li><li>Head: YOLOv3</li></ul><p>BoF for backbone: CutMix, Mosaic data augmentation, Dropblock regularization, Class label smoothing</p><p>BoS for backbone: Mish activation, Cross-stage partial connections(CSP), Multi-input weighted residual connections</p><p>BoF for detector: CIoU-loss, CmBN, DropBlock regularization, Mosaic data augmentation, Self-Adversarial Training, Eliminate grid sensitivity, Using multiple anchors for a single ground truth, Cosine annealing scheduler, Optimal hyper-parameters, Random training shapes</p><p>BoS for detector: Mish activation, SPP-block, SAM-block, PAN path-aggregation block, DIoU-NMS</p></li></ul></li><li><p>Experiments</p><ul><li>Experimental setup</li><li>Influence of different features on Classifier training</li><li>Influence of different features on Detector training</li><li>Influence of different backbones and pre-trained weightings on Detector training</li><li>Influence of different mini-batch size on Detector training</li></ul></li><li><p>Results</p></li><li><p>Conclusions</p></li><li><p>Acknowledgements</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> object detection </category>
          
          <category> paper reading </category>
          
          <category> computer vision </category>
          
      </categories>
      
      
        <tags>
            
            <tag> object detection </tag>
            
            <tag> YOLOv4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础15(时间复杂度)</title>
      <link href="/2020/08/17/deepshare_python%E5%9F%BA%E7%A1%8015/"/>
      <url>/2020/08/17/deepshare_python%E5%9F%BA%E7%A1%8015/</url>
      
        <content type="html"><![CDATA[<h1 id="第十五章-再谈编程"><a href="#第十五章-再谈编程" class="headerlink" title="第十五章 再谈编程"></a>第十五章 再谈编程</h1><h2 id="15-1-Python之禅"><a href="#15-1-Python之禅" class="headerlink" title="15.1 Python之禅"></a>15.1 Python之禅</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> this</span><br></pre></td></tr></table></figure><pre><code>The Zen of Python, by Tim PetersBeautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren&#39;t special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one-- and preferably only one --obvious way to do it.Although that way may not be obvious at first unless you&#39;re Dutch.Now is better than never.Although never is often better than *right* now.If the implementation is hard to explain, it&#39;s a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea -- let&#39;s do more of those!</code></pre><ul><li>Beautiful is better than ugly</li></ul><p>整齐、易读胜过混乱、晦涩</p><ul><li>Simple is better than complex</li></ul><p>简约胜过复杂</p><ul><li>Complex is better than complicated</li></ul><p>复杂胜过晦涩</p><ul><li>Flat is better than nested</li></ul><p>扁平胜过嵌套</p><ul><li><p>Now is better than never.</p></li><li><p>Although never is often better than <em>right</em> now.</p></li></ul><p>理解一：先行动起来，编写行之有效的代码，不要企图一开始就编写完美无缺的代码</p><p>理解二：做比不做要好，但是盲目的不加思考的去做还不如不做</p><ul><li>If the implementation is hard to explain, it’s a bad idea.</li><li>If the implementation is easy to explain, it may be a good idea.</li></ul><p>如果方案很难解释，很可能不是有一个好的方案，反之亦然</p><p>【个人感悟】</p><p>1、首先要行动起来，编写行之有效的代码；</p><p>2、如果都能解决问题，选择更加简单的方案；</p><p>3、整齐、易读、可维护性、可扩展性好；</p><p>4、强壮、健壮、鲁棒性好；</p><p>5、响应速度快，占用空间少。</p><p><strong>有些时候，鱼和熊掌不可兼得，根据实际情况进行相应的取舍</strong></p><h2 id="15-2-时间复杂度分析"><a href="#15-2-时间复杂度分析" class="headerlink" title="15.2  时间复杂度分析"></a>15.2  时间复杂度分析</h2><p><strong>【1】代数分析</strong></p><p><strong>求最大值和排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.random.randint(<span class="number">100</span>, size=<span class="number">10</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([90, 20, 61, 40, 26, 24, 50, 91, 33,  6])</code></pre><ul><li><p>寻找最大值的时间复杂度为O(n)</p></li><li><p>选择排序时间复杂度O(n^2)</p></li></ul><p><strong>代数分析</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""常数函数"""</span></span><br><span class="line">    <span class="keyword">return</span> np.ones(len(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""对数函数"""</span></span><br><span class="line">    <span class="keyword">return</span> np.log(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">equal</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""线性函数"""</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">n_logn</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""nlogn函数"""</span></span><br><span class="line">    <span class="keyword">return</span> x*np.log(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""平方函数"""</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exponent</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""指数函数"""</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>**x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.style.use(<span class="string">"seaborn-whitegrid"</span>)</span><br><span class="line"></span><br><span class="line">t = np.linspace(<span class="number">1</span>, <span class="number">20</span>, <span class="number">100</span>)</span><br><span class="line">methods = [one, log, equal, n_logn, square, exponent]</span><br><span class="line">method_labels = [<span class="string">"$y = 1$"</span>, <span class="string">"$y = log(x)$"</span>, <span class="string">"$y = x$"</span>, <span class="string">"$y = xlog(x)$"</span>, <span class="string">"$y = x^2$"</span>, <span class="string">"$y = 2^x$"</span>]</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line"><span class="keyword">for</span> method, method_label <span class="keyword">in</span> zip(methods, method_labels):</span><br><span class="line">    plt.plot(t, method(t), label=method_label, lw=<span class="number">3</span>)</span><br><span class="line">plt.xlim(<span class="number">1</span>, <span class="number">20</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">40</span>)</span><br><span class="line">plt.legend()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.legend.Legend at 0x21b70922898&gt;</code></pre><p><strong>我们的最爱：常数函数和对数函数</strong></p><p><strong>勉强接受：线性函数和nlogn函数</strong></p><p><strong>难以承受：平方函数和指数函数</strong></p><p><strong>【2】三集不相交问题</strong></p><p>问题描述：<br>假设有A、B、C三个序列，任一序列内部没有重复元素，欲知晓三个序列交集是否为空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">creat_sequence</span><span class="params">(n)</span>:</span></span><br><span class="line">    A = random.sample(range(<span class="number">1</span>, <span class="number">1000</span>), k=n)</span><br><span class="line">    B = random.sample(range(<span class="number">1000</span>, <span class="number">2000</span>), k=n)</span><br><span class="line">    C = random.sample(range(<span class="number">2000</span>, <span class="number">3000</span>), k=n)</span><br><span class="line">    <span class="keyword">return</span> A, B, C</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">A, B, C = creat_sequence(<span class="number">100</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">no_intersection_1</span><span class="params">(A, B, C)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> A:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> B:</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> C:</span><br><span class="line">                <span class="keyword">if</span> a == b == c:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">%timeit no_intersection_1(A, B, C)</span><br><span class="line">no_intersection_1(A, B, C)</span><br></pre></td></tr></table></figure><pre><code>42.1 ms ± 1.57 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">no_intersection_2</span><span class="params">(A, B, C)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> A:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> B:</span><br><span class="line">            <span class="keyword">if</span> a == b:</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> C:</span><br><span class="line">                    <span class="keyword">if</span> a == c:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">%timeit no_intersection_2(A, B, C)</span><br></pre></td></tr></table></figure><pre><code>278 µs ± 8.72 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">res_n_3 = []</span><br><span class="line">res_n_2 = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">10</span>, <span class="number">20</span>, <span class="number">100</span>]:</span><br><span class="line">    A, B, C = creat_sequence(n)</span><br><span class="line">    start_1 = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        no_intersection_1(A, B, C)</span><br><span class="line">    end_1 = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        no_intersection_2(A, B, C)</span><br><span class="line">    end_2 = time.time()</span><br><span class="line">    res_n_3.append(str(round((end_1 - start_1)*<span class="number">1000</span>))+<span class="string">"ms"</span>)</span><br><span class="line">    res_n_2.append(str(round((end_2 - end_1)*<span class="number">1000</span>))+<span class="string">"ms"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&#123;0:&lt;23&#125;&#123;1:&lt;15&#125;&#123;2:&lt;15&#125;&#123;3:&lt;15&#125;"</span>.format(<span class="string">"方法"</span>, <span class="string">"n=10"</span>, <span class="string">"n=20"</span>, <span class="string">"n=100"</span>))</span><br><span class="line">print(<span class="string">"&#123;0:&lt;25&#125;&#123;1:&lt;15&#125;&#123;2:&lt;15&#125;&#123;3:&lt;15&#125;"</span>.format(<span class="string">"no_inte rsection_1"</span>, *res_n_3))</span><br><span class="line">print(<span class="string">"&#123;0:&lt;25&#125;&#123;1:&lt;15&#125;&#123;2:&lt;15&#125;&#123;3:&lt;15&#125;"</span>.format(<span class="string">"no_intersection_2"</span>, *res_n_2))</span><br></pre></td></tr></table></figure><pre><code>方法                     n=10           n=20           n=100          no_inte rsection_1       4ms            37ms           4196ms         no_intersection_2        1ms            1ms            28ms           </code></pre><p><strong>【3】元素唯一性问题</strong></p><p>问题描述：A 中的元素是否唯一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique_1</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(A)):</span><br><span class="line">            <span class="keyword">if</span> A[i] == A[j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique_2</span><span class="params">(A)</span>:</span></span><br><span class="line">    A_sort = sorted(A)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A_sort)<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> A[i] == A[i+<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">res_n_2 = []</span><br><span class="line">res_n_log_n = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">100</span>, <span class="number">1000</span>]:</span><br><span class="line">    A = list(range(n))</span><br><span class="line">    random.shuffle(A)</span><br><span class="line">    start_1 = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        unique_1(A)</span><br><span class="line">    end_1 = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        unique_2(A)</span><br><span class="line">    end_2 = time.time()</span><br><span class="line">    res_n_2.append(str(round((end_1 - start_1)*<span class="number">1000</span>))+<span class="string">"ms"</span>)</span><br><span class="line">    res_n_log_n.append(str(round((end_2 - end_1)*<span class="number">1000</span>))+<span class="string">"ms"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&#123;0:&lt;13&#125;&#123;1:&lt;15&#125;&#123;2:&lt;15&#125;"</span>.format(<span class="string">"方法"</span>, <span class="string">"n=100"</span>, <span class="string">"n=1000"</span>))</span><br><span class="line">print(<span class="string">"&#123;0:&lt;15&#125;&#123;1:&lt;15&#125;&#123;2:&lt;15&#125;"</span>.format(<span class="string">"unique_1"</span>, *res_n_2))</span><br><span class="line">print(<span class="string">"&#123;0:&lt;15&#125;&#123;1:&lt;15&#125;&#123;2:&lt;15&#125;"</span>.format(<span class="string">"unique_2"</span>, *res_n_log_n))</span><br></pre></td></tr></table></figure><pre><code>方法           n=100          n=1000         unique_1       40ms           3695ms         unique_2       1ms            28ms           </code></pre><p><strong>【4】第n个斐波那契数</strong></p><p>a(n+2) = a(n+1) + a(n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bad_fibonacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span>  bad_fibonacci(n<span class="number">-2</span>)+ bad_fibonacci(n<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p>O(2^n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">good_fibonacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    i, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><p>O(n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%timeit  bad_fibonacci(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><pre><code>22.6 µs ± 1.23 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%timeit good_fibonacci(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><pre><code>895 ns ± 17.2 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)</code></pre><p><strong>【5】最大盛水容器（leetcode第11题）</strong></p><p><strong>暴力求解——双循环</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_area_double_cycle</span><span class="params">(height)</span>:</span></span><br><span class="line">    <span class="string">"""暴力穷举双循环"""</span></span><br><span class="line">    i_left, i_right, max_area = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(height)<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(height)):</span><br><span class="line">            area = (j-i) * min(height[j], height[i])</span><br><span class="line">            <span class="keyword">if</span> area &gt; max_area:</span><br><span class="line">                i_left, i_right, max_area = i, j, area</span><br><span class="line">    <span class="keyword">return</span>  i_left, i_right, max_area</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">height = np.random.randint(<span class="number">1</span>, <span class="number">50</span>, size=<span class="number">10</span>)</span><br><span class="line">print(height)</span><br><span class="line">max_area_double_cycle(height)</span><br></pre></td></tr></table></figure><pre><code>[43 38 30 47 21 18 38 28 41 25](0, 8, 328)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.bar(range(<span class="number">10</span>), height, width=<span class="number">0.5</span>)</span><br><span class="line">plt.xticks(range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>([&lt;matplotlib.axis.XTick at 0x21b7213eb00&gt;,  &lt;matplotlib.axis.XTick at 0x21b7213e390&gt;,  &lt;matplotlib.axis.XTick at 0x21b7213e278&gt;,  &lt;matplotlib.axis.XTick at 0x21b7216b320&gt;,  &lt;matplotlib.axis.XTick at 0x21b7216b828&gt;,  &lt;matplotlib.axis.XTick at 0x21b7216bd68&gt;,  &lt;matplotlib.axis.XTick at 0x21b72171320&gt;,  &lt;matplotlib.axis.XTick at 0x21b72171828&gt;,  &lt;matplotlib.axis.XTick at 0x21b72171d68&gt;,  &lt;matplotlib.axis.XTick at 0x21b72178320&gt;], &lt;a list of 10 Text xticklabel objects&gt;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/63b97a6c8b122c6c6b3082c6f4d3acc6.png" alt="output_51_1"></p><p><strong>双向指针</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_area_bothway_points</span><span class="params">(height)</span>:</span></span><br><span class="line">    <span class="string">"""双向指针法"""</span></span><br><span class="line">    </span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = len(height)<span class="number">-1</span></span><br><span class="line">    i_left, j_right, max_area=<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        area = (j-i) * min(height[i], height[j])</span><br><span class="line">        <span class="keyword">if</span> area &gt; max_area:</span><br><span class="line">            i_left, j_right, max_area = i, j, area</span><br><span class="line">        <span class="keyword">if</span> height[i] == min(height[i], height[j]):</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> i_left, j_right, max_area</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max_area_bothway_points(height)</span><br></pre></td></tr></table></figure><pre><code>(0, 8, 328)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">double_cycle = []</span><br><span class="line">bothway_points = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">5</span>, <span class="number">50</span>, <span class="number">500</span>]:</span><br><span class="line">    height = np.random.randint(<span class="number">1</span>, <span class="number">50</span>, size=n)</span><br><span class="line">    start_1 = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        max_area_double_cycle(height)</span><br><span class="line">    end_1 = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        max_area_bothway_points(height)</span><br><span class="line">    end_2 = time.time()</span><br><span class="line">    double_cycle.append(str(round((end_1 - start_1)*<span class="number">1000</span>))+<span class="string">"ms"</span>)</span><br><span class="line">    bothway_points.append(str(round((end_2 - end_1)*<span class="number">1000</span>))+<span class="string">"ms"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"&#123;0:&lt;15&#125;&#123;1:&lt;15&#125;&#123;2:&lt;15&#125;&#123;3:&lt;15&#125;"</span>.format(<span class="string">"方法"</span>, <span class="string">"n=5"</span>, <span class="string">"n=50"</span>, <span class="string">"n=500"</span>))</span><br><span class="line">print(<span class="string">"&#123;0:&lt;13&#125;&#123;1:&lt;15&#125;&#123;2:&lt;15&#125;&#123;3:&lt;15&#125;"</span>.format(<span class="string">"暴力循环"</span>, *double_cycle))</span><br><span class="line">print(<span class="string">"&#123;0:&lt;13&#125;&#123;1:&lt;15&#125;&#123;2:&lt;15&#125;&#123;3:&lt;15&#125;"</span>.format(<span class="string">"双向指针"</span>, *bothway_points))</span><br></pre></td></tr></table></figure><pre><code>方法             n=5            n=50           n=500          暴力循环         1ms            77ms           7615ms         双向指针         1ms            6ms            60ms           </code></pre><p>【6】是不是时间复杂度低就一定好?</p><p>100000n  VS   0.00001n^2</p><p>【7】影响运算速度的因素</p><ul><li><p>硬件</p></li><li><p>软件</p></li><li><p>算法</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础14(scikit-learn库)</title>
      <link href="/2020/08/17/deepshare_python%E5%9F%BA%E7%A1%8014/"/>
      <url>/2020/08/17/deepshare_python%E5%9F%BA%E7%A1%8014/</url>
      
        <content type="html"><![CDATA[<h1 id="第十四章-scikit-learn-库"><a href="#第十四章-scikit-learn-库" class="headerlink" title="第十四章 scikit-learn 库"></a>第十四章 scikit-learn 库</h1><p><strong>scikit-learn 库是当今最流行的机器学习算法库之一</strong></p><p><strong>可用来解决分类与回归问题</strong></p><p><strong>本章以鸢尾花数据集为例，简单了解八大传统机器学习分类算法的sk-learn实现</strong></p><p><strong>欲深入了解传统机器算法的原理和公式推导，请继续学习《统计学习方法》或《西瓜书》</strong></p><h2 id="14-0-鸢尾花数据集"><a href="#14-0-鸢尾花数据集" class="headerlink" title="14.0 鸢尾花数据集"></a>14.0 鸢尾花数据集</h2><p>【1】下载数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iris = sns.load_dataset(<span class="string">"iris"</span>)</span><br></pre></td></tr></table></figure><p>【2】数据集的查看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type(iris)</span><br></pre></td></tr></table></figure><pre><code>pandas.core.frame.DataFrame</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iris.shape</span><br></pre></td></tr></table></figure><pre><code>(150, 5)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iris.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>sepal_length</th>      <th>sepal_width</th>      <th>petal_length</th>      <th>petal_width</th>      <th>species</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>5.1</td>      <td>3.5</td>      <td>1.4</td>      <td>0.2</td>      <td>setosa</td>    </tr>    <tr>      <th>1</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>      <td>setosa</td>    </tr>    <tr>      <th>2</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>      <td>setosa</td>    </tr>    <tr>      <th>3</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>      <td>setosa</td>    </tr>    <tr>      <th>4</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>      <td>setosa</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iris.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 150 entries, 0 to 149Data columns (total 5 columns):sepal_length    150 non-null float64sepal_width     150 non-null float64petal_length    150 non-null float64petal_width     150 non-null float64species         150 non-null objectdtypes: float64(4), object(1)memory usage: 5.9+ KB</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iris.describe()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>sepal_length</th>      <th>sepal_width</th>      <th>petal_length</th>      <th>petal_width</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>150.000000</td>      <td>150.000000</td>      <td>150.000000</td>      <td>150.000000</td>    </tr>    <tr>      <th>mean</th>      <td>5.843333</td>      <td>3.057333</td>      <td>3.758000</td>      <td>1.199333</td>    </tr>    <tr>      <th>std</th>      <td>0.828066</td>      <td>0.435866</td>      <td>1.765298</td>      <td>0.762238</td>    </tr>    <tr>      <th>min</th>      <td>4.300000</td>      <td>2.000000</td>      <td>1.000000</td>      <td>0.100000</td>    </tr>    <tr>      <th>25%</th>      <td>5.100000</td>      <td>2.800000</td>      <td>1.600000</td>      <td>0.300000</td>    </tr>    <tr>      <th>50%</th>      <td>5.800000</td>      <td>3.000000</td>      <td>4.350000</td>      <td>1.300000</td>    </tr>    <tr>      <th>75%</th>      <td>6.400000</td>      <td>3.300000</td>      <td>5.100000</td>      <td>1.800000</td>    </tr>    <tr>      <th>max</th>      <td>7.900000</td>      <td>4.400000</td>      <td>6.900000</td>      <td>2.500000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iris.species.value_counts()</span><br></pre></td></tr></table></figure><pre><code>virginica     50setosa        50versicolor    50Name: species, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.pairplot(data=iris, hue=<span class="string">"species"</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.PairGrid at 0x1e2ab9dacf8&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/1a25a382c3fb7f2378efc733ac1acf0b.png" alt="output_16_1"></p><p>【3】数据清洗</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iris_simple = iris.drop([<span class="string">"sepal_length"</span>, <span class="string">"sepal_width"</span>], axis=<span class="number">1</span>)</span><br><span class="line">iris_simple.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>petal_length</th>      <th>petal_width</th>      <th>species</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.4</td>      <td>0.2</td>      <td>setosa</td>    </tr>    <tr>      <th>1</th>      <td>1.4</td>      <td>0.2</td>      <td>setosa</td>    </tr>    <tr>      <th>2</th>      <td>1.3</td>      <td>0.2</td>      <td>setosa</td>    </tr>    <tr>      <th>3</th>      <td>1.5</td>      <td>0.2</td>      <td>setosa</td>    </tr>    <tr>      <th>4</th>      <td>1.4</td>      <td>0.2</td>      <td>setosa</td>    </tr>  </tbody></table></div><p>【4】标签编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelEncoder</span><br><span class="line"></span><br><span class="line">encoder = LabelEncoder()</span><br><span class="line">iris_simple[<span class="string">"species"</span>] = encoder.fit_transform(iris_simple[<span class="string">"species"</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iris_simple</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>petal_length</th>      <th>petal_width</th>      <th>species</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>1.3</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>1.5</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>1.7</td>      <td>0.4</td>      <td>0</td>    </tr>    <tr>      <th>6</th>      <td>1.4</td>      <td>0.3</td>      <td>0</td>    </tr>    <tr>      <th>7</th>      <td>1.5</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>8</th>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>9</th>      <td>1.5</td>      <td>0.1</td>      <td>0</td>    </tr>    <tr>      <th>10</th>      <td>1.5</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>11</th>      <td>1.6</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>12</th>      <td>1.4</td>      <td>0.1</td>      <td>0</td>    </tr>    <tr>      <th>13</th>      <td>1.1</td>      <td>0.1</td>      <td>0</td>    </tr>    <tr>      <th>14</th>      <td>1.2</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>15</th>      <td>1.5</td>      <td>0.4</td>      <td>0</td>    </tr>    <tr>      <th>16</th>      <td>1.3</td>      <td>0.4</td>      <td>0</td>    </tr>    <tr>      <th>17</th>      <td>1.4</td>      <td>0.3</td>      <td>0</td>    </tr>    <tr>      <th>18</th>      <td>1.7</td>      <td>0.3</td>      <td>0</td>    </tr>    <tr>      <th>19</th>      <td>1.5</td>      <td>0.3</td>      <td>0</td>    </tr>    <tr>      <th>20</th>      <td>1.7</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>21</th>      <td>1.5</td>      <td>0.4</td>      <td>0</td>    </tr>    <tr>      <th>22</th>      <td>1.0</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>23</th>      <td>1.7</td>      <td>0.5</td>      <td>0</td>    </tr>    <tr>      <th>24</th>      <td>1.9</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>25</th>      <td>1.6</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>26</th>      <td>1.6</td>      <td>0.4</td>      <td>0</td>    </tr>    <tr>      <th>27</th>      <td>1.5</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>28</th>      <td>1.4</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>29</th>      <td>1.6</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>120</th>      <td>5.7</td>      <td>2.3</td>      <td>2</td>    </tr>    <tr>      <th>121</th>      <td>4.9</td>      <td>2.0</td>      <td>2</td>    </tr>    <tr>      <th>122</th>      <td>6.7</td>      <td>2.0</td>      <td>2</td>    </tr>    <tr>      <th>123</th>      <td>4.9</td>      <td>1.8</td>      <td>2</td>    </tr>    <tr>      <th>124</th>      <td>5.7</td>      <td>2.1</td>      <td>2</td>    </tr>    <tr>      <th>125</th>      <td>6.0</td>      <td>1.8</td>      <td>2</td>    </tr>    <tr>      <th>126</th>      <td>4.8</td>      <td>1.8</td>      <td>2</td>    </tr>    <tr>      <th>127</th>      <td>4.9</td>      <td>1.8</td>      <td>2</td>    </tr>    <tr>      <th>128</th>      <td>5.6</td>      <td>2.1</td>      <td>2</td>    </tr>    <tr>      <th>129</th>      <td>5.8</td>      <td>1.6</td>      <td>2</td>    </tr>    <tr>      <th>130</th>      <td>6.1</td>      <td>1.9</td>      <td>2</td>    </tr>    <tr>      <th>131</th>      <td>6.4</td>      <td>2.0</td>      <td>2</td>    </tr>    <tr>      <th>132</th>      <td>5.6</td>      <td>2.2</td>      <td>2</td>    </tr>    <tr>      <th>133</th>      <td>5.1</td>      <td>1.5</td>      <td>2</td>    </tr>    <tr>      <th>134</th>      <td>5.6</td>      <td>1.4</td>      <td>2</td>    </tr>    <tr>      <th>135</th>      <td>6.1</td>      <td>2.3</td>      <td>2</td>    </tr>    <tr>      <th>136</th>      <td>5.6</td>      <td>2.4</td>      <td>2</td>    </tr>    <tr>      <th>137</th>      <td>5.5</td>      <td>1.8</td>      <td>2</td>    </tr>    <tr>      <th>138</th>      <td>4.8</td>      <td>1.8</td>      <td>2</td>    </tr>    <tr>      <th>139</th>      <td>5.4</td>      <td>2.1</td>      <td>2</td>    </tr>    <tr>      <th>140</th>      <td>5.6</td>      <td>2.4</td>      <td>2</td>    </tr>    <tr>      <th>141</th>      <td>5.1</td>      <td>2.3</td>      <td>2</td>    </tr>    <tr>      <th>142</th>      <td>5.1</td>      <td>1.9</td>      <td>2</td>    </tr>    <tr>      <th>143</th>      <td>5.9</td>      <td>2.3</td>      <td>2</td>    </tr>    <tr>      <th>144</th>      <td>5.7</td>      <td>2.5</td>      <td>2</td>    </tr>    <tr>      <th>145</th>      <td>5.2</td>      <td>2.3</td>      <td>2</td>    </tr>    <tr>      <th>146</th>      <td>5.0</td>      <td>1.9</td>      <td>2</td>    </tr>    <tr>      <th>147</th>      <td>5.2</td>      <td>2.0</td>      <td>2</td>    </tr>    <tr>      <th>148</th>      <td>5.4</td>      <td>2.3</td>      <td>2</td>    </tr>    <tr>      <th>149</th>      <td>5.1</td>      <td>1.8</td>      <td>2</td>    </tr>  </tbody></table><p>150 rows × 3 columns</p></div><p>【5】数据集的标准化（本数据集特征比较接近，实际处理过程中未标准化）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">trans = StandardScaler()</span><br><span class="line">_iris_simple = trans.fit_transform(iris_simple[[<span class="string">"petal_length"</span>, <span class="string">"petal_width"</span>]])</span><br><span class="line"><span class="comment">#_iris_simple.describe()</span></span><br><span class="line">_iris_simple = pd.DataFrame(_iris_simple, columns = [<span class="string">"petal_length"</span>, <span class="string">"petal_width"</span>])</span><br><span class="line">_iris_simple.describe()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>petal_length</th>      <th>petal_width</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>1.500000e+02</td>      <td>1.500000e+02</td>    </tr>    <tr>      <th>mean</th>      <td>-8.652338e-16</td>      <td>-4.662937e-16</td>    </tr>    <tr>      <th>std</th>      <td>1.003350e+00</td>      <td>1.003350e+00</td>    </tr>    <tr>      <th>min</th>      <td>-1.567576e+00</td>      <td>-1.447076e+00</td>    </tr>    <tr>      <th>25%</th>      <td>-1.226552e+00</td>      <td>-1.183812e+00</td>    </tr>    <tr>      <th>50%</th>      <td>3.364776e-01</td>      <td>1.325097e-01</td>    </tr>    <tr>      <th>75%</th>      <td>7.627583e-01</td>      <td>7.906707e-01</td>    </tr>    <tr>      <th>max</th>      <td>1.785832e+00</td>      <td>1.712096e+00</td>    </tr>  </tbody></table></div><p>【6】构建训练集和测试集（本课暂不考虑验证集）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">train_set, test_set = train_test_split(iris_simple, test_size=<span class="number">0.2</span>)</span><br><span class="line">test_set.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>petal_length</th>      <th>petal_width</th>      <th>species</th>    </tr>  </thead>  <tbody>    <tr>      <th>52</th>      <td>4.9</td>      <td>1.5</td>      <td>1</td>    </tr>    <tr>      <th>10</th>      <td>1.5</td>      <td>0.2</td>      <td>0</td>    </tr>    <tr>      <th>114</th>      <td>5.1</td>      <td>2.4</td>      <td>2</td>    </tr>    <tr>      <th>70</th>      <td>4.8</td>      <td>1.8</td>      <td>1</td>    </tr>    <tr>      <th>5</th>      <td>1.7</td>      <td>0.4</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iris_x_train = train_set[[<span class="string">"petal_length"</span>, <span class="string">"petal_width"</span>]]</span><br><span class="line">iris_x_train.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>petal_length</th>      <th>petal_width</th>    </tr>  </thead>  <tbody>    <tr>      <th>61</th>      <td>4.2</td>      <td>1.5</td>    </tr>    <tr>      <th>109</th>      <td>6.1</td>      <td>2.5</td>    </tr>    <tr>      <th>89</th>      <td>4.0</td>      <td>1.3</td>    </tr>    <tr>      <th>51</th>      <td>4.5</td>      <td>1.5</td>    </tr>    <tr>      <th>97</th>      <td>4.3</td>      <td>1.3</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iris_y_train = train_set[<span class="string">"species"</span>].copy()</span><br><span class="line">iris_y_train.head()</span><br></pre></td></tr></table></figure><pre><code>61     1109    289     151     197     1Name: species, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iris_x_test = test_set[[<span class="string">"petal_length"</span>, <span class="string">"petal_width"</span>]]</span><br><span class="line">iris_x_test.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>petal_length</th>      <th>petal_width</th>    </tr>  </thead>  <tbody>    <tr>      <th>52</th>      <td>4.9</td>      <td>1.5</td>    </tr>    <tr>      <th>10</th>      <td>1.5</td>      <td>0.2</td>    </tr>    <tr>      <th>114</th>      <td>5.1</td>      <td>2.4</td>    </tr>    <tr>      <th>70</th>      <td>4.8</td>      <td>1.8</td>    </tr>    <tr>      <th>5</th>      <td>1.7</td>      <td>0.4</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iris_y_test = test_set[<span class="string">"species"</span>].copy()</span><br><span class="line">iris_y_test.head()</span><br></pre></td></tr></table></figure><pre><code>52     110     0114    270     15      0Name: species, dtype: int64</code></pre><h2 id="14-1-k近邻算法"><a href="#14-1-k近邻算法" class="headerlink" title="14.1 k近邻算法"></a>14.1 k近邻算法</h2><p>【1】基本思想</p><p>与待预测点最近的训练数据集中的k个邻居  </p><p>把k个近邻中最常见的类别预测为带预测点的类别</p><p>【2】sklearn实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br></pre></td></tr></table></figure><ul><li>构建分类器对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clf = KNeighborsClassifier()</span><br><span class="line">clf</span><br></pre></td></tr></table></figure><pre><code>KNeighborsClassifier(algorithm=&#39;auto&#39;, leaf_size=30, metric=&#39;minkowski&#39;,           metric_params=None, n_jobs=1, n_neighbors=5, p=2,           weights=&#39;uniform&#39;)</code></pre><ul><li>训练</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clf.fit(iris_x_train, iris_y_train)</span><br></pre></td></tr></table></figure><pre><code>KNeighborsClassifier(algorithm=&#39;auto&#39;, leaf_size=30, metric=&#39;minkowski&#39;,           metric_params=None, n_jobs=1, n_neighbors=5, p=2,           weights=&#39;uniform&#39;)</code></pre><ul><li>预测</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = clf.predict(iris_x_test)</span><br><span class="line">print(res)</span><br><span class="line">print(iris_y_test.values)</span><br></pre></td></tr></table></figure><pre><code>[1 0 2 2 0 0 2 0 0 2 0 0 1 1 2 0 1 0 0 0 0 2 2 1 1 2 1 0 2 0][1 0 2 1 0 0 2 0 0 2 0 0 1 1 2 0 1 0 0 0 0 2 2 1 1 2 1 0 2 0]</code></pre><ul><li>翻转</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">encoder.inverse_transform(res)</span><br></pre></td></tr></table></figure><pre><code>D:\python\Anaconda3\lib\site-packages\sklearn\preprocessing\label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size &gt; 0` to check that an array is not empty.  if diff:array([&#39;versicolor&#39;, &#39;setosa&#39;, &#39;virginica&#39;, &#39;virginica&#39;, &#39;setosa&#39;,       &#39;setosa&#39;, &#39;virginica&#39;, &#39;setosa&#39;, &#39;setosa&#39;, &#39;virginica&#39;, &#39;setosa&#39;,       &#39;setosa&#39;, &#39;versicolor&#39;, &#39;versicolor&#39;, &#39;virginica&#39;, &#39;setosa&#39;,       &#39;versicolor&#39;, &#39;setosa&#39;, &#39;setosa&#39;, &#39;setosa&#39;, &#39;setosa&#39;, &#39;virginica&#39;,       &#39;virginica&#39;, &#39;versicolor&#39;, &#39;versicolor&#39;, &#39;virginica&#39;, &#39;versicolor&#39;,       &#39;setosa&#39;, &#39;virginica&#39;, &#39;setosa&#39;], dtype=object)</code></pre><ul><li>评估</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accuracy = clf.score(iris_x_test, iris_y_test)</span><br><span class="line">print(<span class="string">"预测正确率:&#123;:.0%&#125;"</span>.format(accuracy))</span><br></pre></td></tr></table></figure><pre><code>预测正确率:97%</code></pre><ul><li>存储数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">out = iris_x_test.copy()</span><br><span class="line">out[<span class="string">"y"</span>] = iris_y_test</span><br><span class="line">out[<span class="string">"pre"</span>] = res</span><br><span class="line">out</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>petal_length</th>      <th>petal_width</th>      <th>y</th>      <th>pre</th>    </tr>  </thead>  <tbody>    <tr>      <th>52</th>      <td>4.9</td>      <td>1.5</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>10</th>      <td>1.5</td>      <td>0.2</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>114</th>      <td>5.1</td>      <td>2.4</td>      <td>2</td>      <td>2</td>    </tr>    <tr>      <th>70</th>      <td>4.8</td>      <td>1.8</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>5</th>      <td>1.7</td>      <td>0.4</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>40</th>      <td>1.3</td>      <td>0.3</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>107</th>      <td>6.3</td>      <td>1.8</td>      <td>2</td>      <td>2</td>    </tr>    <tr>      <th>33</th>      <td>1.4</td>      <td>0.2</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>37</th>      <td>1.4</td>      <td>0.1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>137</th>      <td>5.5</td>      <td>1.8</td>      <td>2</td>      <td>2</td>    </tr>    <tr>      <th>15</th>      <td>1.5</td>      <td>0.4</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>20</th>      <td>1.7</td>      <td>0.2</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>93</th>      <td>3.3</td>      <td>1.0</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>69</th>      <td>3.9</td>      <td>1.1</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>129</th>      <td>5.8</td>      <td>1.6</td>      <td>2</td>      <td>2</td>    </tr>    <tr>      <th>48</th>      <td>1.5</td>      <td>0.2</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>87</th>      <td>4.4</td>      <td>1.3</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>1.4</td>      <td>0.2</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>30</th>      <td>1.6</td>      <td>0.2</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>9</th>      <td>1.5</td>      <td>0.1</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>25</th>      <td>1.6</td>      <td>0.2</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>143</th>      <td>5.9</td>      <td>2.3</td>      <td>2</td>      <td>2</td>    </tr>    <tr>      <th>128</th>      <td>5.6</td>      <td>2.1</td>      <td>2</td>      <td>2</td>    </tr>    <tr>      <th>74</th>      <td>4.3</td>      <td>1.3</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>98</th>      <td>3.0</td>      <td>1.1</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>118</th>      <td>6.9</td>      <td>2.3</td>      <td>2</td>      <td>2</td>    </tr>    <tr>      <th>65</th>      <td>4.4</td>      <td>1.4</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>46</th>      <td>1.6</td>      <td>0.2</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>147</th>      <td>5.2</td>      <td>2.0</td>      <td>2</td>      <td>2</td>    </tr>    <tr>      <th>34</th>      <td>1.5</td>      <td>0.2</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out.to_csv(<span class="string">"iris_predict.csv"</span>)</span><br></pre></td></tr></table></figure><p>【3】可视化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">(clf)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 网格化</span></span><br><span class="line">    M, N = <span class="number">500</span>, <span class="number">500</span></span><br><span class="line">    x1_min, x2_min = iris_simple[[<span class="string">"petal_length"</span>, <span class="string">"petal_width"</span>]].min(axis=<span class="number">0</span>)</span><br><span class="line">    x1_max, x2_max = iris_simple[[<span class="string">"petal_length"</span>, <span class="string">"petal_width"</span>]].max(axis=<span class="number">0</span>)</span><br><span class="line">    t1 = np.linspace(x1_min, x1_max, M)</span><br><span class="line">    t2 = np.linspace(x2_min, x2_max, N)</span><br><span class="line">    x1, x2 = np.meshgrid(t1, t2)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    x_show = np.stack((x1.flat, x2.flat), axis=<span class="number">1</span>)</span><br><span class="line">    y_predict = clf.predict(x_show)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 配色</span></span><br><span class="line">    cm_light = mpl.colors.ListedColormap([<span class="string">"#A0FFA0"</span>, <span class="string">"#FFA0A0"</span>, <span class="string">"#A0A0FF"</span>])</span><br><span class="line">    cm_dark = mpl.colors.ListedColormap([<span class="string">"g"</span>, <span class="string">"r"</span>, <span class="string">"b"</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制预测区域图</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">    plt.pcolormesh(t1, t2, y_predict.reshape(x1.shape), cmap=cm_light)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制原始数据点</span></span><br><span class="line">    plt.scatter(iris_simple[<span class="string">"petal_length"</span>], iris_simple[<span class="string">"petal_width"</span>], label=<span class="literal">None</span>,</span><br><span class="line">                c=iris_simple[<span class="string">"species"</span>], cmap=cm_dark, marker=<span class="string">'o'</span>, edgecolors=<span class="string">'k'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">"petal_length"</span>)</span><br><span class="line">    plt.ylabel(<span class="string">"petal_width"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制图例</span></span><br><span class="line">    color = [<span class="string">"g"</span>, <span class="string">"r"</span>, <span class="string">"b"</span>]</span><br><span class="line">    species = [<span class="string">"setosa"</span>, <span class="string">"virginica"</span>, <span class="string">"versicolor"</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        plt.scatter([], [], c=color[i], s=<span class="number">40</span>, label=species[i])    <span class="comment"># 利用空点绘制图例</span></span><br><span class="line">    plt.legend(loc=<span class="string">"best"</span>)</span><br><span class="line">    plt.title(<span class="string">'iris_classfier'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">draw(clf)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/799e3fa4bdd105bb8889120ce3b5bd6a.png" alt="output_51_0"></p><h2 id="14-2-朴素贝叶斯算法"><a href="#14-2-朴素贝叶斯算法" class="headerlink" title="14.2 朴素贝叶斯算法"></a>14.2 朴素贝叶斯算法</h2><p>【1】基本思想</p><p>当X=(x1, x2)发生的时候，哪一个yk发生的概率最大</p><p>【2】sklearn实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</span><br></pre></td></tr></table></figure><ul><li>构建分类器对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clf = GaussianNB()</span><br><span class="line">clf</span><br></pre></td></tr></table></figure><pre><code>GaussianNB(priors=None)</code></pre><ul><li>训练</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clf.fit(iris_x_train, iris_y_train)</span><br></pre></td></tr></table></figure><pre><code>GaussianNB(priors=None)</code></pre><ul><li>预测</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = clf.predict(iris_x_test)</span><br><span class="line">print(res)</span><br><span class="line">print(iris_y_test.values)</span><br></pre></td></tr></table></figure><pre><code>[1 0 2 2 0 0 2 0 0 2 0 0 1 1 2 0 1 0 0 0 0 2 2 1 1 2 1 0 2 0][1 0 2 1 0 0 2 0 0 2 0 0 1 1 2 0 1 0 0 0 0 2 2 1 1 2 1 0 2 0]</code></pre><ul><li>评估</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accuracy = clf.score(iris_x_test, iris_y_test)</span><br><span class="line">print(<span class="string">"预测正确率:&#123;:.0%&#125;"</span>.format(accuracy))</span><br></pre></td></tr></table></figure><pre><code>预测正确率:97%</code></pre><ul><li>可视化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">draw(clf)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/60bb7c1cd214a4177e4d3bda9f2af1ed.png" alt="output_66_0"></p><h2 id="14-3-决策树算法"><a href="#14-3-决策树算法" class="headerlink" title="14.3 决策树算法"></a>14.3 决策树算法</h2><p>【1】基本思想</p><p>CART算法：每次通过一个特征，将数据尽可能的分为纯净的两类，递归的分下去</p><p>【2】sklearn实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br></pre></td></tr></table></figure><ul><li>构建分类器对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clf = DecisionTreeClassifier()</span><br><span class="line">clf</span><br></pre></td></tr></table></figure><pre><code>DecisionTreeClassifier(class_weight=None, criterion=&#39;gini&#39;, max_depth=None,            max_features=None, max_leaf_nodes=None,            min_impurity_decrease=0.0, min_impurity_split=None,            min_samples_leaf=1, min_samples_split=2,            min_weight_fraction_leaf=0.0, presort=False, random_state=None,            splitter=&#39;best&#39;)</code></pre><ul><li>训练</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clf.fit(iris_x_train, iris_y_train)</span><br></pre></td></tr></table></figure><pre><code>DecisionTreeClassifier(class_weight=None, criterion=&#39;gini&#39;, max_depth=None,            max_features=None, max_leaf_nodes=None,            min_impurity_decrease=0.0, min_impurity_split=None,            min_samples_leaf=1, min_samples_split=2,            min_weight_fraction_leaf=0.0, presort=False, random_state=None,            splitter=&#39;best&#39;)</code></pre><ul><li>预测</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = clf.predict(iris_x_test)</span><br><span class="line">print(res)</span><br><span class="line">print(iris_y_test.values)</span><br></pre></td></tr></table></figure><pre><code>[1 0 2 2 0 0 2 0 0 2 0 0 1 1 1 0 1 0 0 0 0 2 2 1 1 2 1 0 2 0][1 0 2 1 0 0 2 0 0 2 0 0 1 1 2 0 1 0 0 0 0 2 2 1 1 2 1 0 2 0]</code></pre><ul><li>评估</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accuracy = clf.score(iris_x_test, iris_y_test)</span><br><span class="line">print(<span class="string">"预测正确率:&#123;:.0%&#125;"</span>.format(accuracy))</span><br></pre></td></tr></table></figure><pre><code>预测正确率:93%</code></pre><ul><li>可视化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">draw(clf)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/89d38c527d0efdf1b8b7a44bb001030a.png" alt="output_81_0"></p><h2 id="14-4-逻辑回归算法"><a href="#14-4-逻辑回归算法" class="headerlink" title="14.4 逻辑回归算法"></a>14.4 逻辑回归算法</h2><p>【1】基本思想</p><p>一种解释：</p><p>训练：通过一个映射方式，将特征X=（x1, x2） 映射成 P(y=ck), 求使得所有概率之积最大化的映射方式里的参数</p><p>预测：计算p(y=ck) 取概率最大的那个类别作为预测对象的分类</p><p>【2】sklearn实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br></pre></td></tr></table></figure><ul><li>构建分类器对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clf = LogisticRegression(solver=<span class="string">'saga'</span>, max_iter=<span class="number">1000</span>)</span><br><span class="line">clf</span><br></pre></td></tr></table></figure><pre><code>LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,          intercept_scaling=1, max_iter=1000, multi_class=&#39;ovr&#39;, n_jobs=1,          penalty=&#39;l2&#39;, random_state=None, solver=&#39;saga&#39;, tol=0.0001,          verbose=0, warm_start=False)</code></pre><ul><li>训练</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clf.fit(iris_x_train, iris_y_train)</span><br></pre></td></tr></table></figure><pre><code>LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,          intercept_scaling=1, max_iter=1000, multi_class=&#39;ovr&#39;, n_jobs=1,          penalty=&#39;l2&#39;, random_state=None, solver=&#39;saga&#39;, tol=0.0001,          verbose=0, warm_start=False)</code></pre><ul><li>预测</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = clf.predict(iris_x_test)</span><br><span class="line">print(res)</span><br><span class="line">print(iris_y_test.values)</span><br></pre></td></tr></table></figure><pre><code>[1 0 2 2 0 0 2 0 0 2 0 0 1 1 2 0 1 0 0 0 0 2 2 1 0 2 1 0 2 0][1 0 2 1 0 0 2 0 0 2 0 0 1 1 2 0 1 0 0 0 0 2 2 1 1 2 1 0 2 0]</code></pre><ul><li>评估</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accuracy = clf.score(iris_x_test, iris_y_test)</span><br><span class="line">print(<span class="string">"预测正确率:&#123;:.0%&#125;"</span>.format(accuracy))</span><br></pre></td></tr></table></figure><pre><code>预测正确率:93%</code></pre><ul><li>可视化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">draw(clf)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/c31d261220943175f7c65ad36a30ea3f.png" alt="output_96_0"></p><h2 id="14-5-支持向量机算法"><a href="#14-5-支持向量机算法" class="headerlink" title="14.5 支持向量机算法"></a>14.5 支持向量机算法</h2><p>【1】基本思想</p><p>以二分类为例，假设数据可以完全分开：</p><p>用一个超平面将两类数据完全分开，且最近点到平面的距离最大</p><p>【2】sklearn实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br></pre></td></tr></table></figure><ul><li>构建分类器对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clf = SVC()</span><br><span class="line">clf</span><br></pre></td></tr></table></figure><pre><code>SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,  decision_function_shape=&#39;ovr&#39;, degree=3, gamma=&#39;auto&#39;, kernel=&#39;rbf&#39;,  max_iter=-1, probability=False, random_state=None, shrinking=True,  tol=0.001, verbose=False)</code></pre><ul><li>训练</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clf.fit(iris_x_train, iris_y_train)</span><br></pre></td></tr></table></figure><pre><code>SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,  decision_function_shape=&#39;ovr&#39;, degree=3, gamma=&#39;auto&#39;, kernel=&#39;rbf&#39;,  max_iter=-1, probability=False, random_state=None, shrinking=True,  tol=0.001, verbose=False)</code></pre><ul><li>预测</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = clf.predict(iris_x_test)</span><br><span class="line">print(res)</span><br><span class="line">print(iris_y_test.values)</span><br></pre></td></tr></table></figure><pre><code>[1 0 2 2 0 0 2 0 0 2 0 0 1 1 2 0 1 0 0 0 0 2 2 1 1 2 1 0 2 0][1 0 2 1 0 0 2 0 0 2 0 0 1 1 2 0 1 0 0 0 0 2 2 1 1 2 1 0 2 0]</code></pre><ul><li>评估</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accuracy = clf.score(iris_x_test, iris_y_test)</span><br><span class="line">print(<span class="string">"预测正确率:&#123;:.0%&#125;"</span>.format(accuracy))</span><br></pre></td></tr></table></figure><pre><code>预测正确率:97%</code></pre><ul><li>可视化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">draw(clf)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/3572362c7fac2b1ecd80fc9fd1496da7.png" alt="output_111_0"></p><h2 id="14-7-集成方法——随机森林"><a href="#14-7-集成方法——随机森林" class="headerlink" title="14.7 集成方法——随机森林"></a>14.7 集成方法——随机森林</h2><p>【1】基本思想</p><p>训练集m，有放回的随机抽取m个数据，构成一组，共抽取n组采样集</p><p>n组采样集训练得到n个弱分类器   弱分类器一般用决策树或神经网络</p><p>将n个弱分类器进行组合得到强分类器</p><p>【2】sklearn实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br></pre></td></tr></table></figure><ul><li>构建分类器对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clf = RandomForestClassifier()</span><br><span class="line">clf</span><br></pre></td></tr></table></figure><pre><code>RandomForestClassifier(bootstrap=True, class_weight=None, criterion=&#39;gini&#39;,            max_depth=None, max_features=&#39;auto&#39;, max_leaf_nodes=None,            min_impurity_decrease=0.0, min_impurity_split=None,            min_samples_leaf=1, min_samples_split=2,            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,            oob_score=False, random_state=None, verbose=0,            warm_start=False)</code></pre><ul><li>训练</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clf.fit(iris_x_train, iris_y_train)</span><br></pre></td></tr></table></figure><pre><code>RandomForestClassifier(bootstrap=True, class_weight=None, criterion=&#39;gini&#39;,            max_depth=None, max_features=&#39;auto&#39;, max_leaf_nodes=None,            min_impurity_decrease=0.0, min_impurity_split=None,            min_samples_leaf=1, min_samples_split=2,            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,            oob_score=False, random_state=None, verbose=0,            warm_start=False)</code></pre><ul><li>预测</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = clf.predict(iris_x_test)</span><br><span class="line">print(res)</span><br><span class="line">print(iris_y_test.values)</span><br></pre></td></tr></table></figure><pre><code>[1 0 2 2 0 0 2 0 0 2 0 0 1 1 1 0 1 0 0 0 0 2 2 1 1 2 1 0 2 0][1 0 2 1 0 0 2 0 0 2 0 0 1 1 2 0 1 0 0 0 0 2 2 1 1 2 1 0 2 0]</code></pre><ul><li>评估</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accuracy = clf.score(iris_x_test, iris_y_test)</span><br><span class="line">print(<span class="string">"预测正确率:&#123;:.0%&#125;"</span>.format(accuracy))</span><br></pre></td></tr></table></figure><pre><code>预测正确率:93%</code></pre><ul><li>可视化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">draw(clf)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/696f727bf9e2081d5430c7aecfaf92d2.png" alt="output_126_0"></p><h2 id="14-7-集成方法——Adaboost"><a href="#14-7-集成方法——Adaboost" class="headerlink" title="14.7 集成方法——Adaboost"></a>14.7 集成方法——Adaboost</h2><p>【1】基本思想</p><p>训练集m，用初始数据权重训练得到第一个弱分类器，根据误差率计算弱分类器系数，更新数据的权重</p><p>使用新的权重训练得到第二个弱分类器，以此类推</p><p>根据各自系数，将所有弱分类器加权求和获得强分类器</p><p>【2】sklearn实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> AdaBoostClassifier</span><br></pre></td></tr></table></figure><ul><li>构建分类器对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clf = AdaBoostClassifier()</span><br><span class="line">clf</span><br></pre></td></tr></table></figure><pre><code>AdaBoostClassifier(algorithm=&#39;SAMME.R&#39;, base_estimator=None,          learning_rate=1.0, n_estimators=50, random_state=None)</code></pre><ul><li>训练</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clf.fit(iris_x_train, iris_y_train)</span><br></pre></td></tr></table></figure><pre><code>AdaBoostClassifier(algorithm=&#39;SAMME.R&#39;, base_estimator=None,          learning_rate=1.0, n_estimators=50, random_state=None)</code></pre><ul><li>预测</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = clf.predict(iris_x_test)</span><br><span class="line">print(res)</span><br><span class="line">print(iris_y_test.values)</span><br></pre></td></tr></table></figure><pre><code>[1 0 2 2 0 0 2 0 0 2 0 0 1 1 1 0 1 0 0 0 0 2 2 1 1 2 1 0 2 0][1 0 2 1 0 0 2 0 0 2 0 0 1 1 2 0 1 0 0 0 0 2 2 1 1 2 1 0 2 0]</code></pre><ul><li>评估</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accuracy = clf.score(iris_x_test, iris_y_test)</span><br><span class="line">print(<span class="string">"预测正确率:&#123;:.0%&#125;"</span>.format(accuracy))</span><br></pre></td></tr></table></figure><pre><code>预测正确率:93%</code></pre><ul><li>可视化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">draw(clf)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/e0b703a488b5e8cd52b0428431efd4cb.png" alt="output_141_0"></p><h2 id="14-8-集成方法——梯度提升树GBDT"><a href="#14-8-集成方法——梯度提升树GBDT" class="headerlink" title="14.8 集成方法——梯度提升树GBDT"></a>14.8 集成方法——梯度提升树GBDT</h2><p>【1】基本思想</p><p>训练集m，获得第一个弱分类器，获得残差，然后不断地拟合残差</p><p>所有弱分类器相加得到强分类器</p><p>【2】sklearn实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingClassifier</span><br></pre></td></tr></table></figure><ul><li>构建分类器对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clf = GradientBoostingClassifier()</span><br><span class="line">clf</span><br></pre></td></tr></table></figure><pre><code>GradientBoostingClassifier(criterion=&#39;friedman_mse&#39;, init=None,              learning_rate=0.1, loss=&#39;deviance&#39;, max_depth=3,              max_features=None, max_leaf_nodes=None,              min_impurity_decrease=0.0, min_impurity_split=None,              min_samples_leaf=1, min_samples_split=2,              min_weight_fraction_leaf=0.0, n_estimators=100,              presort=&#39;auto&#39;, random_state=None, subsample=1.0, verbose=0,              warm_start=False)</code></pre><ul><li>训练</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clf.fit(iris_x_train, iris_y_train)</span><br></pre></td></tr></table></figure><pre><code>GradientBoostingClassifier(criterion=&#39;friedman_mse&#39;, init=None,              learning_rate=0.1, loss=&#39;deviance&#39;, max_depth=3,              max_features=None, max_leaf_nodes=None,              min_impurity_decrease=0.0, min_impurity_split=None,              min_samples_leaf=1, min_samples_split=2,              min_weight_fraction_leaf=0.0, n_estimators=100,              presort=&#39;auto&#39;, random_state=None, subsample=1.0, verbose=0,              warm_start=False)</code></pre><ul><li>预测</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = clf.predict(iris_x_test)</span><br><span class="line">print(res)</span><br><span class="line">print(iris_y_test.values)</span><br></pre></td></tr></table></figure><pre><code>[1 0 2 2 0 0 2 0 0 2 0 0 1 1 1 0 1 0 0 0 0 2 2 1 1 2 1 0 2 0][1 0 2 1 0 0 2 0 0 2 0 0 1 1 2 0 1 0 0 0 0 2 2 1 1 2 1 0 2 0]</code></pre><ul><li>评估</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accuracy = clf.score(iris_x_test, iris_y_test)</span><br><span class="line">print(<span class="string">"预测正确率:&#123;:.0%&#125;"</span>.format(accuracy))</span><br></pre></td></tr></table></figure><pre><code>预测正确率:93%</code></pre><ul><li>可视化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">draw(clf)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/967f35a44bbef8c85188f775d67f0dbe.png" alt="output_156_0"></p><h2 id="14-9-大杀器"><a href="#14-9-大杀器" class="headerlink" title="14.9 大杀器"></a>14.9 大杀器</h2><p>【1】xgboost</p><p>GBDT的损失函数只对误差部分做负梯度（一阶泰勒）展开</p><p>XGBoost损失函数对误差部分做二阶泰勒展开，更加准确，更快收敛</p><p>【2】lightgbm</p><p>微软：快速的，分布式的，高性能的基于决策树算法的梯度提升框架</p><p>速度更快</p><p>【3】stacking</p><p>堆叠或者叫模型融合</p><p>先建立几个简单的模型进行训练，第二级学习器会基于前级模型的预测结果进行再训练</p><p>【4】神经网络</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础13(matplotlib库)</title>
      <link href="/2020/08/17/deepshare_python%E5%9F%BA%E7%A1%8013/"/>
      <url>/2020/08/17/deepshare_python%E5%9F%BA%E7%A1%8013/</url>
      
        <content type="html"><![CDATA[<h1 id="第十三章-Matplotlib库"><a href="#第十三章-Matplotlib库" class="headerlink" title="第十三章 Matplotlib库"></a>第十三章 Matplotlib库</h1><h2 id="13-0-环境配置"><a href="#13-0-环境配置" class="headerlink" title="13.0 环境配置"></a>13.0 环境配置</h2><p>【1】 要不要plt.show()</p><ul><li><p>ipython中可用魔术方法   %matplotlib inline</p></li><li><p>pycharm 中必须使用plt.show()</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.style.use(<span class="string">"seaborn-whitegrid"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.ylabel(<span class="string">"squares"</span>)</span><br><span class="line"><span class="comment"># plt.show()</span></span><br></pre></td></tr></table></figure><pre><code>Text(0,0.5,&#39;squares&#39;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/44432f4e2e42f67ae1e26c6591b865d9.png" alt="output_6_1"></p><p>【2】设置样式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.style.available[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><pre><code>[&#39;bmh&#39;, &#39;classic&#39;, &#39;dark_background&#39;, &#39;fast&#39;, &#39;fivethirtyeight&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> plt.style.context(<span class="string">"fivethirtyeight"</span>):</span><br><span class="line">    plt.plot(x, y)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/bb4d7d635240df4c21ecb5411c3f377c.png" alt="output_9_0"></p><p>【3】将图像保存为文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span> ,<span class="number">100</span>)</span><br><span class="line">plt.plot(x, np.exp(x))</span><br><span class="line">plt.savefig(<span class="string">"my_figure.png"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/19526d4607dabf67e6a202f2ca33c10c.png" alt="output_11_0"></p><h2 id="13-1-Matplotlib库"><a href="#13-1-Matplotlib库" class="headerlink" title="13.1 Matplotlib库"></a>13.1 Matplotlib库</h2><h3 id="13-1-1-折线图"><a href="#13-1-1-折线图" class="headerlink" title="13.1.1 折线图"></a>13.1.1 折线图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.style.use(<span class="string">"seaborn-whitegrid"</span>)</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">100</span>)</span><br><span class="line">plt.plot(x, np.sin(x))</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x1dffbc39320&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/76096bff5ec545533624e23ea43b200d.png" alt="output_15_1"></p><ul><li>绘制多条曲线</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">100</span>)</span><br><span class="line">plt.plot(x, np.cos(x))</span><br><span class="line">plt.plot(x, np.sin(x))</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x1dffbc71518&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/5ffa4ae0e639d37ca8a6e1989cce9be5.png" alt="output_17_1"></p><p>【1】调整线条颜色和风格</p><ul><li>调整线条颜色</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">offsets = np.linspace(<span class="number">0</span>, np.pi, <span class="number">5</span>)</span><br><span class="line">colors = [<span class="string">"blue"</span>, <span class="string">"g"</span>, <span class="string">"r"</span>, <span class="string">"yellow"</span>, <span class="string">"pink"</span>]</span><br><span class="line"><span class="keyword">for</span> offset, color <span class="keyword">in</span> zip(offsets, colors):</span><br><span class="line">    plt.plot(x, np.sin(x-offset), color=color)         <span class="comment"># color可缩写为c</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/abb08fe9386fea3757d94d5c061f43a0.png" alt="output_20_0"></p><ul><li>调整线条风格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">11</span>)</span><br><span class="line">offsets = list(range(<span class="number">8</span>))</span><br><span class="line">linestyles = [<span class="string">"solid"</span>, <span class="string">"dashed"</span>, <span class="string">"dashdot"</span>, <span class="string">"dotted"</span>, <span class="string">"-"</span>, <span class="string">"--"</span>, <span class="string">"-."</span>, <span class="string">":"</span>]</span><br><span class="line"><span class="keyword">for</span> offset, linestyle <span class="keyword">in</span> zip(offsets, linestyles):</span><br><span class="line">    plt.plot(x, x+offset, linestyle=linestyle)        <span class="comment"># linestyle可简写为ls</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/106904a8d96a857bf936a5e2232993c8.png" alt="output_22_0"></p><ul><li>调整线宽</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">11</span>)</span><br><span class="line">offsets = list(range(<span class="number">0</span>, <span class="number">12</span>, <span class="number">3</span>))</span><br><span class="line">linewidths = (i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> offset, linewidth <span class="keyword">in</span> zip(offsets, linewidths):</span><br><span class="line">    plt.plot(x, x+offset, linewidth=linewidth)                 <span class="comment"># linewidth可简写为lw</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/5fdfcd5e83aa120371257fa66c247ee6.png" alt="output_24_0"></p><ul><li>调整数据点标记</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">11</span>)</span><br><span class="line">offsets = list(range(<span class="number">0</span>, <span class="number">12</span>, <span class="number">3</span>))</span><br><span class="line">markers = [<span class="string">"*"</span>, <span class="string">"+"</span>, <span class="string">"o"</span>, <span class="string">"s"</span>]</span><br><span class="line"><span class="keyword">for</span> offset, marker <span class="keyword">in</span> zip(offsets, markers):</span><br><span class="line">    plt.plot(x, x+offset, marker=marker)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/157954cd7d5a5e86970cf8bad98df3dd.png" alt="output_26_0"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">11</span>)</span><br><span class="line">offsets = list(range(<span class="number">0</span>, <span class="number">12</span>, <span class="number">3</span>))</span><br><span class="line">markers = [<span class="string">"*"</span>, <span class="string">"+"</span>, <span class="string">"o"</span>, <span class="string">"s"</span>]</span><br><span class="line"><span class="keyword">for</span> offset, marker <span class="keyword">in</span> zip(offsets, markers):</span><br><span class="line">    plt.plot(x, x+offset, marker=marker, markersize=<span class="number">10</span>)      <span class="comment"># markersize可简写为ms</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/9001a4aeac2e9139b17754ae30f0fbf1.png" alt="output_27_0"></p><ul><li>颜色跟风格设置的简写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">11</span>)</span><br><span class="line">offsets = list(range(<span class="number">0</span>, <span class="number">8</span>, <span class="number">2</span>))</span><br><span class="line">color_linestyles = [<span class="string">"g-"</span>, <span class="string">"b--"</span>, <span class="string">"k-."</span>, <span class="string">"r:"</span>]</span><br><span class="line"><span class="keyword">for</span> offset, color_linestyle <span class="keyword">in</span> zip(offsets, color_linestyles):</span><br><span class="line">    plt.plot(x, x+offset, color_linestyle)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/7f03746185434fb28c3e77324c268db5.png" alt="output_29_0"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">11</span>)</span><br><span class="line">offsets = list(range(<span class="number">0</span>, <span class="number">8</span>, <span class="number">2</span>))</span><br><span class="line">color_marker_linestyles = [<span class="string">"g*-"</span>, <span class="string">"b+--"</span>, <span class="string">"ko-."</span>, <span class="string">"rs:"</span>]</span><br><span class="line"><span class="keyword">for</span> offset, color_marker_linestyle <span class="keyword">in</span> zip(offsets, color_marker_linestyles):</span><br><span class="line">    plt.plot(x, x+offset, color_marker_linestyle)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/13a54cd16551a2f8ad0eb6dcd9078f34.png" alt="output_30_0"></p><p>其他用法及颜色缩写、数据点标记缩写等请查看官方文档，如下：</p><p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot" target="_blank" rel="noopener">https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot</a></p><p>【2】调整坐标轴</p><ul><li>xlim, ylim</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">100</span>)</span><br><span class="line">plt.plot(x, np.sin(x))</span><br><span class="line">plt.xlim(<span class="number">-1</span>, <span class="number">7</span>)</span><br><span class="line">plt.ylim(<span class="number">-1.5</span>, <span class="number">1.5</span>)</span><br></pre></td></tr></table></figure><pre><code>(-1.5, 1.5)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/fb6135125901bd4e00177666b76200cc.png" alt="output_35_1"></p><ul><li>axis</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">100</span>)</span><br><span class="line">plt.plot(x, np.sin(x))</span><br><span class="line">plt.axis([<span class="number">-2</span>, <span class="number">8</span>, <span class="number">-2</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><pre><code>[-2, 8, -2, 2]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/214f1e8311df681eb1e888d331007698.png" alt="output_37_1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">100</span>)</span><br><span class="line">plt.plot(x, np.sin(x))</span><br><span class="line">plt.axis(<span class="string">"tight"</span>)</span><br></pre></td></tr></table></figure><pre><code>(-0.3141592653589793, 6.5973445725385655, -1.0998615404412626, 1.0998615404412626)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/76096bff5ec545533624e23ea43b200d.png" alt="output_38_1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">100</span>)</span><br><span class="line">plt.plot(x, np.sin(x))</span><br><span class="line">plt.axis(<span class="string">"equal"</span>)</span><br></pre></td></tr></table></figure><pre><code>(-0.3141592653589793, 6.5973445725385655, -1.0998615404412626, 1.0998615404412626)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/5c81c3b0b8d5ef63df4da243e48b8f7e.png" alt="output_39_1"></p><ul><li>对数坐标</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.logspace(<span class="number">0</span>, <span class="number">5</span>, <span class="number">100</span>)</span><br><span class="line">plt.plot(x, np.log(x))</span><br><span class="line">plt.xscale(<span class="string">"log"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/bd016c35b3ad8df0f162467d364c8543.png" alt="output_41_0"></p><ul><li>调整坐标轴刻度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">plt.plot(x, x**<span class="number">2</span>)</span><br><span class="line">plt.xticks(np.arange(<span class="number">0</span>, <span class="number">12</span>, step=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>([&lt;matplotlib.axis.XTick at 0x1dffd0957f0&gt;,  &lt;matplotlib.axis.XTick at 0x1dffc040080&gt;,  &lt;matplotlib.axis.XTick at 0x1dffbd89828&gt;,  &lt;matplotlib.axis.XTick at 0x1dffbd894e0&gt;,  &lt;matplotlib.axis.XTick at 0x1dffbfb25f8&gt;,  &lt;matplotlib.axis.XTick at 0x1dffbfb2cc0&gt;,  &lt;matplotlib.axis.XTick at 0x1dffbfb2d68&gt;,  &lt;matplotlib.axis.XTick at 0x1dffc031f60&gt;,  &lt;matplotlib.axis.XTick at 0x1dffc031518&gt;,  &lt;matplotlib.axis.XTick at 0x1dffc031390&gt;,  &lt;matplotlib.axis.XTick at 0x1dffc0319e8&gt;,  &lt;matplotlib.axis.XTick at 0x1dffbfb23c8&gt;], &lt;a list of 12 Text xticklabel objects&gt;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/8031d5c7dc22943dfafa3d70fef4a375.png" alt="output_43_1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">plt.plot(x, x**<span class="number">2</span>)</span><br><span class="line">plt.xticks(np.arange(<span class="number">0</span>, <span class="number">12</span>, step=<span class="number">1</span>), fontsize=<span class="number">15</span>)</span><br><span class="line">plt.yticks(np.arange(<span class="number">0</span>, <span class="number">110</span>, step=<span class="number">10</span>))</span><br></pre></td></tr></table></figure><pre><code>([&lt;matplotlib.axis.YTick at 0x1dffbd09470&gt;,  &lt;matplotlib.axis.YTick at 0x1dffbd096a0&gt;,  &lt;matplotlib.axis.YTick at 0x1dffbf55be0&gt;,  &lt;matplotlib.axis.YTick at 0x1dffbe5dfd0&gt;,  &lt;matplotlib.axis.YTick at 0x1dffbe5d198&gt;,  &lt;matplotlib.axis.YTick at 0x1dffbe5d4e0&gt;,  &lt;matplotlib.axis.YTick at 0x1dffb496ef0&gt;,  &lt;matplotlib.axis.YTick at 0x1dffb48bc18&gt;,  &lt;matplotlib.axis.YTick at 0x1dffb46e748&gt;,  &lt;matplotlib.axis.YTick at 0x1dffb4be748&gt;,  &lt;matplotlib.axis.YTick at 0x1dffb479320&gt;], &lt;a list of 11 Text yticklabel objects&gt;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/957790f32e0b3abc4865f1cc97b83daa.png" alt="output_44_1"></p><ul><li>调整刻度样式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">plt.plot(x, x**<span class="number">2</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">"both"</span>, labelsize=<span class="number">15</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/b0daee4dfee8f04fe1ea1eb1f116b190.png" alt="output_46_0"></p><p>【3】设置图形标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">100</span>)</span><br><span class="line">plt.plot(x, np.sin(x))</span><br><span class="line">plt.title(<span class="string">"A Sine Curve"</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.xlabel(<span class="string">"x"</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">"sin(x)"</span>, fontsize=<span class="number">15</span>)</span><br></pre></td></tr></table></figure><pre><code>Text(0,0.5,&#39;sin(x)&#39;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/3ccbaa4cceefb1290ce337016b4db561.png" alt="output_48_1"></p><p>【4】设置图例</p><ul><li>默认</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">100</span>)</span><br><span class="line">plt.plot(x, np.sin(x), <span class="string">"b-"</span>, label=<span class="string">"Sin"</span>)</span><br><span class="line">plt.plot(x, np.cos(x), <span class="string">"r--"</span>, label=<span class="string">"Cos"</span>)</span><br><span class="line">plt.legend()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.legend.Legend at 0x1dffbf05780&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/883b6dffc029c1b5e16df91d2744e749.png" alt="output_51_1"></p><ul><li>修饰图例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">100</span>)</span><br><span class="line">plt.plot(x, np.sin(x), <span class="string">"b-"</span>, label=<span class="string">"Sin"</span>)</span><br><span class="line">plt.plot(x, np.cos(x), <span class="string">"r--"</span>, label=<span class="string">"Cos"</span>)</span><br><span class="line">plt.ylim(<span class="number">-1.5</span>, <span class="number">2</span>)</span><br><span class="line">plt.legend(loc=<span class="string">"upper center"</span>, frameon=<span class="literal">True</span>, fontsize=<span class="number">15</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.legend.Legend at 0x1dffbe394a8&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/2509783f3e0b7a4c027b36d298dca811.png" alt="output_53_1"></p><p>【5】添加文字和箭头</p><ul><li>添加文字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">100</span>)</span><br><span class="line">plt.plot(x, np.sin(x), <span class="string">"b-"</span>)</span><br><span class="line">plt.text(<span class="number">3.5</span>, <span class="number">0.5</span>, <span class="string">"y=sin(x)"</span>, fontsize=<span class="number">15</span>)</span><br></pre></td></tr></table></figure><pre><code>Text(3.5,0.5,&#39;y=sin(x)&#39;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/ac793a4b294a23568e83e775e79b9211.png" alt="output_56_1"></p><ul><li>添加箭头<code>plt.annotate()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">100</span>)</span><br><span class="line">plt.plot(x, np.sin(x), <span class="string">"b-"</span>)</span><br><span class="line">plt.annotate(<span class="string">'local min'</span>, xy=(<span class="number">1.5</span>*np.pi, <span class="number">-1</span>), xytext=(<span class="number">4.5</span>, <span class="number">0</span>),</span><br><span class="line">             arrowprops=dict(facecolor=<span class="string">'black'</span>, shrink=<span class="number">0.1</span>),</span><br><span class="line">             )</span><br></pre></td></tr></table></figure><pre><code>Text(4.5,0,&#39;local min&#39;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/8753b3e5a013641c3d11e541d1bf30f8.png" alt="output_58_1"></p><h3 id="13-1-2-散点图"><a href="#13-1-2-散点图" class="headerlink" title="13.1.2 散点图"></a>13.1.2 散点图</h3><p>【1】简单散点图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">20</span>)</span><br><span class="line">plt.scatter(x, np.sin(x), marker=<span class="string">"o"</span>, s=<span class="number">30</span>, c=<span class="string">"r"</span>)    <span class="comment"># s 大小  c 颜色</span></span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.collections.PathCollection at 0x1dffbefc160&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/7b01ba59caa3d87b0e2904f860491935.png" alt="output_61_1"></p><p>【2】颜色配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">y = x**<span class="number">2</span></span><br><span class="line">plt.scatter(x, y, c=y, cmap=<span class="string">"inferno"</span>)  </span><br><span class="line">plt.colorbar()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.colorbar.Colorbar at 0x1dffd07d588&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/d56c7155f96b028f9a7b4de1463b1c57.png" alt="output_63_1"></p><p>颜色配置参考官方文档</p><p><a href="https://matplotlib.org/examples/color/colormaps_reference.html" target="_blank" rel="noopener">https://matplotlib.org/examples/color/colormaps_reference.html</a></p><p>【3】根据数据控制点的大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x, y, colors, size = (np.random.rand(<span class="number">100</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>))</span><br><span class="line">plt.scatter(x, y, c=colors, s=<span class="number">1000</span>*size, cmap=<span class="string">"viridis"</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.collections.PathCollection at 0x1dffd0d6be0&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/48570a5d8220b0ae529fd5719dee3a3b.png" alt="output_67_1"></p><p>【4】透明度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x, y, colors, size = (np.random.rand(<span class="number">100</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>))</span><br><span class="line">plt.scatter(x, y, c=colors, s=<span class="number">1000</span>*size, cmap=<span class="string">"viridis"</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">plt.colorbar()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.colorbar.Colorbar at 0x1dffbb98940&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/4d751342d69ccd7815a3ba126c47f7f7.png" alt="output_69_1"></p><p>【例】随机漫步</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWalk</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""一个生产随机漫步的类"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_points=<span class="number">5000</span>)</span>:</span></span><br><span class="line">        self.num_points = num_points</span><br><span class="line">        self.x_values = [<span class="number">0</span>]</span><br><span class="line">        self.y_values = [<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fill_walk</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> len(self.x_values) &lt; self.num_points:</span><br><span class="line">            x_direction = choice([<span class="number">1</span>, <span class="number">-1</span>])</span><br><span class="line">            x_distance = choice([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">            x_step = x_direction * x_distance</span><br><span class="line">            </span><br><span class="line">            y_direction = choice([<span class="number">1</span>, <span class="number">-1</span>])</span><br><span class="line">            y_distance = choice([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">            y_step = y_direction * y_distance            </span><br><span class="line">        </span><br><span class="line">            <span class="keyword">if</span> x_step == <span class="number">0</span> <span class="keyword">or</span> y_step == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            next_x = self.x_values[<span class="number">-1</span>] + x_step</span><br><span class="line">            next_y = self.y_values[<span class="number">-1</span>] + y_step</span><br><span class="line">            self.x_values.append(next_x)</span><br><span class="line">            self.y_values.append(next_y)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rw = RandomWalk(<span class="number">10000</span>)</span><br><span class="line">rw.fill_walk()</span><br><span class="line">point_numbers = list(range(rw.num_points))</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))                 </span><br><span class="line">plt.scatter(rw.x_values, rw.y_values, c=point_numbers, cmap=<span class="string">"inferno"</span>, s=<span class="number">1</span>)</span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.scatter(<span class="number">0</span>, <span class="number">0</span>, c=<span class="string">"green"</span>, s=<span class="number">100</span>)</span><br><span class="line">plt.scatter(rw.x_values[<span class="number">-1</span>], rw.y_values[<span class="number">-1</span>], c=<span class="string">"red"</span>, s=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br></pre></td></tr></table></figure><pre><code>([], &lt;a list of 0 Text yticklabel objects&gt;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/961976cdb3a65b3643aa81f6e57a1bfe.png" alt="output_72_1"></p><h3 id="13-1-3-柱形图"><a href="#13-1-3-柱形图" class="headerlink" title="13.1.3 柱形图"></a>13.1.3 柱形图</h3><p>【1】简单柱形图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">plt.bar(x, <span class="number">2</span>*x, align=<span class="string">"center"</span>, width=<span class="number">0.5</span>, alpha=<span class="number">0.5</span>, color=<span class="string">'yellow'</span>, edgecolor=<span class="string">'red'</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">"both"</span>, labelsize=<span class="number">13</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/84a8768712be0d9782ce02593ddbaf1a.png" alt="output_75_0"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">plt.bar(x, <span class="number">2</span>*x, align=<span class="string">"center"</span>, width=<span class="number">0.5</span>, alpha=<span class="number">0.5</span>, color=<span class="string">'yellow'</span>, edgecolor=<span class="string">'red'</span>)</span><br><span class="line">plt.xticks(x, (<span class="string">'G1'</span>, <span class="string">'G2'</span>, <span class="string">'G3'</span>, <span class="string">'G4'</span>, <span class="string">'G5'</span>))</span><br><span class="line">plt.tick_params(axis=<span class="string">"both"</span>, labelsize=<span class="number">13</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/58e726ede79c22223d2d51662ced668d.png" alt="output_76_0"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = (<span class="string">'G1'</span>, <span class="string">'G2'</span>, <span class="string">'G3'</span>, <span class="string">'G4'</span>, <span class="string">'G5'</span>)</span><br><span class="line">y = <span class="number">2</span> * np.arange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">plt.bar(x, y, align=<span class="string">"center"</span>, width=<span class="number">0.5</span>, alpha=<span class="number">0.5</span>, color=<span class="string">'yellow'</span>, edgecolor=<span class="string">'red'</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">"both"</span>, labelsize=<span class="number">13</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/58e726ede79c22223d2d51662ced668d.png" alt="output_77_0"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="string">"G"</span>+str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">y = <span class="number">1</span>/(<span class="number">1</span>+np.exp(-np.arange(<span class="number">5</span>)))</span><br><span class="line"></span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>, <span class="string">'gray'</span>]</span><br><span class="line">plt.bar(x, y, align=<span class="string">"center"</span>, width=<span class="number">0.5</span>, alpha=<span class="number">0.5</span>, color=colors)</span><br><span class="line">plt.tick_params(axis=<span class="string">"both"</span>, labelsize=<span class="number">13</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/a0976da856ed517f9665e5afe3c2b848.png" alt="output_78_0"></p><p>【2】累加柱形图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">5</span>)</span><br><span class="line">y1 = np.random.randint(<span class="number">20</span>, <span class="number">30</span>, size=<span class="number">5</span>)</span><br><span class="line">y2 = np.random.randint(<span class="number">20</span>, <span class="number">30</span>, size=<span class="number">5</span>)</span><br><span class="line">plt.bar(x, y1, width=<span class="number">0.5</span>, label=<span class="string">"man"</span>)</span><br><span class="line">plt.bar(x, y2, width=<span class="number">0.5</span>, bottom=y1, label=<span class="string">"women"</span>)</span><br><span class="line">plt.legend()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.legend.Legend at 0x1dffd3db400&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/67b7792161c43fcc7237f98c441aee16.png" alt="output_80_1"></p><p>【3】并列柱形图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">15</span>)</span><br><span class="line">y1 = x+<span class="number">1</span></span><br><span class="line">y2 = y1+np.random.random(<span class="number">15</span>)</span><br><span class="line">plt.bar(x, y1, width=<span class="number">0.3</span>, label=<span class="string">"man"</span>)</span><br><span class="line">plt.bar(x+<span class="number">0.3</span>, y2, width=<span class="number">0.3</span>, label=<span class="string">"women"</span>)</span><br><span class="line">plt.legend()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.legend.Legend at 0x1dffd4522b0&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/46e2370546e237d2595398a88c4ad248.png" alt="output_82_1"></p><p>【4】横向柱形图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="string">'G1'</span>, <span class="string">'G2'</span>, <span class="string">'G3'</span>, <span class="string">'G4'</span>, <span class="string">'G5'</span>]</span><br><span class="line">y = <span class="number">2</span> * np.arange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">plt.barh(x, y, align=<span class="string">"center"</span>, height=<span class="number">0.5</span>, alpha=<span class="number">0.8</span>, color=<span class="string">"blue"</span>, edgecolor=<span class="string">"red"</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">"both"</span>, labelsize=<span class="number">13</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/9c5074ecf162a75d27c6d0f6c8991e7b.png" alt="output_84_0"></p><h3 id="13-1-4-多子图"><a href="#13-1-4-多子图" class="headerlink" title="13.1.4 多子图"></a>13.1.4 多子图</h3><p>【1】简单多子图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.exp(-t) * np.cos(<span class="number">2</span>*np.pi*t)</span><br><span class="line"></span><br><span class="line">t1 = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.1</span>)</span><br><span class="line">t2 = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.02</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">211</span>)</span><br><span class="line">plt.plot(t1, f(t1), <span class="string">"bo-"</span>, markerfacecolor=<span class="string">"r"</span>, markersize=<span class="number">5</span>)</span><br><span class="line">plt.title(<span class="string">"A tale of 2 subplots"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Damped oscillation"</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">plt.plot(t2, np.cos(<span class="number">2</span>*np.pi*t2), <span class="string">"r--"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"time (s)"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Undamped"</span>)</span><br></pre></td></tr></table></figure><pre><code>Text(0,0.5,&#39;Undamped&#39;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/4a85738a23674b522c35cba437c3a22d.png" alt="output_87_1"></p><p>【2】多行多列子图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.random(<span class="number">10</span>)</span><br><span class="line">y = np.random.random(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">plt.subplots_adjust(hspace=<span class="number">0.5</span>, wspace=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">321</span>)</span><br><span class="line">plt.scatter(x, y, s=<span class="number">80</span>, c=<span class="string">"b"</span>, marker=<span class="string">"&gt;"</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">322</span>)</span><br><span class="line">plt.scatter(x, y, s=<span class="number">80</span>, c=<span class="string">"g"</span>, marker=<span class="string">"*"</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">323</span>)</span><br><span class="line">plt.scatter(x, y, s=<span class="number">80</span>, c=<span class="string">"r"</span>, marker=<span class="string">"s"</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">324</span>)</span><br><span class="line">plt.scatter(x, y, s=<span class="number">80</span>, c=<span class="string">"c"</span>, marker=<span class="string">"p"</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">325</span>)</span><br><span class="line">plt.scatter(x, y, s=<span class="number">80</span>, c=<span class="string">"m"</span>, marker=<span class="string">"+"</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">326</span>)</span><br><span class="line">plt.scatter(x, y, s=<span class="number">80</span>, c=<span class="string">"y"</span>, marker=<span class="string">"H"</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.collections.PathCollection at 0x1dffd6ed940&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/693effc71405f4503f4f9418bcdbe4cf.png" alt="output_89_1"></p><p>【3】不规则多子图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.exp(-x) * np.cos(<span class="number">2</span>*np.pi*x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">0.0</span>, <span class="number">3.0</span>, <span class="number">0.01</span>)</span><br><span class="line">grid = plt.GridSpec(<span class="number">2</span>, <span class="number">3</span>, wspace=<span class="number">0.4</span>, hspace=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(grid[<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">plt.plot(x, f(x))</span><br><span class="line"></span><br><span class="line">plt.subplot(grid[<span class="number">0</span>, <span class="number">1</span>:])</span><br><span class="line">plt.plot(x, f(x), <span class="string">"r--"</span>, lw=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(grid[<span class="number">1</span>, :])</span><br><span class="line">plt.plot(x, f(x), <span class="string">"g-."</span>, lw=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x1dffd29e390&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/1e6bc6aa41cb8bb7972f8de29d662462.png" alt="output_91_1"></p><h3 id="13-1-5-直方图"><a href="#13-1-5-直方图" class="headerlink" title="13.1.5 直方图"></a>13.1.5 直方图</h3><p>【1】普通频次直方图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mu, sigma = <span class="number">100</span>, <span class="number">15</span></span><br><span class="line">x = mu + sigma * np.random.randn(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">plt.hist(x, bins=<span class="number">50</span>, facecolor=<span class="string">'g'</span>, alpha=<span class="number">0.75</span>)</span><br></pre></td></tr></table></figure><pre><code>(array([  3.,   4.,   7.,   9.,  12.,  16.,  37.,  42.,  49.,  84., 107.,        137., 202., 223., 282., 374., 370., 437., 488., 532., 601., 612.,        606., 566., 535., 547., 495., 445., 435., 361., 342., 244., 194.,        145., 136.,  83.,  77.,  52.,  32.,  27.,  24.,  11.,   6.,   2.,          2.,   2.,   1.,   1.,   0.,   1.]), array([ 48.49350991,  50.7639087 ,  53.03430749,  55.30470628,         57.57510506,  59.84550385,  62.11590264,  64.38630143,         66.65670022,  68.92709901,  71.1974978 ,  73.46789658,         75.73829537,  78.00869416,  80.27909295,  82.54949174,         84.81989053,  87.09028932,  89.36068811,  91.63108689,         93.90148568,  96.17188447,  98.44228326, 100.71268205,        102.98308084, 105.25347963, 107.52387841, 109.7942772 ,        112.06467599, 114.33507478, 116.60547357, 118.87587236,        121.14627115, 123.41666994, 125.68706872, 127.95746751,        130.2278663 , 132.49826509, 134.76866388, 137.03906267,        139.30946146, 141.57986024, 143.85025903, 146.12065782,        148.39105661, 150.6614554 , 152.93185419, 155.20225298,        157.47265177, 159.74305055, 162.01344934]), &lt;a list of 50 Patch objects&gt;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/1cdfd09fbda092baaaae5a0ed63e57dd.png" alt="output_94_1"></p><p>【2】概率密度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mu, sigma = <span class="number">100</span>, <span class="number">15</span></span><br><span class="line">x = mu + sigma * np.random.randn(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">plt.hist(x, <span class="number">50</span>, density=<span class="literal">True</span>, color=<span class="string">"r"</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Smarts'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Probability'</span>)</span><br><span class="line">plt.title(<span class="string">'Histogram of IQ'</span>)</span><br><span class="line">plt.text(<span class="number">60</span>, <span class="number">.025</span>, <span class="string">r'$\mu=100,\ \sigma=15$'</span>)</span><br><span class="line">plt.xlim(<span class="number">40</span>, <span class="number">160</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">0.03</span>)</span><br></pre></td></tr></table></figure><pre><code>(0, 0.03)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/f848b3456f3d06816f0bfe9e1d57a289.png" alt="output_96_1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mu, sigma = <span class="number">100</span>, <span class="number">15</span></span><br><span class="line">x = mu + sigma * np.random.randn(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">plt.hist(x, bins=<span class="number">50</span>, density=<span class="literal">True</span>, color=<span class="string">"r"</span>, histtype=<span class="string">'step'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Smarts'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Probability'</span>)</span><br><span class="line">plt.title(<span class="string">'Histogram of IQ'</span>)</span><br><span class="line">plt.text(<span class="number">60</span>, <span class="number">.025</span>, <span class="string">r'$\mu=100,\ \sigma=15$'</span>)</span><br><span class="line">plt.xlim(<span class="number">40</span>, <span class="number">160</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">0.03</span>)</span><br></pre></td></tr></table></figure><pre><code>(0, 0.03)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/ef7a1702f38ad4126336dec31d6c3f43.png" alt="output_97_1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> norm</span><br><span class="line">mu, sigma = <span class="number">100</span>, <span class="number">15</span></span><br><span class="line">x = mu + sigma * np.random.randn(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">_, bins, __ = plt.hist(x, <span class="number">50</span>, density=<span class="literal">True</span>)</span><br><span class="line">y = norm.pdf(bins, mu, sigma)</span><br><span class="line">plt.plot(bins, y, <span class="string">'r--'</span>, lw=<span class="number">3</span>)  </span><br><span class="line">plt.xlabel(<span class="string">'Smarts'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Probability'</span>)</span><br><span class="line">plt.title(<span class="string">'Histogram of IQ'</span>)</span><br><span class="line">plt.text(<span class="number">60</span>, <span class="number">.025</span>, <span class="string">r'$\mu=100,\ \sigma=15$'</span>)</span><br><span class="line">plt.xlim(<span class="number">40</span>, <span class="number">160</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">0.03</span>)</span><br></pre></td></tr></table></figure><pre><code>(0, 0.03)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/e342b398e1b6fcf0c9454924b554ac90.png" alt="output_98_1"></p><p>【3】累计概率分布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mu, sigma = <span class="number">100</span>, <span class="number">15</span></span><br><span class="line">x = mu + sigma * np.random.randn(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">plt.hist(x, <span class="number">50</span>, density=<span class="literal">True</span>, cumulative=<span class="literal">True</span>, color=<span class="string">"r"</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Smarts'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Cum_Probability'</span>)</span><br><span class="line">plt.title(<span class="string">'Histogram of IQ'</span>)</span><br><span class="line">plt.text(<span class="number">60</span>, <span class="number">0.8</span>, <span class="string">r'$\mu=100,\ \sigma=15$'</span>)</span><br><span class="line">plt.xlim(<span class="number">50</span>, <span class="number">165</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">1.1</span>)</span><br></pre></td></tr></table></figure><pre><code>(0, 1.1)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/e0ddf98e9c3ec2e3da5569908b8a43f8.png" alt="output_100_1"></p><p>【例】模拟投两个骰子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Die</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"模拟一个骰子的类"</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_sides=<span class="number">6</span>)</span>:</span></span><br><span class="line">        self.num_sides = num_sides</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> np.random.randint(<span class="number">1</span>, self.num_sides+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>重复投一个骰子</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">die = Die()</span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">60000</span>):</span><br><span class="line">    result = die.roll()</span><br><span class="line">    results.append(result)</span><br><span class="line">    </span><br><span class="line">plt.hist(results, bins=<span class="number">6</span>, range=(<span class="number">0.75</span>, <span class="number">6.75</span>), align=<span class="string">"mid"</span>, width=<span class="number">0.5</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span> ,<span class="number">7</span>)</span><br></pre></td></tr></table></figure><pre><code>(0, 7)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/f108dc7ad40ebe40f3e788c3216620ba.png" alt="output_104_1"></p><ul><li>重复投两个骰子</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">die1 = Die()</span><br><span class="line">die2 = Die()</span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">60000</span>):</span><br><span class="line">    result = die1.roll()+die2.roll()</span><br><span class="line">    results.append(result)</span><br><span class="line">    </span><br><span class="line">plt.hist(results, bins=<span class="number">11</span>, range=(<span class="number">1.75</span>, <span class="number">12.75</span>), align=<span class="string">"mid"</span>, width=<span class="number">0.5</span>)</span><br><span class="line">plt.xlim(<span class="number">1</span> ,<span class="number">13</span>)</span><br><span class="line">plt.xticks(np.arange(<span class="number">1</span>, <span class="number">14</span>))</span><br></pre></td></tr></table></figure><pre><code>([&lt;matplotlib.axis.XTick at 0x1dfff468048&gt;,  &lt;matplotlib.axis.XTick at 0x1dfff466898&gt;,  &lt;matplotlib.axis.XTick at 0x1dfff4665f8&gt;,  &lt;matplotlib.axis.XTick at 0x1dfff498cf8&gt;,  &lt;matplotlib.axis.XTick at 0x1dfff4a2208&gt;,  &lt;matplotlib.axis.XTick at 0x1dfff4a2710&gt;,  &lt;matplotlib.axis.XTick at 0x1dfff4a2c50&gt;,  &lt;matplotlib.axis.XTick at 0x1dfff4aa208&gt;,  &lt;matplotlib.axis.XTick at 0x1dfff4aa710&gt;,  &lt;matplotlib.axis.XTick at 0x1dfff4aac50&gt;,  &lt;matplotlib.axis.XTick at 0x1dfff4b1208&gt;,  &lt;matplotlib.axis.XTick at 0x1dfff4b1710&gt;,  &lt;matplotlib.axis.XTick at 0x1dfff4aa400&gt;], &lt;a list of 13 Text xticklabel objects&gt;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/3ae208a1fba4d152926e3b911cf74387.png" alt="output_106_1"></p><h3 id="13-1-6-误差图"><a href="#13-1-6-误差图" class="headerlink" title="13.1.6 误差图"></a>13.1.6 误差图</h3><p>【1】基本误差图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span> ,<span class="number">50</span>)</span><br><span class="line">dy = <span class="number">0.5</span></span><br><span class="line">y = np.sin(x) + dy*np.random.randn(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">plt.errorbar(x, y , yerr=dy, fmt=<span class="string">"+b"</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;ErrorbarContainer object of 3 artists&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/cd660a2f98fea0ba8563e4c7bf36df35.png" alt="output_109_1"></p><p>【2】柱形图误差图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">menMeans = (<span class="number">20</span>, <span class="number">35</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">27</span>)</span><br><span class="line">womenMeans = (<span class="number">25</span>, <span class="number">32</span>, <span class="number">34</span>, <span class="number">20</span>, <span class="number">25</span>)</span><br><span class="line">menStd = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">womenStd = (<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">ind = [<span class="string">'G1'</span>, <span class="string">'G2'</span>, <span class="string">'G3'</span>, <span class="string">'G4'</span>, <span class="string">'G5'</span>] </span><br><span class="line">width = <span class="number">0.35</span>       </span><br><span class="line"></span><br><span class="line">p1 = plt.bar(ind, menMeans, width=width, label=<span class="string">"Men"</span>, yerr=menStd)</span><br><span class="line">p2 = plt.bar(ind, womenMeans, width=width, bottom=menMeans, label=<span class="string">"Men"</span>, yerr=womenStd)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">'Scores'</span>)</span><br><span class="line">plt.title(<span class="string">'Scores by group and gender'</span>)</span><br><span class="line">plt.yticks(np.arange(<span class="number">0</span>, <span class="number">81</span>, <span class="number">10</span>))</span><br><span class="line">plt.legend()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.legend.Legend at 0x1dfff54bcf8&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/8dc49b7c234552e29b1396cea67805bf.png" alt="output_111_1"></p><h3 id="13-1-7-面向对象的风格简介"><a href="#13-1-7-面向对象的风格简介" class="headerlink" title="13.1.7 面向对象的风格简介"></a>13.1.7 面向对象的风格简介</h3><p>【例1】 普通图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">y = x ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>,<span class="number">4</span>), dpi=<span class="number">80</span>)        <span class="comment"># 图像</span></span><br><span class="line">axes = fig.add_axes([<span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.8</span>, <span class="number">0.8</span>])      <span class="comment"># 轴 left, bottom, width, height (range 0 to 1)</span></span><br><span class="line"></span><br><span class="line">axes.plot(x, y, <span class="string">'r'</span>)</span><br><span class="line">axes.set_xlabel(<span class="string">'x'</span>)</span><br><span class="line">axes.set_ylabel(<span class="string">'y'</span>)</span><br><span class="line">axes.set_title(<span class="string">'title'</span>)</span><br></pre></td></tr></table></figure><pre><code>Text(0.5,1,&#39;title&#39;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/40398860d049a0fc3831ef4bba48ccba.png" alt="output_114_1"></p><p>【2】画中画</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">y = x ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line">ax1 = fig.add_axes([<span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.8</span>, <span class="number">0.8</span>]) </span><br><span class="line">ax2 = fig.add_axes([<span class="number">0.2</span>, <span class="number">0.5</span>, <span class="number">0.4</span>, <span class="number">0.3</span>]) </span><br><span class="line"></span><br><span class="line">ax1.plot(x, y, <span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line">ax1.set_xlabel(<span class="string">'x'</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">'y'</span>)</span><br><span class="line">ax1.set_title(<span class="string">'title'</span>)</span><br><span class="line"></span><br><span class="line">ax2.plot(y, x, <span class="string">'g'</span>)</span><br><span class="line">ax2.set_xlabel(<span class="string">'y'</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">'x'</span>)</span><br><span class="line">ax2.set_title(<span class="string">'insert title'</span>)</span><br></pre></td></tr></table></figure><pre><code>Text(0.5,1,&#39;insert title&#39;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/84408056520645353507c4aaa2e2e040.png" alt="output_116_1"></p><p>【3】 多子图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.exp(-t) * np.cos(<span class="number">2</span>*np.pi*t)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1 = np.arange(<span class="number">0.0</span>, <span class="number">3.0</span>, <span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">fig= plt.figure()</span><br><span class="line">fig.subplots_adjust(hspace=<span class="number">0.4</span>, wspace=<span class="number">0.4</span>)</span><br><span class="line"></span><br><span class="line">ax1 = plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">ax1.plot(t1, f(t1))</span><br><span class="line">ax1.set_title(<span class="string">"Upper left"</span>)</span><br><span class="line"></span><br><span class="line">ax2 = plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">ax2.plot(t1, f(t1))</span><br><span class="line">ax2.set_title(<span class="string">"Upper right"</span>)</span><br><span class="line"></span><br><span class="line">ax3 = plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">ax3.plot(t1, f(t1))</span><br><span class="line">ax3.set_title(<span class="string">"Lower"</span>)</span><br></pre></td></tr></table></figure><pre><code>Text(0.5,1,&#39;Lower&#39;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/d9e9974b07a8dba388d677d35051c3d8.png" alt="output_118_1"></p><h3 id="13-1-8-三维图形简介"><a href="#13-1-8-三维图形简介" class="headerlink" title="13.1.8 三维图形简介"></a>13.1.8 三维图形简介</h3><p>【1】三维数据点与线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits <span class="keyword">import</span> mplot3d</span><br><span class="line"></span><br><span class="line">ax = plt.axes(projection=<span class="string">"3d"</span>)</span><br><span class="line">zline = np.linspace(<span class="number">0</span>, <span class="number">15</span>, <span class="number">1000</span>)</span><br><span class="line">xline = np.sin(zline)</span><br><span class="line">yline = np.cos(zline)</span><br><span class="line">ax.plot3D(xline, yline ,zline)</span><br><span class="line"></span><br><span class="line">zdata = <span class="number">15</span>*np.random.random(<span class="number">100</span>)</span><br><span class="line">xdata = np.sin(zdata)</span><br><span class="line">ydata = np.cos(zdata)</span><br><span class="line">ax.scatter3D(xdata, ydata ,zdata, c=zdata, cmap=<span class="string">"spring"</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;mpl_toolkits.mplot3d.art3d.Path3DCollection at 0x1dfff80f978&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/7c5125c1cae1cf3d5be5857dac97106b.png" alt="output_121_1"></p><p>【2】三维数据曲面图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.sin(np.sqrt(x**<span class="number">2</span> + y**<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-6</span>, <span class="number">6</span>, <span class="number">30</span>)</span><br><span class="line">y = np.linspace(<span class="number">-6</span>, <span class="number">6</span>, <span class="number">30</span>)</span><br><span class="line">X, Y = np.meshgrid(x, y)</span><br><span class="line">Z = f(X, Y)</span><br><span class="line"></span><br><span class="line">ax = plt.axes(projection=<span class="string">"3d"</span>)</span><br><span class="line">ax.plot_surface(X, Y, Z, cmap=<span class="string">"viridis"</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;mpl_toolkits.mplot3d.art3d.Poly3DCollection at 0x1dfff8580f0&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/2bda64239e82f9c2d1937cec03d701c3.png" alt="output_123_1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits <span class="keyword">import</span> mplot3d</span><br><span class="line"></span><br><span class="line">t = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">1000</span>)</span><br><span class="line">X = np.sin(t)</span><br><span class="line">Y = np.cos(t)</span><br><span class="line">Z = np.arange(t.size)[:, np.newaxis]</span><br><span class="line"></span><br><span class="line">ax = plt.axes(projection=<span class="string">"3d"</span>)</span><br><span class="line">ax.plot_surface(X, Y, Z, cmap=<span class="string">"viridis"</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;mpl_toolkits.mplot3d.art3d.Poly3DCollection at 0x1dfffe33320&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/37cd847b7022ad7c1f6c2dcce50f8fc7.png" alt="output_124_1"></p><h2 id="13-2-Seaborn库-文艺青年的最爱"><a href="#13-2-Seaborn库-文艺青年的最爱" class="headerlink" title="13.2 Seaborn库-文艺青年的最爱"></a>13.2 Seaborn库-文艺青年的最爱</h2><p>【1】Seaborn 与 Matplotlib</p><p>Seaborn 是一个基于 matplotlib 且数据结构与 pandas 统一的统计图制作库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">500</span>)</span><br><span class="line">y = np.cumsum(np.random.randn(<span class="number">500</span>, <span class="number">6</span>), axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> plt.style.context(<span class="string">"classic"</span>):</span><br><span class="line">    plt.plot(x, y)</span><br><span class="line">    plt.legend(<span class="string">"ABCDEF"</span>, ncol=<span class="number">2</span>, loc=<span class="string">"upper left"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/560f689706a48a0226abd0bc23e92d97.png" alt="output_128_0"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">500</span>)</span><br><span class="line">y = np.cumsum(np.random.randn(<span class="number">500</span>, <span class="number">6</span>), axis=<span class="number">0</span>)</span><br><span class="line">sns.set()</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.legend(<span class="string">"ABCDEF"</span>, ncol=<span class="number">2</span>, loc=<span class="string">"upper left"</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.legend.Legend at 0x1df80cedeb8&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/c9511961efd9c2d180bff388c53567c3.png" alt="output_129_1"></p><p>【2】柱形图的对比</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="string">'G1'</span>, <span class="string">'G2'</span>, <span class="string">'G3'</span>, <span class="string">'G4'</span>, <span class="string">'G5'</span>]</span><br><span class="line">y = <span class="number">2</span> * np.arange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">4</span>))</span><br><span class="line">plt.barh(x, y, align=<span class="string">"center"</span>, height=<span class="number">0.5</span>, alpha=<span class="number">0.8</span>, color=<span class="string">"blue"</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">"both"</span>, labelsize=<span class="number">13</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/7ecbd4796082f56e13226ae7f67a3d2a.png" alt="output_131_0"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">4</span>))</span><br><span class="line">x = [<span class="string">'G5'</span>, <span class="string">'G4'</span>, <span class="string">'G3'</span>, <span class="string">'G2'</span>, <span class="string">'G1'</span>]</span><br><span class="line">y = <span class="number">2</span> * np.arange(<span class="number">5</span>, <span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="comment">#sns.barplot(y, x)</span></span><br><span class="line">sns.barplot(y, x, linewidth=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1df81aa3630&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/be4ef9fccf3272ee8cb0918aea00b3a2.png" alt="output_132_1"></p><p>【3】以鸢尾花数据集为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iris = sns.load_dataset(<span class="string">"iris"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iris.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>sepal_length</th>      <th>sepal_width</th>      <th>petal_length</th>      <th>petal_width</th>      <th>species</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>5.1</td>      <td>3.5</td>      <td>1.4</td>      <td>0.2</td>      <td>setosa</td>    </tr>    <tr>      <th>1</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>      <td>setosa</td>    </tr>    <tr>      <th>2</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>      <td>setosa</td>    </tr>    <tr>      <th>3</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>      <td>setosa</td>    </tr>    <tr>      <th>4</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>      <td>setosa</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.pairplot(data=iris, hue=<span class="string">"species"</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.PairGrid at 0x1df80e1f978&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/ba68679b95c8ed07a377f855afb7e286.png" alt="output_137_1"></p><h2 id="13-3-Pandas-中的绘图函数概览"><a href="#13-3-Pandas-中的绘图函数概览" class="headerlink" title="13.3 Pandas 中的绘图函数概览"></a>13.3 Pandas 中的绘图函数概览</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><p>【1】线形图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">1000</span>, <span class="number">4</span>).cumsum(axis=<span class="number">0</span>),</span><br><span class="line">                  columns=list(<span class="string">"ABCD"</span>),</span><br><span class="line">                  index=np.arange(<span class="number">1000</span>))</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>-0.357387</td>      <td>1.296788</td>      <td>0.677388</td>      <td>-0.274738</td>    </tr>    <tr>      <th>1</th>      <td>-0.390594</td>      <td>2.117110</td>      <td>2.064882</td>      <td>0.352564</td>    </tr>    <tr>      <th>2</th>      <td>0.961369</td>      <td>2.077407</td>      <td>1.324020</td>      <td>-0.222974</td>    </tr>    <tr>      <th>3</th>      <td>-0.467860</td>      <td>1.959749</td>      <td>1.820305</td>      <td>-0.667873</td>    </tr>    <tr>      <th>4</th>      <td>-1.727649</td>      <td>1.736383</td>      <td>-0.964698</td>      <td>-0.582371</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.plot()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1df81b51e48&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/6e89931c8c99b0bdd5ab68e492de2c0e.png" alt="output_142_1"></p><p>【2】柱形图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df2 = pd.DataFrame(np.random.rand(<span class="number">10</span>, <span class="number">4</span>), columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line">df2</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.dataframe tbody tr th &#123;</span><br><span class="line">    vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dataframe thead th &#123;</span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>      <th>d</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.699337</td>      <td>0.769669</td>      <td>0.902608</td>      <td>0.159102</td>    </tr>    <tr>      <th>1</th>      <td>0.175567</td>      <td>0.305100</td>      <td>0.976237</td>      <td>0.104934</td>    </tr>    <tr>      <th>2</th>      <td>0.515990</td>      <td>0.134998</td>      <td>0.642477</td>      <td>0.107007</td>    </tr>    <tr>      <th>3</th>      <td>0.957366</td>      <td>0.144178</td>      <td>0.601726</td>      <td>0.750230</td>    </tr>    <tr>      <th>4</th>      <td>0.984008</td>      <td>0.884838</td>      <td>0.523463</td>      <td>0.836287</td>    </tr>    <tr>      <th>5</th>      <td>0.126503</td>      <td>0.363278</td>      <td>0.301233</td>      <td>0.223508</td>    </tr>    <tr>      <th>6</th>      <td>0.405892</td>      <td>0.231994</td>      <td>0.334173</td>      <td>0.165658</td>    </tr>    <tr>      <th>7</th>      <td>0.159382</td>      <td>0.685969</td>      <td>0.375348</td>      <td>0.511164</td>    </tr>    <tr>      <th>8</th>      <td>0.798496</td>      <td>0.152967</td>      <td>0.101149</td>      <td>0.458780</td>    </tr>    <tr>      <th>9</th>      <td>0.562491</td>      <td>0.174615</td>      <td>0.058495</td>      <td>0.831507</td>    </tr>  </tbody></table></div><ul><li>多组数据竖图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.plot.bar()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1df81b41b00&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/5df592ae367b441b44f2b2a2357ac74a.png" alt="output_147_1"></p><ul><li>多组数据累加竖图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.plot.bar(stacked=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1df81e417f0&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/e3156f87e1f3fa9b6b1c1a6c1e557f65.png" alt="output_149_1"></p><ul><li>多组数据累加横图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.plot.barh(stacked=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1dfffdf4320&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/5da70a537156e50b2c2a3c73404d0cda.png" alt="output_151_1"></p><p>【3】直方图和密度图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df4 = pd.DataFrame(&#123;<span class="string">"A"</span>: np.random.randn(<span class="number">1000</span>) - <span class="number">3</span>, <span class="string">"B"</span>: np.random.randn(<span class="number">1000</span>),</span><br><span class="line">                     <span class="string">"C"</span>: np.random.randn(<span class="number">1000</span>) + <span class="number">3</span>&#125;)</span><br><span class="line">df4.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>-2.359101</td>      <td>-0.115241</td>      <td>4.385030</td>    </tr>    <tr>      <th>1</th>      <td>-3.535486</td>      <td>0.971202</td>      <td>2.242132</td>    </tr>    <tr>      <th>2</th>      <td>-2.114034</td>      <td>0.274840</td>      <td>4.018043</td>    </tr>    <tr>      <th>3</th>      <td>-4.600329</td>      <td>1.137162</td>      <td>3.021313</td>    </tr>    <tr>      <th>4</th>      <td>-2.266316</td>      <td>-0.835104</td>      <td>5.030376</td>    </tr>  </tbody></table></div><ul><li>普通直方图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df4.plot.hist(bins=<span class="number">50</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1df81f07da0&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/5bcffb2b2698fc8ab84bb336721e2d67.png" alt="output_155_1"></p><ul><li>累加直方图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df4[<span class="string">'A'</span>].plot.hist(cumulative=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1df82066908&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/78c55651ea5613fade129d7ec41238e2.png" alt="output_157_1"></p><ul><li>概率密度图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df4[<span class="string">'A'</span>].plot(kind=<span class="string">"kde"</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1df8381bdd8&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/4c047a5307e4cd5ecd100445e0e21197.png" alt="output_159_1"></p><ul><li>差分</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">1000</span>, <span class="number">4</span>).cumsum(axis=<span class="number">0</span>),</span><br><span class="line">                  columns=list(<span class="string">"ABCD"</span>),</span><br><span class="line">                  index=np.arange(<span class="number">1000</span>))</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>-0.842435</td>      <td>0.923101</td>      <td>-2.009765</td>      <td>-1.777816</td>    </tr>    <tr>      <th>1</th>      <td>-1.504856</td>      <td>0.047705</td>      <td>-2.076075</td>      <td>-1.918925</td>    </tr>    <tr>      <th>2</th>      <td>-1.785644</td>      <td>-0.065888</td>      <td>-2.774235</td>      <td>-3.555601</td>    </tr>    <tr>      <th>3</th>      <td>-3.689582</td>      <td>-2.605351</td>      <td>-3.114351</td>      <td>-2.128932</td>    </tr>    <tr>      <th>4</th>      <td>-4.846643</td>      <td>-3.568113</td>      <td>-2.220788</td>      <td>-1.766445</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.diff().hist(bins=<span class="number">50</span>, color=<span class="string">"r"</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[&lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001DF838A2828&gt;,        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001DF848A05F8&gt;],       [&lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001DF848C6FD0&gt;,        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001DF848F3A90&gt;]],      dtype=object)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/1501379a0ba33457e4865c0020ea46e9.png" alt="output_162_1"></p><p>【4】散点图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">housing = pd.read_csv(<span class="string">"housing.csv"</span>)</span><br><span class="line">housing.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>longitude</th>      <th>latitude</th>      <th>housing_median_age</th>      <th>total_rooms</th>      <th>total_bedrooms</th>      <th>population</th>      <th>households</th>      <th>median_income</th>      <th>median_house_value</th>      <th>ocean_proximity</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>-122.23</td>      <td>37.88</td>      <td>41.0</td>      <td>880.0</td>      <td>129.0</td>      <td>322.0</td>      <td>126.0</td>      <td>8.3252</td>      <td>452600.0</td>      <td>NEAR BAY</td>    </tr>    <tr>      <th>1</th>      <td>-122.22</td>      <td>37.86</td>      <td>21.0</td>      <td>7099.0</td>      <td>1106.0</td>      <td>2401.0</td>      <td>1138.0</td>      <td>8.3014</td>      <td>358500.0</td>      <td>NEAR BAY</td>    </tr>    <tr>      <th>2</th>      <td>-122.24</td>      <td>37.85</td>      <td>52.0</td>      <td>1467.0</td>      <td>190.0</td>      <td>496.0</td>      <td>177.0</td>      <td>7.2574</td>      <td>352100.0</td>      <td>NEAR BAY</td>    </tr>    <tr>      <th>3</th>      <td>-122.25</td>      <td>37.85</td>      <td>52.0</td>      <td>1274.0</td>      <td>235.0</td>      <td>558.0</td>      <td>219.0</td>      <td>5.6431</td>      <td>341300.0</td>      <td>NEAR BAY</td>    </tr>    <tr>      <th>4</th>      <td>-122.25</td>      <td>37.85</td>      <td>52.0</td>      <td>1627.0</td>      <td>280.0</td>      <td>565.0</td>      <td>259.0</td>      <td>3.8462</td>      <td>342200.0</td>      <td>NEAR BAY</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""基于地理数据的人口、房价可视化"""</span></span><br><span class="line"><span class="comment"># 圆的半价大小代表每个区域人口数量(s),颜色代表价格(c),用预定义的jet表进行可视化</span></span><br><span class="line"><span class="keyword">with</span> sns.axes_style(<span class="string">"white"</span>):</span><br><span class="line">    housing.plot(kind=<span class="string">"scatter"</span>, x=<span class="string">"longitude"</span>, y=<span class="string">"latitude"</span>, alpha=<span class="number">0.6</span>,</span><br><span class="line">                 s=housing[<span class="string">"population"</span>]/<span class="number">100</span>, label=<span class="string">"population"</span>,</span><br><span class="line">                 c=<span class="string">"median_house_value"</span>, cmap=<span class="string">"jet"</span>, colorbar=<span class="literal">True</span>, figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">plt.legend()</span><br><span class="line">plt.axis([<span class="number">-125</span>, <span class="number">-113.5</span>, <span class="number">32</span>, <span class="number">43</span>])</span><br></pre></td></tr></table></figure><pre><code>[-125, -113.5, 32, 43]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/51772d416282e68e4d4d52478353d590.png" alt="output_165_1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">housing.plot(kind=<span class="string">"scatter"</span>, x=<span class="string">"median_income"</span>, y=<span class="string">"median_house_value"</span>, alpha=<span class="number">0.8</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1df849b5358&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/52a1fe7534a59d0a5c49cb2d6722a9e5.png" alt="output_166_1"></p><p>【5】多子图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">1000</span>, <span class="number">4</span>).cumsum(axis=<span class="number">0</span>),</span><br><span class="line">                  columns=list(<span class="string">"ABCD"</span>),</span><br><span class="line">                  index=np.arange(<span class="number">1000</span>))</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.830544</td>      <td>0.316220</td>      <td>0.220822</td>      <td>1.787306</td>    </tr>    <tr>      <th>1</th>      <td>1.772127</td>      <td>-0.110258</td>      <td>-2.231326</td>      <td>2.241495</td>    </tr>    <tr>      <th>2</th>      <td>-0.287825</td>      <td>1.802802</td>      <td>-2.424910</td>      <td>1.720407</td>    </tr>    <tr>      <th>3</th>      <td>0.125099</td>      <td>2.644651</td>      <td>-3.097287</td>      <td>-0.080021</td>    </tr>    <tr>      <th>4</th>      <td>-1.052774</td>      <td>3.421485</td>      <td>-4.433610</td>      <td>-0.733561</td>    </tr>  </tbody></table></div><ul><li>默认情形</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.plot(subplots=<span class="literal">True</span>, figsize=(<span class="number">6</span>, <span class="number">16</span>))</span><br></pre></td></tr></table></figure><pre><code>array([&lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001DF84E53D68&gt;,       &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001DF84E833C8&gt;,       &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001DF84EA8D30&gt;,       &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001DF84ED86D8&gt;],      dtype=object)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/7ef33b1d892196faf15c36e2141c3601.png" alt="output_170_1"></p><ul><li>设定图形安排</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.plot(subplots=<span class="literal">True</span>, layout=(<span class="number">2</span>, <span class="number">2</span>), figsize=(<span class="number">16</span>, <span class="number">6</span>), sharex=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[&lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001DF85171BA8&gt;,        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001DF84DB7D68&gt;],       [&lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001DF84DD4898&gt;,        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001DF84D6F7B8&gt;]],      dtype=object)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/17/f46d9b6f77d89833815abd83e04bcfcc.png" alt="output_172_1"></p><p>其他内容请参考Pandas中文文档</p><p><a href="https://www.pypandas.cn/docs/user_guide/visualization.html#plot-formatting" target="_blank" rel="noopener">https://www.pypandas.cn/docs/user_guide/visualization.html#plot-formatting</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础12(Pandas库)</title>
      <link href="/2020/08/15/deepshare_python%E5%9F%BA%E7%A1%8012/"/>
      <url>/2020/08/15/deepshare_python%E5%9F%BA%E7%A1%8012/</url>
      
        <content type="html"><![CDATA[<h1 id="第十二章-Pandas库"><a href="#第十二章-Pandas库" class="headerlink" title="第十二章  Pandas库"></a>第十二章  Pandas库</h1><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>Numpy 在向量化的数值计算中表现优异</p><p>但是在处理更灵活、复杂的数据任务： </p><p>如为数据添加标签、处理缺失值、分组和透视表等方面  </p><p>Numpy显得力不从心</p><p><strong>而基于Numpy构建的Pandas库，提供了使得数据分析变得更快更简单的高级数据结构和操作工具</strong></p><h2 id="12-1-对象创建"><a href="#12-1-对象创建" class="headerlink" title="12.1 对象创建"></a>12.1 对象创建</h2><h3 id="12-1-1-Pandas-Series对象"><a href="#12-1-1-Pandas-Series对象" class="headerlink" title="12.1.1 Pandas Series对象"></a>12.1.1 Pandas Series对象</h3><p>Series 是带标签数据的一维数组</p><p><strong>Series对象的创建</strong></p><p>通用结构: pd.Series(data, index=index, dtype=dtype)</p><p>data：数据，可以是列表，字典或Numpy数组</p><p>index：索引，为可选参数</p><p>dtype: 数据类型，为可选参数</p><p><strong>1、用列表创建</strong></p><ul><li>index缺省，默认为整数序列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.Series([<span class="number">1.5</span>, <span class="number">3</span>, <span class="number">4.5</span>, <span class="number">6</span>])</span><br><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>0    1.51    3.02    4.53    6.0dtype: float64</code></pre><ul><li>增加index</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = pd.Series([<span class="number">1.5</span>, <span class="number">3</span>, <span class="number">4.5</span>, <span class="number">6</span>], index=[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>])</span><br><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>a    1.5b    3.0c    4.5d    6.0dtype: float64</code></pre><ul><li><p>增加数据类型</p><pre><code>缺省则从传入的数据自动判断</code></pre></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], index=[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>])    </span><br><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>a    1b    2c    3d    4dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], index=[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>], dtype=<span class="string">"float"</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>a    1.0b    2.0c    3.0d    4.0dtype: float64</code></pre><p><strong>注意：数据支持多种类型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="string">"3"</span>, <span class="number">4</span>], index=[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>])</span><br><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>a    1b    2c    3d    4dtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">"a"</span>]</span><br></pre></td></tr></table></figure><pre><code>1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">"c"</span>]</span><br></pre></td></tr></table></figure><pre><code>&#39;3&#39;</code></pre><p><strong>数据类型可被强制改变</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="string">"3"</span>, <span class="number">4</span>], index=[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>], dtype=float)</span><br><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>a    1.0b    2.0c    3.0d    4.0dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">"c"</span>]</span><br></pre></td></tr></table></figure><pre><code>3.0</code></pre><p><strong>2、用一维numpy数组创建</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">5</span>)</span><br><span class="line">pd.Series(x)</span><br></pre></td></tr></table></figure><pre><code>0    01    12    23    34    4dtype: int32</code></pre><p><strong>3、用字典创建</strong></p><ul><li>默认以键为index 值为data</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">population_dict = &#123;<span class="string">"BeiJing"</span>: <span class="number">2154</span>,</span><br><span class="line">                   <span class="string">"ShangHai"</span>: <span class="number">2424</span>,</span><br><span class="line">                   <span class="string">"ShenZhen"</span>: <span class="number">1303</span>,</span><br><span class="line">                   <span class="string">"HangZhou"</span>: <span class="number">981</span> &#125;</span><br><span class="line">population = pd.Series(population_dict)    </span><br><span class="line">population</span><br></pre></td></tr></table></figure><pre><code>BeiJing     2154ShangHai    2424ShenZhen    1303HangZhou     981dtype: int64</code></pre><ul><li>字典创建，如果指定index，则会到字典的键中筛选，找不到的，值设为NaN</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">population = pd.Series(population_dict, index=[<span class="string">"BeiJing"</span>, <span class="string">"HangZhou"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>])    </span><br><span class="line">population</span><br></pre></td></tr></table></figure><pre><code>BeiJing     2154.0HangZhou     981.0c              NaNd              NaNdtype: float64</code></pre><p><strong>4、data为标量的情况</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.Series(<span class="number">5</span>, index=[<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>])</span><br></pre></td></tr></table></figure><pre><code>100    5200    5300    5dtype: int64</code></pre><h3 id="12-1-2-Pandas-DataFrame对象"><a href="#12-1-2-Pandas-DataFrame对象" class="headerlink" title="12.1.2 Pandas DataFrame对象"></a>12.1.2 Pandas DataFrame对象</h3><p>DataFrame 是带标签数据的多维数组</p><p><strong>DataFrame对象的创建</strong></p><p>通用结构: pd.DataFrame(data, index=index, columns=columns)</p><p>data：数据，可以是列表，字典或Numpy数组</p><p>index：索引，为可选参数</p><p>columns: 列标签，为可选参数</p><p><strong>1、通过Series对象创建</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">population_dict = &#123;<span class="string">"BeiJing"</span>: <span class="number">2154</span>,</span><br><span class="line">                   <span class="string">"ShangHai"</span>: <span class="number">2424</span>,</span><br><span class="line">                   <span class="string">"ShenZhen"</span>: <span class="number">1303</span>,</span><br><span class="line">                   <span class="string">"HangZhou"</span>: <span class="number">981</span> &#125;</span><br><span class="line"></span><br><span class="line">population = pd.Series(population_dict)    </span><br><span class="line">pd.DataFrame(population)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>    </tr>  </thead>  <tbody>    <tr>      <th>BeiJing</th>      <td>2154</td>    </tr>    <tr>      <th>ShangHai</th>      <td>2424</td>    </tr>    <tr>      <th>ShenZhen</th>      <td>1303</td>    </tr>    <tr>      <th>HangZhou</th>      <td>981</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(population, columns=[<span class="string">"population"</span>])</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>population</th>    </tr>  </thead>  <tbody>    <tr>      <th>BeiJing</th>      <td>2154</td>    </tr>    <tr>      <th>ShangHai</th>      <td>2424</td>    </tr>    <tr>      <th>ShenZhen</th>      <td>1303</td>    </tr>    <tr>      <th>HangZhou</th>      <td>981</td>    </tr>  </tbody></table></div><p><strong>2、通过Series对象字典创建</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GDP_dict = &#123;<span class="string">"BeiJing"</span>: <span class="number">30320</span>,</span><br><span class="line">            <span class="string">"ShangHai"</span>: <span class="number">32680</span>,</span><br><span class="line">            <span class="string">"ShenZhen"</span>: <span class="number">24222</span>,</span><br><span class="line">            <span class="string">"HangZhou"</span>: <span class="number">13468</span> &#125;</span><br><span class="line"></span><br><span class="line">GDP = pd.Series(GDP_dict)</span><br><span class="line">GDP</span><br></pre></td></tr></table></figure><pre><code>BeiJing     30320ShangHai    32680ShenZhen    24222HangZhou    13468dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(&#123;<span class="string">"population"</span>: population,</span><br><span class="line">              <span class="string">"GDP"</span>: GDP&#125;)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>population</th>      <th>GDP</th>    </tr>  </thead>  <tbody>    <tr>      <th>BeiJing</th>      <td>2154</td>      <td>30320</td>    </tr>    <tr>      <th>ShangHai</th>      <td>2424</td>      <td>32680</td>    </tr>    <tr>      <th>ShenZhen</th>      <td>1303</td>      <td>24222</td>    </tr>    <tr>      <th>HangZhou</th>      <td>981</td>      <td>13468</td>    </tr>  </tbody></table></div><p><strong>注意：数量不够的会自动补齐</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(&#123;<span class="string">"population"</span>: population,</span><br><span class="line">              <span class="string">"GDP"</span>: GDP,</span><br><span class="line">              <span class="string">"country"</span>: <span class="string">"China"</span>&#125;)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>population</th>      <th>GDP</th>      <th>country</th>    </tr>  </thead>  <tbody>    <tr>      <th>BeiJing</th>      <td>2154</td>      <td>30320</td>      <td>China</td>    </tr>    <tr>      <th>ShangHai</th>      <td>2424</td>      <td>32680</td>      <td>China</td>    </tr>    <tr>      <th>ShenZhen</th>      <td>1303</td>      <td>24222</td>      <td>China</td>    </tr>    <tr>      <th>HangZhou</th>      <td>981</td>      <td>13468</td>      <td>China</td>    </tr>  </tbody></table></div><p><strong>3、通过字典列表对象创建</strong></p><ul><li>字典索引作为index，字典键作为columns</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = [&#123;<span class="string">"a"</span>: i, <span class="string">"b"</span>: <span class="number">2</span>*i&#125; <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>[{&#39;a&#39;: 0, &#39;b&#39;: 0}, {&#39;a&#39;: 1, &#39;b&#39;: 2}, {&#39;a&#39;: 2, &#39;b&#39;: 4}]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = pd.DataFrame(data)</span><br><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>4</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data1 = data[<span class="string">"a"</span>].copy()</span><br><span class="line">data1</span><br></pre></td></tr></table></figure><pre><code>0    01    12    2Name: a, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data1[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">data1</span><br></pre></td></tr></table></figure><pre><code>0    101     12     2Name: a, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>4</td>    </tr>  </tbody></table></div><ul><li>不存在的键，会默认值为NaN</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = [&#123;<span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"b"</span>: <span class="number">3</span>, <span class="string">"c"</span>:<span class="number">4</span>&#125;]</span><br><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>[{&#39;a&#39;: 1, &#39;b&#39;: 1}, {&#39;b&#39;: 3, &#39;c&#39;: 4}]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(data)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>1</td>      <td>NaN</td>    </tr>    <tr>      <th>1</th>      <td>NaN</td>      <td>3</td>      <td>4.0</td>    </tr>  </tbody></table></div><p><strong>4、通过Numpy二维数组创建</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = np.random.randint(<span class="number">10</span>, size=(<span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line">data</span><br></pre></td></tr></table></figure><pre><code>array([[2, 8],       [7, 7],       [4, 1]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(data, columns=[<span class="string">"foo"</span>, <span class="string">"bar"</span>], index=[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>])</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>foo</th>      <th>bar</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>2</td>      <td>8</td>    </tr>    <tr>      <th>b</th>      <td>7</td>      <td>7</td>    </tr>    <tr>      <th>c</th>      <td>4</td>      <td>1</td>    </tr>  </tbody></table></div><h2 id="12-2-DataFrame性质"><a href="#12-2-DataFrame性质" class="headerlink" title="12.2   DataFrame性质"></a>12.2   DataFrame性质</h2><p><strong>1、属性</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = pd.DataFrame(&#123;<span class="string">"pop"</span>: population, <span class="string">"GDP"</span>: GDP&#125;)</span><br><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>pop</th>      <th>GDP</th>    </tr>  </thead>  <tbody>    <tr>      <th>BeiJing</th>      <td>2154</td>      <td>30320</td>    </tr>    <tr>      <th>ShangHai</th>      <td>2424</td>      <td>32680</td>    </tr>    <tr>      <th>ShenZhen</th>      <td>1303</td>      <td>24222</td>    </tr>    <tr>      <th>HangZhou</th>      <td>981</td>      <td>13468</td>    </tr>  </tbody></table></div><p><strong>（1）df.values  返回numpy数组表示的数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.values</span><br></pre></td></tr></table></figure><pre><code>array([[ 2154, 30320],       [ 2424, 32680],       [ 1303, 24222],       [  981, 13468]], dtype=int64)</code></pre><p><strong>（2）df.index 返回行索引</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.index</span><br></pre></td></tr></table></figure><pre><code>Index([&#39;BeiJing&#39;, &#39;ShangHai&#39;, &#39;ShenZhen&#39;, &#39;HangZhou&#39;], dtype=&#39;object&#39;)</code></pre><p><strong>（3）df.columns 返回列索引</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.columns</span><br></pre></td></tr></table></figure><pre><code>Index([&#39;pop&#39;, &#39;GDP&#39;], dtype=&#39;object&#39;)</code></pre><p><strong>（4）df.shape  形状</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.shape</span><br></pre></td></tr></table></figure><pre><code>(4, 2)</code></pre><p><strong>（5） pd.size 大小</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.size</span><br></pre></td></tr></table></figure><pre><code>8</code></pre><p><strong>（6）pd.dtypes 返回每列数据类型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.dtypes</span><br></pre></td></tr></table></figure><pre><code>pop    int64GDP    int64dtype: object</code></pre><p><strong>2、索引</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>pop</th>      <th>GDP</th>    </tr>  </thead>  <tbody>    <tr>      <th>BeiJing</th>      <td>2154</td>      <td>30320</td>    </tr>    <tr>      <th>ShangHai</th>      <td>2424</td>      <td>32680</td>    </tr>    <tr>      <th>ShenZhen</th>      <td>1303</td>      <td>24222</td>    </tr>    <tr>      <th>HangZhou</th>      <td>981</td>      <td>13468</td>    </tr>  </tbody></table></div><p><strong>（1）获取列</strong></p><ul><li>字典式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">"pop"</span>]</span><br></pre></td></tr></table></figure><pre><code>BeiJing     2154ShangHai    2424ShenZhen    1303HangZhou     981Name: pop, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[[<span class="string">"GDP"</span>, <span class="string">"pop"</span>]]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>GDP</th>      <th>pop</th>    </tr>  </thead>  <tbody>    <tr>      <th>BeiJing</th>      <td>30320</td>      <td>2154</td>    </tr>    <tr>      <th>ShangHai</th>      <td>32680</td>      <td>2424</td>    </tr>    <tr>      <th>ShenZhen</th>      <td>24222</td>      <td>1303</td>    </tr>    <tr>      <th>HangZhou</th>      <td>13468</td>      <td>981</td>    </tr>  </tbody></table></div><ul><li>对象属性式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.GDP</span><br></pre></td></tr></table></figure><pre><code>BeiJing     30320ShangHai    32680ShenZhen    24222HangZhou    13468Name: GDP, dtype: int64</code></pre><p><strong>（2）获取行</strong></p><ul><li>绝对索引 df.loc</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.loc[<span class="string">"BeiJing"</span>]</span><br></pre></td></tr></table></figure><pre><code>pop     2154GDP    30320Name: BeiJing, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.loc[[<span class="string">"BeiJing"</span>, <span class="string">"HangZhou"</span>]]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>pop</th>      <th>GDP</th>    </tr>  </thead>  <tbody>    <tr>      <th>BeiJing</th>      <td>2154</td>      <td>30320</td>    </tr>    <tr>      <th>HangZhou</th>      <td>981</td>      <td>13468</td>    </tr>  </tbody></table></div><ul><li>相对索引 df.iloc</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>pop</th>      <th>GDP</th>    </tr>  </thead>  <tbody>    <tr>      <th>BeiJing</th>      <td>2154</td>      <td>30320</td>    </tr>    <tr>      <th>ShangHai</th>      <td>2424</td>      <td>32680</td>    </tr>    <tr>      <th>ShenZhen</th>      <td>1303</td>      <td>24222</td>    </tr>    <tr>      <th>HangZhou</th>      <td>981</td>      <td>13468</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.iloc[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>pop     2154GDP    30320Name: BeiJing, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.iloc[[<span class="number">1</span>, <span class="number">3</span>]]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>pop</th>      <th>GDP</th>    </tr>  </thead>  <tbody>    <tr>      <th>ShangHai</th>      <td>2424</td>      <td>32680</td>    </tr>    <tr>      <th>HangZhou</th>      <td>981</td>      <td>13468</td>    </tr>  </tbody></table></div><p><strong>（3）获取标量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>pop</th>      <th>GDP</th>    </tr>  </thead>  <tbody>    <tr>      <th>BeiJing</th>      <td>2154</td>      <td>30320</td>    </tr>    <tr>      <th>ShangHai</th>      <td>2424</td>      <td>32680</td>    </tr>    <tr>      <th>ShenZhen</th>      <td>1303</td>      <td>24222</td>    </tr>    <tr>      <th>HangZhou</th>      <td>981</td>      <td>13468</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.loc[<span class="string">"BeiJing"</span>, <span class="string">"GDP"</span>]</span><br></pre></td></tr></table></figure><pre><code>30320</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.iloc[<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>30320</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.values[<span class="number">0</span>][<span class="number">1</span>]</span><br></pre></td></tr></table></figure><pre><code>30320</code></pre><p><strong>（4）Series对象的索引</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type(data.GDP)</span><br></pre></td></tr></table></figure><pre><code>pandas.core.series.Series</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GDP</span><br></pre></td></tr></table></figure><pre><code>BeiJing     30320ShangHai    32680ShenZhen    24222HangZhou    13468dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GDP[<span class="string">"BeiJing"</span>]</span><br></pre></td></tr></table></figure><pre><code>30320</code></pre><p><strong>3、切片</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dates = pd.date_range(start=<span class="string">'2019-01-01'</span>, periods=<span class="number">6</span>)</span><br><span class="line">dates</span><br></pre></td></tr></table></figure><pre><code>DatetimeIndex([&#39;2019-01-01&#39;, &#39;2019-01-02&#39;, &#39;2019-01-03&#39;, &#39;2019-01-04&#39;,               &#39;2019-01-05&#39;, &#39;2019-01-06&#39;],              dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>), index=dates, columns=[<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>])</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>-0.216535</td>      <td>0.626769</td>      <td>-1.081884</td>      <td>2.502263</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>0.372347</td>      <td>1.171852</td>      <td>-2.133317</td>      <td>0.549048</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>-0.518353</td>      <td>0.326511</td>      <td>1.136111</td>      <td>1.728415</td>    </tr>    <tr>      <th>2019-01-04</th>      <td>0.026151</td>      <td>0.417686</td>      <td>-0.206548</td>      <td>-1.239006</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>-1.400023</td>      <td>1.556916</td>      <td>0.632606</td>      <td>0.866231</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>0.592977</td>      <td>0.424912</td>      <td>-0.809467</td>      <td>-0.167545</td>    </tr>  </tbody></table></div><p><strong>（1）行切片</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"2019-01-01"</span>: <span class="string">"2019-01-03"</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>-0.216535</td>      <td>0.626769</td>      <td>-1.081884</td>      <td>2.502263</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>0.372347</td>      <td>1.171852</td>      <td>-2.133317</td>      <td>0.549048</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>-0.518353</td>      <td>0.326511</td>      <td>1.136111</td>      <td>1.728415</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[<span class="string">"2019-01-01"</span>: <span class="string">"2019-01-03"</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>-0.216535</td>      <td>0.626769</td>      <td>-1.081884</td>      <td>2.502263</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>0.372347</td>      <td>1.171852</td>      <td>-2.133317</td>      <td>0.549048</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>-0.518353</td>      <td>0.326511</td>      <td>1.136111</td>      <td>1.728415</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[<span class="number">0</span>: <span class="number">3</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>-0.216535</td>      <td>0.626769</td>      <td>-1.081884</td>      <td>2.502263</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>0.372347</td>      <td>1.171852</td>      <td>-2.133317</td>      <td>0.549048</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>-0.518353</td>      <td>0.326511</td>      <td>1.136111</td>      <td>1.728415</td>    </tr>  </tbody></table></div><p><strong>（2）列切片</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>-0.216535</td>      <td>0.626769</td>      <td>-1.081884</td>      <td>2.502263</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>0.372347</td>      <td>1.171852</td>      <td>-2.133317</td>      <td>0.549048</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>-0.518353</td>      <td>0.326511</td>      <td>1.136111</td>      <td>1.728415</td>    </tr>    <tr>      <th>2019-01-04</th>      <td>0.026151</td>      <td>0.417686</td>      <td>-0.206548</td>      <td>-1.239006</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>-1.400023</td>      <td>1.556916</td>      <td>0.632606</td>      <td>0.866231</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>0.592977</td>      <td>0.424912</td>      <td>-0.809467</td>      <td>-0.167545</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[:, <span class="string">"A"</span>: <span class="string">"C"</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>-0.216535</td>      <td>0.626769</td>      <td>-1.081884</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>0.372347</td>      <td>1.171852</td>      <td>-2.133317</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>-0.518353</td>      <td>0.326511</td>      <td>1.136111</td>    </tr>    <tr>      <th>2019-01-04</th>      <td>0.026151</td>      <td>0.417686</td>      <td>-0.206548</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>-1.400023</td>      <td>1.556916</td>      <td>0.632606</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>0.592977</td>      <td>0.424912</td>      <td>-0.809467</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[:, <span class="number">0</span>: <span class="number">3</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>-0.216535</td>      <td>0.626769</td>      <td>-1.081884</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>0.372347</td>      <td>1.171852</td>      <td>-2.133317</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>-0.518353</td>      <td>0.326511</td>      <td>1.136111</td>    </tr>    <tr>      <th>2019-01-04</th>      <td>0.026151</td>      <td>0.417686</td>      <td>-0.206548</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>-1.400023</td>      <td>1.556916</td>      <td>0.632606</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>0.592977</td>      <td>0.424912</td>      <td>-0.809467</td>    </tr>  </tbody></table></div><p><strong>（3）多种多样的取值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>-0.216535</td>      <td>0.626769</td>      <td>-1.081884</td>      <td>2.502263</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>0.372347</td>      <td>1.171852</td>      <td>-2.133317</td>      <td>0.549048</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>-0.518353</td>      <td>0.326511</td>      <td>1.136111</td>      <td>1.728415</td>    </tr>    <tr>      <th>2019-01-04</th>      <td>0.026151</td>      <td>0.417686</td>      <td>-0.206548</td>      <td>-1.239006</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>-1.400023</td>      <td>1.556916</td>      <td>0.632606</td>      <td>0.866231</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>0.592977</td>      <td>0.424912</td>      <td>-0.809467</td>      <td>-0.167545</td>    </tr>  </tbody></table></div><ul><li>行、列同时切片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[<span class="string">"2019-01-02"</span>: <span class="string">"2019-01-03"</span>, <span class="string">"C"</span>:<span class="string">"D"</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-02</th>      <td>-2.133317</td>      <td>0.549048</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>1.136111</td>      <td>1.728415</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[<span class="number">1</span>: <span class="number">3</span>, <span class="number">2</span>:]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-02</th>      <td>-2.133317</td>      <td>0.549048</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>1.136111</td>      <td>1.728415</td>    </tr>  </tbody></table></div><ul><li>行切片，列分散取值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[<span class="string">"2019-01-04"</span>: <span class="string">"2019-01-06"</span>, [<span class="string">"A"</span>, <span class="string">"C"</span>]]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-04</th>      <td>0.026151</td>      <td>-0.206548</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>-1.400023</td>      <td>0.632606</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>0.592977</td>      <td>-0.809467</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[<span class="number">3</span>:, [<span class="number">0</span>, <span class="number">2</span>]]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-04</th>      <td>0.026151</td>      <td>-0.206548</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>-1.400023</td>      <td>0.632606</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>0.592977</td>      <td>-0.809467</td>    </tr>  </tbody></table></div><ul><li>行分散取值，列切片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[[<span class="number">1</span>, <span class="number">5</span>], <span class="number">0</span>: <span class="number">3</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-02</th>      <td>0.372347</td>      <td>1.171852</td>      <td>-2.133317</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>0.592977</td>      <td>0.424912</td>      <td>-0.809467</td>    </tr>  </tbody></table></div><ul><li>行、列均分散取值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[[<span class="number">1</span>, <span class="number">5</span>], [<span class="number">0</span>, <span class="number">3</span>]]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-02</th>      <td>0.372347</td>      <td>0.549048</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>0.592977</td>      <td>-0.167545</td>    </tr>  </tbody></table></div><p><strong>4、布尔索引</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>-0.216535</td>      <td>0.626769</td>      <td>-1.081884</td>      <td>2.502263</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>0.372347</td>      <td>1.171852</td>      <td>-2.133317</td>      <td>0.549048</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>-0.518353</td>      <td>0.326511</td>      <td>1.136111</td>      <td>1.728415</td>    </tr>    <tr>      <th>2019-01-04</th>      <td>0.026151</td>      <td>0.417686</td>      <td>-0.206548</td>      <td>-1.239006</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>-1.400023</td>      <td>1.556916</td>      <td>0.632606</td>      <td>0.866231</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>0.592977</td>      <td>0.424912</td>      <td>-0.809467</td>      <td>-0.167545</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>False</td>      <td>True</td>      <td>False</td>      <td>True</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>True</td>      <td>True</td>      <td>False</td>      <td>True</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>False</td>      <td>True</td>      <td>True</td>      <td>True</td>    </tr>    <tr>      <th>2019-01-04</th>      <td>True</td>      <td>True</td>      <td>False</td>      <td>False</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>False</td>      <td>True</td>      <td>True</td>      <td>True</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>True</td>      <td>True</td>      <td>False</td>      <td>False</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[df &gt; <span class="number">0</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>NaN</td>      <td>0.626769</td>      <td>NaN</td>      <td>2.502263</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>0.372347</td>      <td>1.171852</td>      <td>NaN</td>      <td>0.549048</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>NaN</td>      <td>0.326511</td>      <td>1.136111</td>      <td>1.728415</td>    </tr>    <tr>      <th>2019-01-04</th>      <td>0.026151</td>      <td>0.417686</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>NaN</td>      <td>1.556916</td>      <td>0.632606</td>      <td>0.866231</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>0.592977</td>      <td>0.424912</td>      <td>NaN</td>      <td>NaN</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.A &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><pre><code>2019-01-01    False2019-01-02     True2019-01-03    False2019-01-04     True2019-01-05    False2019-01-06     TrueFreq: D, Name: A, dtype: bool</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[df.A &gt; <span class="number">0</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-02</th>      <td>0.372347</td>      <td>1.171852</td>      <td>-2.133317</td>      <td>0.549048</td>    </tr>    <tr>      <th>2019-01-04</th>      <td>0.026151</td>      <td>0.417686</td>      <td>-0.206548</td>      <td>-1.239006</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>0.592977</td>      <td>0.424912</td>      <td>-0.809467</td>      <td>-0.167545</td>    </tr>  </tbody></table></div><ul><li>isin（）方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df2 = df.copy()</span><br><span class="line">df2[<span class="string">'E'</span>] = [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>, <span class="string">'three'</span>]</span><br><span class="line">df2</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>      <th>E</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>-0.216535</td>      <td>0.626769</td>      <td>-1.081884</td>      <td>2.502263</td>      <td>one</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>0.372347</td>      <td>1.171852</td>      <td>-2.133317</td>      <td>0.549048</td>      <td>one</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>-0.518353</td>      <td>0.326511</td>      <td>1.136111</td>      <td>1.728415</td>      <td>two</td>    </tr>    <tr>      <th>2019-01-04</th>      <td>0.026151</td>      <td>0.417686</td>      <td>-0.206548</td>      <td>-1.239006</td>      <td>three</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>-1.400023</td>      <td>1.556916</td>      <td>0.632606</td>      <td>0.866231</td>      <td>four</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>0.592977</td>      <td>0.424912</td>      <td>-0.809467</td>      <td>-0.167545</td>      <td>three</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ind = df2[<span class="string">"E"</span>].isin([<span class="string">"two"</span>, <span class="string">"four"</span>])</span><br><span class="line">ind</span><br></pre></td></tr></table></figure><pre><code>2019-01-01    False2019-01-02    False2019-01-03     True2019-01-04    False2019-01-05     True2019-01-06    FalseFreq: D, Name: E, dtype: bool</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2[ind]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>      <th>E</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-03</th>      <td>-0.518353</td>      <td>0.326511</td>      <td>1.136111</td>      <td>1.728415</td>      <td>two</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>-1.400023</td>      <td>1.556916</td>      <td>0.632606</td>      <td>0.866231</td>      <td>four</td>    </tr>  </tbody></table></div><p><strong>（5）赋值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>-0.216535</td>      <td>0.626769</td>      <td>-1.081884</td>      <td>2.502263</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>0.372347</td>      <td>1.171852</td>      <td>-2.133317</td>      <td>0.549048</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>-0.518353</td>      <td>0.326511</td>      <td>1.136111</td>      <td>1.728415</td>    </tr>    <tr>      <th>2019-01-04</th>      <td>0.026151</td>      <td>0.417686</td>      <td>-0.206548</td>      <td>-1.239006</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>-1.400023</td>      <td>1.556916</td>      <td>0.632606</td>      <td>0.866231</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>0.592977</td>      <td>0.424912</td>      <td>-0.809467</td>      <td>-0.167545</td>    </tr>  </tbody></table></div><ul><li>DataFrame 增加新列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], index=pd.date_range(<span class="string">'20190101'</span>, periods=<span class="number">6</span>))</span><br><span class="line">s1</span><br></pre></td></tr></table></figure><pre><code>2019-01-01    12019-01-02    22019-01-03    32019-01-04    42019-01-05    52019-01-06    6Freq: D, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"E"</span>] = s1</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>      <th>E</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>-0.216535</td>      <td>0.626769</td>      <td>-1.081884</td>      <td>2.502263</td>      <td>1</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>0.372347</td>      <td>1.171852</td>      <td>-2.133317</td>      <td>0.549048</td>      <td>2</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>-0.518353</td>      <td>0.326511</td>      <td>1.136111</td>      <td>1.728415</td>      <td>3</td>    </tr>    <tr>      <th>2019-01-04</th>      <td>0.026151</td>      <td>0.417686</td>      <td>-0.206548</td>      <td>-1.239006</td>      <td>4</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>-1.400023</td>      <td>1.556916</td>      <td>0.632606</td>      <td>0.866231</td>      <td>5</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>0.592977</td>      <td>0.424912</td>      <td>-0.809467</td>      <td>-0.167545</td>      <td>6</td>    </tr>  </tbody></table></div><ul><li>修改赋值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.loc[<span class="string">"2019-01-01"</span>, <span class="string">"A"</span>] = <span class="number">0</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>      <th>E</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>0.000000</td>      <td>0.626769</td>      <td>-1.081884</td>      <td>2.502263</td>      <td>1</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>0.372347</td>      <td>1.171852</td>      <td>-2.133317</td>      <td>0.549048</td>      <td>2</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>-0.518353</td>      <td>0.326511</td>      <td>1.136111</td>      <td>1.728415</td>      <td>3</td>    </tr>    <tr>      <th>2019-01-04</th>      <td>0.026151</td>      <td>0.417686</td>      <td>-0.206548</td>      <td>-1.239006</td>      <td>4</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>-1.400023</td>      <td>1.556916</td>      <td>0.632606</td>      <td>0.866231</td>      <td>5</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>0.592977</td>      <td>0.424912</td>      <td>-0.809467</td>      <td>-0.167545</td>      <td>6</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[<span class="number">0</span>, <span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>      <th>E</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>0.000000</td>      <td>0.000000</td>      <td>-1.081884</td>      <td>2.502263</td>      <td>1</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>0.372347</td>      <td>1.171852</td>      <td>-2.133317</td>      <td>0.549048</td>      <td>2</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>-0.518353</td>      <td>0.326511</td>      <td>1.136111</td>      <td>1.728415</td>      <td>3</td>    </tr>    <tr>      <th>2019-01-04</th>      <td>0.026151</td>      <td>0.417686</td>      <td>-0.206548</td>      <td>-1.239006</td>      <td>4</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>-1.400023</td>      <td>1.556916</td>      <td>0.632606</td>      <td>0.866231</td>      <td>5</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>0.592977</td>      <td>0.424912</td>      <td>-0.809467</td>      <td>-0.167545</td>      <td>6</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"D"</span>] = np.array([<span class="number">5</span>]*len(df))   <span class="comment"># 可简化成df["D"] = 5</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>      <th>E</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>0.000000</td>      <td>0.000000</td>      <td>-1.081884</td>      <td>5</td>      <td>1</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>0.372347</td>      <td>1.171852</td>      <td>-2.133317</td>      <td>5</td>      <td>2</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>-0.518353</td>      <td>0.326511</td>      <td>1.136111</td>      <td>5</td>      <td>3</td>    </tr>    <tr>      <th>2019-01-04</th>      <td>0.026151</td>      <td>0.417686</td>      <td>-0.206548</td>      <td>5</td>      <td>4</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>-1.400023</td>      <td>1.556916</td>      <td>0.632606</td>      <td>5</td>      <td>5</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>0.592977</td>      <td>0.424912</td>      <td>-0.809467</td>      <td>5</td>      <td>6</td>    </tr>  </tbody></table></div><ul><li>修改index和columns</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.index = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(len(df))]</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>      <th>E</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.000000</td>      <td>0.000000</td>      <td>-1.081884</td>      <td>5</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>0.372347</td>      <td>1.171852</td>      <td>-2.133317</td>      <td>5</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>-0.518353</td>      <td>0.326511</td>      <td>1.136111</td>      <td>5</td>      <td>3</td>    </tr>    <tr>      <th>3</th>      <td>0.026151</td>      <td>0.417686</td>      <td>-0.206548</td>      <td>5</td>      <td>4</td>    </tr>    <tr>      <th>4</th>      <td>-1.400023</td>      <td>1.556916</td>      <td>0.632606</td>      <td>5</td>      <td>5</td>    </tr>    <tr>      <th>5</th>      <td>0.592977</td>      <td>0.424912</td>      <td>-0.809467</td>      <td>5</td>      <td>6</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.columns = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(df.shape[<span class="number">1</span>])]</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.000000</td>      <td>0.000000</td>      <td>-1.081884</td>      <td>5</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>0.372347</td>      <td>1.171852</td>      <td>-2.133317</td>      <td>5</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>-0.518353</td>      <td>0.326511</td>      <td>1.136111</td>      <td>5</td>      <td>3</td>    </tr>    <tr>      <th>3</th>      <td>0.026151</td>      <td>0.417686</td>      <td>-0.206548</td>      <td>5</td>      <td>4</td>    </tr>    <tr>      <th>4</th>      <td>-1.400023</td>      <td>1.556916</td>      <td>0.632606</td>      <td>5</td>      <td>5</td>    </tr>    <tr>      <th>5</th>      <td>0.592977</td>      <td>0.424912</td>      <td>-0.809467</td>      <td>5</td>      <td>6</td>    </tr>  </tbody></table></div><h2 id="12-3-数值运算及统计分析"><a href="#12-3-数值运算及统计分析" class="headerlink" title="12.3 数值运算及统计分析"></a>12.3 数值运算及统计分析</h2><p><strong>1、数据的查看</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">dates = pd.date_range(start=<span class="string">'2019-01-01'</span>, periods=<span class="number">6</span>)</span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>), index=dates, columns=[<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>])</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>-0.307850</td>      <td>0.173842</td>      <td>0.289232</td>      <td>-0.760544</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>-0.031179</td>      <td>-0.347490</td>      <td>-1.262502</td>      <td>-0.275314</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>0.460746</td>      <td>0.163705</td>      <td>-2.589892</td>      <td>0.361225</td>    </tr>    <tr>      <th>2019-01-04</th>      <td>1.473358</td>      <td>0.528740</td>      <td>1.852892</td>      <td>1.119610</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>0.149465</td>      <td>0.960582</td>      <td>-0.377960</td>      <td>-0.144201</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>1.180568</td>      <td>-0.823599</td>      <td>0.424738</td>      <td>0.485841</td>    </tr>  </tbody></table></div><p><strong>（1）查看前面的行</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()    <span class="comment"># 默认5行</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>-0.307850</td>      <td>0.173842</td>      <td>0.289232</td>      <td>-0.760544</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>-0.031179</td>      <td>-0.347490</td>      <td>-1.262502</td>      <td>-0.275314</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>0.460746</td>      <td>0.163705</td>      <td>-2.589892</td>      <td>0.361225</td>    </tr>    <tr>      <th>2019-01-04</th>      <td>1.473358</td>      <td>0.528740</td>      <td>1.852892</td>      <td>1.119610</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>0.149465</td>      <td>0.960582</td>      <td>-0.377960</td>      <td>-0.144201</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>-0.307850</td>      <td>0.173842</td>      <td>0.289232</td>      <td>-0.760544</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>-0.031179</td>      <td>-0.347490</td>      <td>-1.262502</td>      <td>-0.275314</td>    </tr>  </tbody></table></div><p><strong>（2）查看后面的行</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.tail()    <span class="comment"># 默认5行</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-02</th>      <td>-0.031179</td>      <td>-0.347490</td>      <td>-1.262502</td>      <td>-0.275314</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>0.460746</td>      <td>0.163705</td>      <td>-2.589892</td>      <td>0.361225</td>    </tr>    <tr>      <th>2019-01-04</th>      <td>1.473358</td>      <td>0.528740</td>      <td>1.852892</td>      <td>1.119610</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>0.149465</td>      <td>0.960582</td>      <td>-0.377960</td>      <td>-0.144201</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>1.180568</td>      <td>-0.823599</td>      <td>0.424738</td>      <td>0.485841</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.tail(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-04</th>      <td>1.473358</td>      <td>0.528740</td>      <td>1.852892</td>      <td>1.119610</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>0.149465</td>      <td>0.960582</td>      <td>-0.377960</td>      <td>-0.144201</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>1.180568</td>      <td>-0.823599</td>      <td>0.424738</td>      <td>0.485841</td>    </tr>  </tbody></table></div><p><strong>（3）查看总体信息</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[<span class="number">0</span>, <span class="number">3</span>] = np.nan</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2019-01-01</th>      <td>-0.307850</td>      <td>0.173842</td>      <td>0.289232</td>      <td>NaN</td>    </tr>    <tr>      <th>2019-01-02</th>      <td>-0.031179</td>      <td>-0.347490</td>      <td>-1.262502</td>      <td>-0.275314</td>    </tr>    <tr>      <th>2019-01-03</th>      <td>0.460746</td>      <td>0.163705</td>      <td>-2.589892</td>      <td>0.361225</td>    </tr>    <tr>      <th>2019-01-04</th>      <td>1.473358</td>      <td>0.528740</td>      <td>1.852892</td>      <td>1.119610</td>    </tr>    <tr>      <th>2019-01-05</th>      <td>0.149465</td>      <td>0.960582</td>      <td>-0.377960</td>      <td>-0.144201</td>    </tr>    <tr>      <th>2019-01-06</th>      <td>1.180568</td>      <td>-0.823599</td>      <td>0.424738</td>      <td>0.485841</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;DatetimeIndex: 6 entries, 2019-01-01 to 2019-01-06Freq: DData columns (total 4 columns):A    6 non-null float64B    6 non-null float64C    6 non-null float64D    5 non-null float64dtypes: float64(4)memory usage: 240.0 bytes</code></pre><p><strong>2、Numpy通用函数同样适用于Pandas</strong></p><p><strong>（1）向量化运算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = pd.DataFrame(np.arange(<span class="number">4</span>).reshape(<span class="number">1</span>, <span class="number">4</span>))</span><br><span class="line">x</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>1</td>      <td>2</td>      <td>3</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x+<span class="number">5</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>5</td>      <td>6</td>      <td>7</td>      <td>8</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.exp(x)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>2.718282</td>      <td>7.389056</td>      <td>20.085537</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y = pd.DataFrame(np.arange(<span class="number">4</span>,<span class="number">8</span>).reshape(<span class="number">1</span>, <span class="number">4</span>))</span><br><span class="line">y</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>4</td>      <td>5</td>      <td>6</td>      <td>7</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x*y</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>5</td>      <td>12</td>      <td>21</td>    </tr>  </tbody></table></div><p><strong>（2）矩阵化运算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line">x = pd.DataFrame(np.random.randint(<span class="number">10</span>, size=(<span class="number">30</span>, <span class="number">30</span>)))</span><br><span class="line">x</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>      <th>5</th>      <th>6</th>      <th>7</th>      <th>8</th>      <th>9</th>      <th>...</th>      <th>20</th>      <th>21</th>      <th>22</th>      <th>23</th>      <th>24</th>      <th>25</th>      <th>26</th>      <th>27</th>      <th>28</th>      <th>29</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>6</td>      <td>3</td>      <td>7</td>      <td>4</td>      <td>6</td>      <td>9</td>      <td>2</td>      <td>6</td>      <td>7</td>      <td>4</td>      <td>...</td>      <td>4</td>      <td>0</td>      <td>9</td>      <td>5</td>      <td>8</td>      <td>0</td>      <td>9</td>      <td>2</td>      <td>6</td>      <td>3</td>    </tr>    <tr>      <th>1</th>      <td>8</td>      <td>2</td>      <td>4</td>      <td>2</td>      <td>6</td>      <td>4</td>      <td>8</td>      <td>6</td>      <td>1</td>      <td>3</td>      <td>...</td>      <td>2</td>      <td>0</td>      <td>3</td>      <td>1</td>      <td>7</td>      <td>3</td>      <td>1</td>      <td>5</td>      <td>5</td>      <td>9</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>5</td>      <td>1</td>      <td>9</td>      <td>1</td>      <td>9</td>      <td>3</td>      <td>7</td>      <td>6</td>      <td>8</td>      <td>...</td>      <td>6</td>      <td>8</td>      <td>7</td>      <td>0</td>      <td>7</td>      <td>7</td>      <td>2</td>      <td>0</td>      <td>7</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>2</td>      <td>0</td>      <td>4</td>      <td>9</td>      <td>6</td>      <td>9</td>      <td>8</td>      <td>6</td>      <td>8</td>      <td>7</td>      <td>...</td>      <td>0</td>      <td>2</td>      <td>4</td>      <td>2</td>      <td>0</td>      <td>4</td>      <td>9</td>      <td>6</td>      <td>6</td>      <td>8</td>    </tr>    <tr>      <th>4</th>      <td>9</td>      <td>9</td>      <td>2</td>      <td>6</td>      <td>0</td>      <td>3</td>      <td>3</td>      <td>4</td>      <td>6</td>      <td>6</td>      <td>...</td>      <td>9</td>      <td>6</td>      <td>8</td>      <td>6</td>      <td>0</td>      <td>0</td>      <td>8</td>      <td>8</td>      <td>3</td>      <td>8</td>    </tr>    <tr>      <th>5</th>      <td>2</td>      <td>6</td>      <td>5</td>      <td>7</td>      <td>8</td>      <td>4</td>      <td>0</td>      <td>2</td>      <td>9</td>      <td>7</td>      <td>...</td>      <td>2</td>      <td>0</td>      <td>4</td>      <td>0</td>      <td>7</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>1</td>      <td>5</td>    </tr>    <tr>      <th>6</th>      <td>6</td>      <td>4</td>      <td>0</td>      <td>0</td>      <td>2</td>      <td>1</td>      <td>4</td>      <td>9</td>      <td>5</td>      <td>6</td>      <td>...</td>      <td>5</td>      <td>0</td>      <td>8</td>      <td>5</td>      <td>2</td>      <td>3</td>      <td>3</td>      <td>2</td>      <td>9</td>      <td>2</td>    </tr>    <tr>      <th>7</th>      <td>2</td>      <td>3</td>      <td>6</td>      <td>3</td>      <td>8</td>      <td>0</td>      <td>7</td>      <td>6</td>      <td>1</td>      <td>7</td>      <td>...</td>      <td>3</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>4</td>      <td>4</td>      <td>6</td>      <td>8</td>      <td>8</td>      <td>2</td>    </tr>    <tr>      <th>8</th>      <td>2</td>      <td>2</td>      <td>3</td>      <td>7</td>      <td>5</td>      <td>7</td>      <td>0</td>      <td>7</td>      <td>3</td>      <td>0</td>      <td>...</td>      <td>1</td>      <td>1</td>      <td>5</td>      <td>2</td>      <td>8</td>      <td>3</td>      <td>0</td>      <td>3</td>      <td>0</td>      <td>4</td>    </tr>    <tr>      <th>9</th>      <td>3</td>      <td>7</td>      <td>7</td>      <td>6</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>2</td>      <td>5</td>      <td>6</td>      <td>...</td>      <td>4</td>      <td>2</td>      <td>3</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>4</td>      <td>5</td>      <td>2</td>      <td>8</td>    </tr>    <tr>      <th>10</th>      <td>4</td>      <td>7</td>      <td>0</td>      <td>4</td>      <td>2</td>      <td>0</td>      <td>3</td>      <td>4</td>      <td>6</td>      <td>0</td>      <td>...</td>      <td>5</td>      <td>6</td>      <td>1</td>      <td>9</td>      <td>1</td>      <td>9</td>      <td>0</td>      <td>7</td>      <td>0</td>      <td>8</td>    </tr>    <tr>      <th>11</th>      <td>5</td>      <td>6</td>      <td>9</td>      <td>6</td>      <td>9</td>      <td>2</td>      <td>1</td>      <td>8</td>      <td>7</td>      <td>9</td>      <td>...</td>      <td>6</td>      <td>5</td>      <td>2</td>      <td>8</td>      <td>9</td>      <td>5</td>      <td>9</td>      <td>9</td>      <td>5</td>      <td>0</td>    </tr>    <tr>      <th>12</th>      <td>3</td>      <td>9</td>      <td>5</td>      <td>5</td>      <td>4</td>      <td>0</td>      <td>7</td>      <td>4</td>      <td>4</td>      <td>6</td>      <td>...</td>      <td>0</td>      <td>7</td>      <td>2</td>      <td>9</td>      <td>6</td>      <td>9</td>      <td>4</td>      <td>9</td>      <td>4</td>      <td>6</td>    </tr>    <tr>      <th>13</th>      <td>8</td>      <td>4</td>      <td>0</td>      <td>9</td>      <td>9</td>      <td>0</td>      <td>1</td>      <td>5</td>      <td>8</td>      <td>7</td>      <td>...</td>      <td>5</td>      <td>8</td>      <td>4</td>      <td>0</td>      <td>3</td>      <td>4</td>      <td>9</td>      <td>9</td>      <td>4</td>      <td>6</td>    </tr>    <tr>      <th>14</th>      <td>3</td>      <td>0</td>      <td>4</td>      <td>6</td>      <td>9</td>      <td>9</td>      <td>5</td>      <td>4</td>      <td>3</td>      <td>1</td>      <td>...</td>      <td>6</td>      <td>1</td>      <td>0</td>      <td>3</td>      <td>7</td>      <td>1</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>2</td>    </tr>    <tr>      <th>15</th>      <td>4</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>7</td>      <td>9</td>      <td>1</td>      <td>2</td>      <td>1</td>      <td>2</td>      <td>...</td>      <td>6</td>      <td>3</td>      <td>9</td>      <td>4</td>      <td>1</td>      <td>7</td>      <td>3</td>      <td>8</td>      <td>4</td>      <td>8</td>    </tr>    <tr>      <th>16</th>      <td>3</td>      <td>9</td>      <td>4</td>      <td>8</td>      <td>7</td>      <td>2</td>      <td>0</td>      <td>2</td>      <td>3</td>      <td>1</td>      <td>...</td>      <td>8</td>      <td>0</td>      <td>0</td>      <td>3</td>      <td>8</td>      <td>5</td>      <td>2</td>      <td>0</td>      <td>3</td>      <td>8</td>    </tr>    <tr>      <th>17</th>      <td>2</td>      <td>8</td>      <td>6</td>      <td>3</td>      <td>2</td>      <td>9</td>      <td>4</td>      <td>4</td>      <td>2</td>      <td>8</td>      <td>...</td>      <td>6</td>      <td>9</td>      <td>4</td>      <td>2</td>      <td>6</td>      <td>1</td>      <td>8</td>      <td>9</td>      <td>9</td>      <td>0</td>    </tr>    <tr>      <th>18</th>      <td>5</td>      <td>6</td>      <td>7</td>      <td>9</td>      <td>8</td>      <td>1</td>      <td>9</td>      <td>1</td>      <td>4</td>      <td>4</td>      <td>...</td>      <td>3</td>      <td>5</td>      <td>2</td>      <td>5</td>      <td>6</td>      <td>9</td>      <td>9</td>      <td>2</td>      <td>6</td>      <td>2</td>    </tr>    <tr>      <th>19</th>      <td>1</td>      <td>9</td>      <td>3</td>      <td>7</td>      <td>8</td>      <td>6</td>      <td>0</td>      <td>2</td>      <td>8</td>      <td>0</td>      <td>...</td>      <td>4</td>      <td>3</td>      <td>2</td>      <td>2</td>      <td>3</td>      <td>8</td>      <td>1</td>      <td>8</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>20</th>      <td>4</td>      <td>5</td>      <td>5</td>      <td>2</td>      <td>6</td>      <td>8</td>      <td>9</td>      <td>7</td>      <td>5</td>      <td>7</td>      <td>...</td>      <td>3</td>      <td>5</td>      <td>0</td>      <td>8</td>      <td>0</td>      <td>4</td>      <td>3</td>      <td>2</td>      <td>5</td>      <td>1</td>    </tr>    <tr>      <th>21</th>      <td>2</td>      <td>4</td>      <td>8</td>      <td>1</td>      <td>9</td>      <td>7</td>      <td>1</td>      <td>4</td>      <td>6</td>      <td>7</td>      <td>...</td>      <td>0</td>      <td>1</td>      <td>8</td>      <td>2</td>      <td>0</td>      <td>4</td>      <td>6</td>      <td>5</td>      <td>0</td>      <td>4</td>    </tr>    <tr>      <th>22</th>      <td>4</td>      <td>5</td>      <td>2</td>      <td>4</td>      <td>6</td>      <td>4</td>      <td>4</td>      <td>4</td>      <td>9</td>      <td>9</td>      <td>...</td>      <td>1</td>      <td>7</td>      <td>6</td>      <td>9</td>      <td>9</td>      <td>1</td>      <td>5</td>      <td>5</td>      <td>2</td>      <td>1</td>    </tr>    <tr>      <th>23</th>      <td>0</td>      <td>5</td>      <td>4</td>      <td>8</td>      <td>0</td>      <td>6</td>      <td>4</td>      <td>4</td>      <td>1</td>      <td>2</td>      <td>...</td>      <td>8</td>      <td>5</td>      <td>0</td>      <td>7</td>      <td>6</td>      <td>9</td>      <td>2</td>      <td>0</td>      <td>4</td>      <td>3</td>    </tr>    <tr>      <th>24</th>      <td>9</td>      <td>7</td>      <td>0</td>      <td>9</td>      <td>0</td>      <td>3</td>      <td>7</td>      <td>4</td>      <td>1</td>      <td>5</td>      <td>...</td>      <td>3</td>      <td>7</td>      <td>8</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>9</td>      <td>2</td>      <td>2</td>      <td>4</td>    </tr>    <tr>      <th>25</th>      <td>4</td>      <td>1</td>      <td>9</td>      <td>5</td>      <td>4</td>      <td>5</td>      <td>0</td>      <td>4</td>      <td>8</td>      <td>9</td>      <td>...</td>      <td>9</td>      <td>3</td>      <td>0</td>      <td>7</td>      <td>0</td>      <td>2</td>      <td>3</td>      <td>7</td>      <td>5</td>      <td>9</td>    </tr>    <tr>      <th>26</th>      <td>6</td>      <td>7</td>      <td>1</td>      <td>9</td>      <td>7</td>      <td>2</td>      <td>6</td>      <td>2</td>      <td>6</td>      <td>1</td>      <td>...</td>      <td>0</td>      <td>6</td>      <td>5</td>      <td>9</td>      <td>8</td>      <td>0</td>      <td>3</td>      <td>8</td>      <td>3</td>      <td>9</td>    </tr>    <tr>      <th>27</th>      <td>2</td>      <td>8</td>      <td>1</td>      <td>3</td>      <td>5</td>      <td>1</td>      <td>7</td>      <td>7</td>      <td>0</td>      <td>2</td>      <td>...</td>      <td>8</td>      <td>0</td>      <td>4</td>      <td>5</td>      <td>4</td>      <td>5</td>      <td>5</td>      <td>6</td>      <td>3</td>      <td>7</td>    </tr>    <tr>      <th>28</th>      <td>6</td>      <td>8</td>      <td>6</td>      <td>2</td>      <td>2</td>      <td>7</td>      <td>4</td>      <td>3</td>      <td>7</td>      <td>5</td>      <td>...</td>      <td>1</td>      <td>7</td>      <td>9</td>      <td>2</td>      <td>4</td>      <td>5</td>      <td>9</td>      <td>5</td>      <td>3</td>      <td>2</td>    </tr>    <tr>      <th>29</th>      <td>3</td>      <td>0</td>      <td>3</td>      <td>0</td>      <td>0</td>      <td>9</td>      <td>5</td>      <td>4</td>      <td>3</td>      <td>2</td>      <td>...</td>      <td>1</td>      <td>3</td>      <td>0</td>      <td>4</td>      <td>8</td>      <td>0</td>      <td>8</td>      <td>7</td>      <td>5</td>      <td>6</td>    </tr>  </tbody></table><p>30 rows × 30 columns</p></div><ul><li>转置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">z = x.T</span><br><span class="line">z</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>      <th>5</th>      <th>6</th>      <th>7</th>      <th>8</th>      <th>9</th>      <th>...</th>      <th>20</th>      <th>21</th>      <th>22</th>      <th>23</th>      <th>24</th>      <th>25</th>      <th>26</th>      <th>27</th>      <th>28</th>      <th>29</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>6</td>      <td>8</td>      <td>3</td>      <td>2</td>      <td>9</td>      <td>2</td>      <td>6</td>      <td>2</td>      <td>2</td>      <td>3</td>      <td>...</td>      <td>4</td>      <td>2</td>      <td>4</td>      <td>0</td>      <td>9</td>      <td>4</td>      <td>6</td>      <td>2</td>      <td>6</td>      <td>3</td>    </tr>    <tr>      <th>1</th>      <td>3</td>      <td>2</td>      <td>5</td>      <td>0</td>      <td>9</td>      <td>6</td>      <td>4</td>      <td>3</td>      <td>2</td>      <td>7</td>      <td>...</td>      <td>5</td>      <td>4</td>      <td>5</td>      <td>5</td>      <td>7</td>      <td>1</td>      <td>7</td>      <td>8</td>      <td>8</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>7</td>      <td>4</td>      <td>1</td>      <td>4</td>      <td>2</td>      <td>5</td>      <td>0</td>      <td>6</td>      <td>3</td>      <td>7</td>      <td>...</td>      <td>5</td>      <td>8</td>      <td>2</td>      <td>4</td>      <td>0</td>      <td>9</td>      <td>1</td>      <td>1</td>      <td>6</td>      <td>3</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>2</td>      <td>9</td>      <td>9</td>      <td>6</td>      <td>7</td>      <td>0</td>      <td>3</td>      <td>7</td>      <td>6</td>      <td>...</td>      <td>2</td>      <td>1</td>      <td>4</td>      <td>8</td>      <td>9</td>      <td>5</td>      <td>9</td>      <td>3</td>      <td>2</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>6</td>      <td>6</td>      <td>1</td>      <td>6</td>      <td>0</td>      <td>8</td>      <td>2</td>      <td>8</td>      <td>5</td>      <td>2</td>      <td>...</td>      <td>6</td>      <td>9</td>      <td>6</td>      <td>0</td>      <td>0</td>      <td>4</td>      <td>7</td>      <td>5</td>      <td>2</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>9</td>      <td>4</td>      <td>9</td>      <td>9</td>      <td>3</td>      <td>4</td>      <td>1</td>      <td>0</td>      <td>7</td>      <td>0</td>      <td>...</td>      <td>8</td>      <td>7</td>      <td>4</td>      <td>6</td>      <td>3</td>      <td>5</td>      <td>2</td>      <td>1</td>      <td>7</td>      <td>9</td>    </tr>    <tr>      <th>6</th>      <td>2</td>      <td>8</td>      <td>3</td>      <td>8</td>      <td>3</td>      <td>0</td>      <td>4</td>      <td>7</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>9</td>      <td>1</td>      <td>4</td>      <td>4</td>      <td>7</td>      <td>0</td>      <td>6</td>      <td>7</td>      <td>4</td>      <td>5</td>    </tr>    <tr>      <th>7</th>      <td>6</td>      <td>6</td>      <td>7</td>      <td>6</td>      <td>4</td>      <td>2</td>      <td>9</td>      <td>6</td>      <td>7</td>      <td>2</td>      <td>...</td>      <td>7</td>      <td>4</td>      <td>4</td>      <td>4</td>      <td>4</td>      <td>4</td>      <td>2</td>      <td>7</td>      <td>3</td>      <td>4</td>    </tr>    <tr>      <th>8</th>      <td>7</td>      <td>1</td>      <td>6</td>      <td>8</td>      <td>6</td>      <td>9</td>      <td>5</td>      <td>1</td>      <td>3</td>      <td>5</td>      <td>...</td>      <td>5</td>      <td>6</td>      <td>9</td>      <td>1</td>      <td>1</td>      <td>8</td>      <td>6</td>      <td>0</td>      <td>7</td>      <td>3</td>    </tr>    <tr>      <th>9</th>      <td>4</td>      <td>3</td>      <td>8</td>      <td>7</td>      <td>6</td>      <td>7</td>      <td>6</td>      <td>7</td>      <td>0</td>      <td>6</td>      <td>...</td>      <td>7</td>      <td>7</td>      <td>9</td>      <td>2</td>      <td>5</td>      <td>9</td>      <td>1</td>      <td>2</td>      <td>5</td>      <td>2</td>    </tr>    <tr>      <th>10</th>      <td>3</td>      <td>8</td>      <td>7</td>      <td>1</td>      <td>3</td>      <td>5</td>      <td>3</td>      <td>0</td>      <td>7</td>      <td>5</td>      <td>...</td>      <td>4</td>      <td>0</td>      <td>2</td>      <td>6</td>      <td>4</td>      <td>1</td>      <td>9</td>      <td>9</td>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>11</th>      <td>7</td>      <td>1</td>      <td>4</td>      <td>0</td>      <td>6</td>      <td>7</td>      <td>6</td>      <td>8</td>      <td>3</td>      <td>5</td>      <td>...</td>      <td>7</td>      <td>5</td>      <td>0</td>      <td>5</td>      <td>1</td>      <td>0</td>      <td>5</td>      <td>8</td>      <td>3</td>      <td>5</td>    </tr>    <tr>      <th>12</th>      <td>7</td>      <td>9</td>      <td>1</td>      <td>6</td>      <td>2</td>      <td>8</td>      <td>7</td>      <td>8</td>      <td>5</td>      <td>5</td>      <td>...</td>      <td>9</td>      <td>0</td>      <td>4</td>      <td>1</td>      <td>2</td>      <td>9</td>      <td>2</td>      <td>4</td>      <td>3</td>      <td>1</td>    </tr>    <tr>      <th>13</th>      <td>2</td>      <td>8</td>      <td>4</td>      <td>6</td>      <td>5</td>      <td>3</td>      <td>0</td>      <td>1</td>      <td>7</td>      <td>2</td>      <td>...</td>      <td>3</td>      <td>1</td>      <td>8</td>      <td>5</td>      <td>8</td>      <td>8</td>      <td>2</td>      <td>5</td>      <td>5</td>      <td>7</td>    </tr>    <tr>      <th>14</th>      <td>5</td>      <td>9</td>      <td>7</td>      <td>7</td>      <td>1</td>      <td>0</td>      <td>5</td>      <td>6</td>      <td>3</td>      <td>5</td>      <td>...</td>      <td>9</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>6</td>      <td>9</td>      <td>8</td>      <td>3</td>      <td>5</td>      <td>9</td>    </tr>    <tr>      <th>15</th>      <td>4</td>      <td>4</td>      <td>9</td>      <td>4</td>      <td>9</td>      <td>0</td>      <td>7</td>      <td>9</td>      <td>2</td>      <td>7</td>      <td>...</td>      <td>7</td>      <td>4</td>      <td>2</td>      <td>1</td>      <td>6</td>      <td>8</td>      <td>6</td>      <td>9</td>      <td>0</td>      <td>4</td>    </tr>    <tr>      <th>16</th>      <td>1</td>      <td>1</td>      <td>8</td>      <td>2</td>      <td>8</td>      <td>9</td>      <td>4</td>      <td>2</td>      <td>8</td>      <td>1</td>      <td>...</td>      <td>9</td>      <td>9</td>      <td>3</td>      <td>1</td>      <td>5</td>      <td>8</td>      <td>4</td>      <td>1</td>      <td>7</td>      <td>6</td>    </tr>    <tr>      <th>17</th>      <td>7</td>      <td>3</td>      <td>8</td>      <td>7</td>      <td>4</td>      <td>3</td>      <td>3</td>      <td>6</td>      <td>2</td>      <td>4</td>      <td>...</td>      <td>1</td>      <td>8</td>      <td>0</td>      <td>2</td>      <td>7</td>      <td>5</td>      <td>9</td>      <td>7</td>      <td>5</td>      <td>9</td>    </tr>    <tr>      <th>18</th>      <td>5</td>      <td>6</td>      <td>0</td>      <td>5</td>      <td>5</td>      <td>6</td>      <td>1</td>      <td>9</td>      <td>8</td>      <td>0</td>      <td>...</td>      <td>4</td>      <td>5</td>      <td>0</td>      <td>1</td>      <td>3</td>      <td>7</td>      <td>6</td>      <td>5</td>      <td>2</td>      <td>1</td>    </tr>    <tr>      <th>19</th>      <td>1</td>      <td>7</td>      <td>8</td>      <td>2</td>      <td>3</td>      <td>1</td>      <td>5</td>      <td>8</td>      <td>1</td>      <td>0</td>      <td>...</td>      <td>8</td>      <td>0</td>      <td>7</td>      <td>3</td>      <td>7</td>      <td>0</td>      <td>8</td>      <td>4</td>      <td>8</td>      <td>7</td>    </tr>    <tr>      <th>20</th>      <td>4</td>      <td>2</td>      <td>6</td>      <td>0</td>      <td>9</td>      <td>2</td>      <td>5</td>      <td>3</td>      <td>1</td>      <td>4</td>      <td>...</td>      <td>3</td>      <td>0</td>      <td>1</td>      <td>8</td>      <td>3</td>      <td>9</td>      <td>0</td>      <td>8</td>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>21</th>      <td>0</td>      <td>0</td>      <td>8</td>      <td>2</td>      <td>6</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>2</td>      <td>...</td>      <td>5</td>      <td>1</td>      <td>7</td>      <td>5</td>      <td>7</td>      <td>3</td>      <td>6</td>      <td>0</td>      <td>7</td>      <td>3</td>    </tr>    <tr>      <th>22</th>      <td>9</td>      <td>3</td>      <td>7</td>      <td>4</td>      <td>8</td>      <td>4</td>      <td>8</td>      <td>1</td>      <td>5</td>      <td>3</td>      <td>...</td>      <td>0</td>      <td>8</td>      <td>6</td>      <td>0</td>      <td>8</td>      <td>0</td>      <td>5</td>      <td>4</td>      <td>9</td>      <td>0</td>    </tr>    <tr>      <th>23</th>      <td>5</td>      <td>1</td>      <td>0</td>      <td>2</td>      <td>6</td>      <td>0</td>      <td>5</td>      <td>0</td>      <td>2</td>      <td>2</td>      <td>...</td>      <td>8</td>      <td>2</td>      <td>9</td>      <td>7</td>      <td>2</td>      <td>7</td>      <td>9</td>      <td>5</td>      <td>2</td>      <td>4</td>    </tr>    <tr>      <th>24</th>      <td>8</td>      <td>7</td>      <td>7</td>      <td>0</td>      <td>0</td>      <td>7</td>      <td>2</td>      <td>4</td>      <td>8</td>      <td>0</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>9</td>      <td>6</td>      <td>2</td>      <td>0</td>      <td>8</td>      <td>4</td>      <td>4</td>      <td>8</td>    </tr>    <tr>      <th>25</th>      <td>0</td>      <td>3</td>      <td>7</td>      <td>4</td>      <td>0</td>      <td>0</td>      <td>3</td>      <td>4</td>      <td>3</td>      <td>0</td>      <td>...</td>      <td>4</td>      <td>4</td>      <td>1</td>      <td>9</td>      <td>1</td>      <td>2</td>      <td>0</td>      <td>5</td>      <td>5</td>      <td>0</td>    </tr>    <tr>      <th>26</th>      <td>9</td>      <td>1</td>      <td>2</td>      <td>9</td>      <td>8</td>      <td>0</td>      <td>3</td>      <td>6</td>      <td>0</td>      <td>4</td>      <td>...</td>      <td>3</td>      <td>6</td>      <td>5</td>      <td>2</td>      <td>9</td>      <td>3</td>      <td>3</td>      <td>5</td>      <td>9</td>      <td>8</td>    </tr>    <tr>      <th>27</th>      <td>2</td>      <td>5</td>      <td>0</td>      <td>6</td>      <td>8</td>      <td>1</td>      <td>2</td>      <td>8</td>      <td>3</td>      <td>5</td>      <td>...</td>      <td>2</td>      <td>5</td>      <td>5</td>      <td>0</td>      <td>2</td>      <td>7</td>      <td>8</td>      <td>6</td>      <td>5</td>      <td>7</td>    </tr>    <tr>      <th>28</th>      <td>6</td>      <td>5</td>      <td>7</td>      <td>6</td>      <td>3</td>      <td>1</td>      <td>9</td>      <td>8</td>      <td>0</td>      <td>2</td>      <td>...</td>      <td>5</td>      <td>0</td>      <td>2</td>      <td>4</td>      <td>2</td>      <td>5</td>      <td>3</td>      <td>3</td>      <td>3</td>      <td>5</td>    </tr>    <tr>      <th>29</th>      <td>3</td>      <td>9</td>      <td>2</td>      <td>8</td>      <td>8</td>      <td>5</td>      <td>2</td>      <td>2</td>      <td>4</td>      <td>8</td>      <td>...</td>      <td>1</td>      <td>4</td>      <td>1</td>      <td>3</td>      <td>4</td>      <td>9</td>      <td>9</td>      <td>7</td>      <td>2</td>      <td>6</td>    </tr>  </tbody></table><p>30 rows × 30 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">y = pd.DataFrame(np.random.randint(<span class="number">10</span>, size=(<span class="number">30</span>, <span class="number">30</span>)))</span><br><span class="line">y</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>      <th>5</th>      <th>6</th>      <th>7</th>      <th>8</th>      <th>9</th>      <th>...</th>      <th>20</th>      <th>21</th>      <th>22</th>      <th>23</th>      <th>24</th>      <th>25</th>      <th>26</th>      <th>27</th>      <th>28</th>      <th>29</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>5</td>      <td>8</td>      <td>9</td>      <td>5</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>7</td>      <td>6</td>      <td>9</td>      <td>...</td>      <td>1</td>      <td>7</td>      <td>0</td>      <td>6</td>      <td>9</td>      <td>9</td>      <td>7</td>      <td>6</td>      <td>9</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>0</td>      <td>1</td>      <td>8</td>      <td>8</td>      <td>3</td>      <td>9</td>      <td>8</td>      <td>7</td>      <td>3</td>      <td>6</td>      <td>...</td>      <td>9</td>      <td>2</td>      <td>0</td>      <td>4</td>      <td>9</td>      <td>2</td>      <td>7</td>      <td>7</td>      <td>9</td>      <td>8</td>    </tr>    <tr>      <th>2</th>      <td>6</td>      <td>9</td>      <td>3</td>      <td>7</td>      <td>7</td>      <td>4</td>      <td>5</td>      <td>9</td>      <td>3</td>      <td>6</td>      <td>...</td>      <td>7</td>      <td>7</td>      <td>1</td>      <td>1</td>      <td>3</td>      <td>0</td>      <td>8</td>      <td>6</td>      <td>4</td>      <td>5</td>    </tr>    <tr>      <th>3</th>      <td>6</td>      <td>2</td>      <td>5</td>      <td>7</td>      <td>8</td>      <td>4</td>      <td>4</td>      <td>7</td>      <td>7</td>      <td>4</td>      <td>...</td>      <td>0</td>      <td>1</td>      <td>9</td>      <td>8</td>      <td>2</td>      <td>3</td>      <td>1</td>      <td>2</td>      <td>7</td>      <td>2</td>    </tr>    <tr>      <th>4</th>      <td>6</td>      <td>0</td>      <td>9</td>      <td>2</td>      <td>6</td>      <td>6</td>      <td>2</td>      <td>7</td>      <td>7</td>      <td>0</td>      <td>...</td>      <td>1</td>      <td>5</td>      <td>4</td>      <td>0</td>      <td>7</td>      <td>8</td>      <td>9</td>      <td>5</td>      <td>7</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>9</td>      <td>3</td>      <td>9</td>      <td>1</td>      <td>4</td>      <td>4</td>      <td>6</td>      <td>8</td>      <td>8</td>      <td>9</td>      <td>...</td>      <td>1</td>      <td>8</td>      <td>7</td>      <td>0</td>      <td>3</td>      <td>4</td>      <td>2</td>      <td>0</td>      <td>3</td>      <td>5</td>    </tr>    <tr>      <th>6</th>      <td>1</td>      <td>2</td>      <td>4</td>      <td>3</td>      <td>0</td>      <td>6</td>      <td>0</td>      <td>7</td>      <td>2</td>      <td>8</td>      <td>...</td>      <td>4</td>      <td>3</td>      <td>3</td>      <td>6</td>      <td>7</td>      <td>3</td>      <td>5</td>      <td>3</td>      <td>2</td>      <td>4</td>    </tr>    <tr>      <th>7</th>      <td>4</td>      <td>0</td>      <td>3</td>      <td>3</td>      <td>8</td>      <td>3</td>      <td>5</td>      <td>6</td>      <td>7</td>      <td>5</td>      <td>...</td>      <td>1</td>      <td>7</td>      <td>3</td>      <td>1</td>      <td>6</td>      <td>6</td>      <td>9</td>      <td>6</td>      <td>9</td>      <td>6</td>    </tr>    <tr>      <th>8</th>      <td>0</td>      <td>0</td>      <td>2</td>      <td>9</td>      <td>6</td>      <td>0</td>      <td>6</td>      <td>7</td>      <td>0</td>      <td>3</td>      <td>...</td>      <td>6</td>      <td>7</td>      <td>9</td>      <td>5</td>      <td>4</td>      <td>9</td>      <td>5</td>      <td>2</td>      <td>5</td>      <td>6</td>    </tr>    <tr>      <th>9</th>      <td>6</td>      <td>8</td>      <td>7</td>      <td>7</td>      <td>7</td>      <td>2</td>      <td>6</td>      <td>0</td>      <td>5</td>      <td>2</td>      <td>...</td>      <td>7</td>      <td>0</td>      <td>6</td>      <td>2</td>      <td>4</td>      <td>3</td>      <td>6</td>      <td>7</td>      <td>6</td>      <td>3</td>    </tr>    <tr>      <th>10</th>      <td>0</td>      <td>6</td>      <td>4</td>      <td>7</td>      <td>6</td>      <td>2</td>      <td>9</td>      <td>5</td>      <td>9</td>      <td>9</td>      <td>...</td>      <td>4</td>      <td>9</td>      <td>3</td>      <td>9</td>      <td>1</td>      <td>2</td>      <td>5</td>      <td>4</td>      <td>0</td>      <td>8</td>    </tr>    <tr>      <th>11</th>      <td>2</td>      <td>3</td>      <td>9</td>      <td>9</td>      <td>4</td>      <td>4</td>      <td>8</td>      <td>2</td>      <td>1</td>      <td>6</td>      <td>...</td>      <td>0</td>      <td>5</td>      <td>9</td>      <td>8</td>      <td>6</td>      <td>6</td>      <td>0</td>      <td>4</td>      <td>7</td>      <td>3</td>    </tr>    <tr>      <th>12</th>      <td>0</td>      <td>1</td>      <td>6</td>      <td>0</td>      <td>6</td>      <td>1</td>      <td>6</td>      <td>4</td>      <td>2</td>      <td>5</td>      <td>...</td>      <td>8</td>      <td>8</td>      <td>0</td>      <td>7</td>      <td>2</td>      <td>0</td>      <td>7</td>      <td>1</td>      <td>1</td>      <td>9</td>    </tr>    <tr>      <th>13</th>      <td>5</td>      <td>1</td>      <td>5</td>      <td>9</td>      <td>6</td>      <td>4</td>      <td>9</td>      <td>8</td>      <td>7</td>      <td>5</td>      <td>...</td>      <td>2</td>      <td>4</td>      <td>3</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>4</td>      <td>2</td>      <td>5</td>      <td>0</td>    </tr>    <tr>      <th>14</th>      <td>0</td>      <td>3</td>      <td>8</td>      <td>5</td>      <td>3</td>      <td>1</td>      <td>4</td>      <td>7</td>      <td>3</td>      <td>2</td>      <td>...</td>      <td>8</td>      <td>5</td>      <td>5</td>      <td>7</td>      <td>5</td>      <td>9</td>      <td>1</td>      <td>3</td>      <td>9</td>      <td>3</td>    </tr>    <tr>      <th>15</th>      <td>3</td>      <td>3</td>      <td>6</td>      <td>1</td>      <td>3</td>      <td>0</td>      <td>5</td>      <td>0</td>      <td>5</td>      <td>2</td>      <td>...</td>      <td>7</td>      <td>1</td>      <td>7</td>      <td>7</td>      <td>3</td>      <td>8</td>      <td>3</td>      <td>0</td>      <td>6</td>      <td>3</td>    </tr>    <tr>      <th>16</th>      <td>0</td>      <td>6</td>      <td>5</td>      <td>9</td>      <td>6</td>      <td>4</td>      <td>6</td>      <td>6</td>      <td>2</td>      <td>2</td>      <td>...</td>      <td>3</td>      <td>6</td>      <td>8</td>      <td>6</td>      <td>5</td>      <td>1</td>      <td>3</td>      <td>2</td>      <td>6</td>      <td>3</td>    </tr>    <tr>      <th>17</th>      <td>6</td>      <td>7</td>      <td>2</td>      <td>8</td>      <td>0</td>      <td>1</td>      <td>8</td>      <td>6</td>      <td>0</td>      <td>0</td>      <td>...</td>      <td>5</td>      <td>6</td>      <td>2</td>      <td>5</td>      <td>4</td>      <td>3</td>      <td>0</td>      <td>6</td>      <td>2</td>      <td>1</td>    </tr>    <tr>      <th>18</th>      <td>9</td>      <td>4</td>      <td>4</td>      <td>0</td>      <td>9</td>      <td>8</td>      <td>7</td>      <td>7</td>      <td>6</td>      <td>1</td>      <td>...</td>      <td>7</td>      <td>9</td>      <td>9</td>      <td>7</td>      <td>1</td>      <td>1</td>      <td>4</td>      <td>6</td>      <td>5</td>      <td>6</td>    </tr>    <tr>      <th>19</th>      <td>4</td>      <td>1</td>      <td>1</td>      <td>5</td>      <td>1</td>      <td>2</td>      <td>6</td>      <td>2</td>      <td>3</td>      <td>3</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>9</td>      <td>8</td>      <td>5</td>      <td>9</td>      <td>3</td>      <td>4</td>      <td>0</td>    </tr>    <tr>      <th>20</th>      <td>9</td>      <td>8</td>      <td>6</td>      <td>3</td>      <td>9</td>      <td>9</td>      <td>0</td>      <td>8</td>      <td>1</td>      <td>6</td>      <td>...</td>      <td>2</td>      <td>9</td>      <td>0</td>      <td>1</td>      <td>3</td>      <td>9</td>      <td>4</td>      <td>8</td>      <td>8</td>      <td>8</td>    </tr>    <tr>      <th>21</th>      <td>2</td>      <td>8</td>      <td>6</td>      <td>4</td>      <td>9</td>      <td>0</td>      <td>5</td>      <td>5</td>      <td>6</td>      <td>1</td>      <td>...</td>      <td>6</td>      <td>7</td>      <td>5</td>      <td>6</td>      <td>8</td>      <td>7</td>      <td>4</td>      <td>2</td>      <td>4</td>      <td>0</td>    </tr>    <tr>      <th>22</th>      <td>0</td>      <td>3</td>      <td>5</td>      <td>9</td>      <td>0</td>      <td>3</td>      <td>6</td>      <td>5</td>      <td>1</td>      <td>1</td>      <td>...</td>      <td>6</td>      <td>2</td>      <td>5</td>      <td>3</td>      <td>9</td>      <td>3</td>      <td>9</td>      <td>5</td>      <td>1</td>      <td>9</td>    </tr>    <tr>      <th>23</th>      <td>7</td>      <td>7</td>      <td>0</td>      <td>8</td>      <td>6</td>      <td>1</td>      <td>2</td>      <td>0</td>      <td>4</td>      <td>4</td>      <td>...</td>      <td>1</td>      <td>9</td>      <td>6</td>      <td>0</td>      <td>2</td>      <td>8</td>      <td>3</td>      <td>7</td>      <td>2</td>      <td>5</td>    </tr>    <tr>      <th>24</th>      <td>6</td>      <td>0</td>      <td>4</td>      <td>2</td>      <td>3</td>      <td>1</td>      <td>0</td>      <td>5</td>      <td>7</td>      <td>0</td>      <td>...</td>      <td>1</td>      <td>1</td>      <td>2</td>      <td>7</td>      <td>5</td>      <td>2</td>      <td>9</td>      <td>4</td>      <td>7</td>      <td>3</td>    </tr>    <tr>      <th>25</th>      <td>5</td>      <td>0</td>      <td>2</td>      <td>1</td>      <td>4</td>      <td>9</td>      <td>4</td>      <td>6</td>      <td>9</td>      <td>3</td>      <td>...</td>      <td>5</td>      <td>5</td>      <td>3</td>      <td>5</td>      <td>9</td>      <td>2</td>      <td>7</td>      <td>4</td>      <td>1</td>      <td>6</td>    </tr>    <tr>      <th>26</th>      <td>9</td>      <td>8</td>      <td>1</td>      <td>8</td>      <td>1</td>      <td>6</td>      <td>2</td>      <td>6</td>      <td>1</td>      <td>8</td>      <td>...</td>      <td>2</td>      <td>5</td>      <td>1</td>      <td>2</td>      <td>5</td>      <td>3</td>      <td>3</td>      <td>6</td>      <td>1</td>      <td>8</td>    </tr>    <tr>      <th>27</th>      <td>1</td>      <td>8</td>      <td>6</td>      <td>4</td>      <td>6</td>      <td>9</td>      <td>5</td>      <td>4</td>      <td>7</td>      <td>2</td>      <td>...</td>      <td>9</td>      <td>3</td>      <td>1</td>      <td>5</td>      <td>1</td>      <td>1</td>      <td>7</td>      <td>1</td>      <td>2</td>      <td>6</td>    </tr>    <tr>      <th>28</th>      <td>0</td>      <td>7</td>      <td>7</td>      <td>4</td>      <td>3</td>      <td>2</td>      <td>7</td>      <td>8</td>      <td>5</td>      <td>2</td>      <td>...</td>      <td>0</td>      <td>2</td>      <td>8</td>      <td>3</td>      <td>7</td>      <td>3</td>      <td>9</td>      <td>2</td>      <td>3</td>      <td>8</td>    </tr>    <tr>      <th>29</th>      <td>8</td>      <td>0</td>      <td>2</td>      <td>6</td>      <td>8</td>      <td>3</td>      <td>6</td>      <td>4</td>      <td>9</td>      <td>7</td>      <td>...</td>      <td>6</td>      <td>7</td>      <td>8</td>      <td>5</td>      <td>7</td>      <td>2</td>      <td>5</td>      <td>3</td>      <td>4</td>      <td>5</td>    </tr>  </tbody></table><p>30 rows × 30 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.dot(y)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>      <th>5</th>      <th>6</th>      <th>7</th>      <th>8</th>      <th>9</th>      <th>...</th>      <th>20</th>      <th>21</th>      <th>22</th>      <th>23</th>      <th>24</th>      <th>25</th>      <th>26</th>      <th>27</th>      <th>28</th>      <th>29</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>616</td>      <td>560</td>      <td>723</td>      <td>739</td>      <td>612</td>      <td>457</td>      <td>681</td>      <td>799</td>      <td>575</td>      <td>590</td>      <td>...</td>      <td>523</td>      <td>739</td>      <td>613</td>      <td>580</td>      <td>668</td>      <td>602</td>      <td>733</td>      <td>585</td>      <td>657</td>      <td>700</td>    </tr>    <tr>      <th>1</th>      <td>520</td>      <td>438</td>      <td>691</td>      <td>600</td>      <td>612</td>      <td>455</td>      <td>666</td>      <td>764</td>      <td>707</td>      <td>592</td>      <td>...</td>      <td>555</td>      <td>681</td>      <td>503</td>      <td>679</td>      <td>641</td>      <td>506</td>      <td>779</td>      <td>494</td>      <td>633</td>      <td>590</td>    </tr>    <tr>      <th>2</th>      <td>557</td>      <td>570</td>      <td>786</td>      <td>807</td>      <td>690</td>      <td>469</td>      <td>804</td>      <td>828</td>      <td>704</td>      <td>573</td>      <td>...</td>      <td>563</td>      <td>675</td>      <td>712</td>      <td>758</td>      <td>793</td>      <td>672</td>      <td>754</td>      <td>550</td>      <td>756</td>      <td>638</td>    </tr>    <tr>      <th>3</th>      <td>605</td>      <td>507</td>      <td>664</td>      <td>701</td>      <td>660</td>      <td>496</td>      <td>698</td>      <td>806</td>      <td>651</td>      <td>575</td>      <td>...</td>      <td>582</td>      <td>685</td>      <td>668</td>      <td>586</td>      <td>629</td>      <td>534</td>      <td>678</td>      <td>484</td>      <td>591</td>      <td>626</td>    </tr>    <tr>      <th>4</th>      <td>599</td>      <td>681</td>      <td>753</td>      <td>873</td>      <td>721</td>      <td>563</td>      <td>754</td>      <td>770</td>      <td>620</td>      <td>654</td>      <td>...</td>      <td>633</td>      <td>747</td>      <td>661</td>      <td>677</td>      <td>726</td>      <td>649</td>      <td>716</td>      <td>610</td>      <td>735</td>      <td>706</td>    </tr>    <tr>      <th>5</th>      <td>422</td>      <td>354</td>      <td>602</td>      <td>627</td>      <td>613</td>      <td>396</td>      <td>617</td>      <td>627</td>      <td>489</td>      <td>423</td>      <td>...</td>      <td>456</td>      <td>572</td>      <td>559</td>      <td>537</td>      <td>499</td>      <td>384</td>      <td>589</td>      <td>436</td>      <td>574</td>      <td>507</td>    </tr>    <tr>      <th>6</th>      <td>359</td>      <td>446</td>      <td>599</td>      <td>599</td>      <td>481</td>      <td>357</td>      <td>577</td>      <td>572</td>      <td>451</td>      <td>464</td>      <td>...</td>      <td>449</td>      <td>550</td>      <td>495</td>      <td>532</td>      <td>633</td>      <td>554</td>      <td>663</td>      <td>476</td>      <td>565</td>      <td>602</td>    </tr>    <tr>      <th>7</th>      <td>531</td>      <td>520</td>      <td>698</td>      <td>590</td>      <td>607</td>      <td>537</td>      <td>665</td>      <td>696</td>      <td>571</td>      <td>472</td>      <td>...</td>      <td>576</td>      <td>588</td>      <td>551</td>      <td>665</td>      <td>652</td>      <td>527</td>      <td>742</td>      <td>528</td>      <td>650</td>      <td>599</td>    </tr>    <tr>      <th>8</th>      <td>449</td>      <td>322</td>      <td>547</td>      <td>533</td>      <td>593</td>      <td>399</td>      <td>584</td>      <td>638</td>      <td>587</td>      <td>424</td>      <td>...</td>      <td>402</td>      <td>596</td>      <td>523</td>      <td>523</td>      <td>447</td>      <td>362</td>      <td>561</td>      <td>386</td>      <td>529</td>      <td>484</td>    </tr>    <tr>      <th>9</th>      <td>373</td>      <td>433</td>      <td>525</td>      <td>601</td>      <td>522</td>      <td>345</td>      <td>551</td>      <td>521</td>      <td>434</td>      <td>447</td>      <td>...</td>      <td>508</td>      <td>498</td>      <td>438</td>      <td>478</td>      <td>459</td>      <td>418</td>      <td>488</td>      <td>407</td>      <td>503</td>      <td>496</td>    </tr>    <tr>      <th>10</th>      <td>500</td>      <td>427</td>      <td>574</td>      <td>607</td>      <td>667</td>      <td>477</td>      <td>652</td>      <td>656</td>      <td>615</td>      <td>477</td>      <td>...</td>      <td>622</td>      <td>702</td>      <td>531</td>      <td>610</td>      <td>558</td>      <td>532</td>      <td>598</td>      <td>471</td>      <td>582</td>      <td>561</td>    </tr>    <tr>      <th>11</th>      <td>664</td>      <td>694</td>      <td>772</td>      <td>841</td>      <td>779</td>      <td>574</td>      <td>730</td>      <td>810</td>      <td>711</td>      <td>608</td>      <td>...</td>      <td>591</td>      <td>760</td>      <td>616</td>      <td>638</td>      <td>721</td>      <td>676</td>      <td>846</td>      <td>678</td>      <td>754</td>      <td>708</td>    </tr>    <tr>      <th>12</th>      <td>545</td>      <td>547</td>      <td>687</td>      <td>701</td>      <td>721</td>      <td>576</td>      <td>689</td>      <td>724</td>      <td>710</td>      <td>532</td>      <td>...</td>      <td>674</td>      <td>684</td>      <td>648</td>      <td>694</td>      <td>710</td>      <td>564</td>      <td>757</td>      <td>571</td>      <td>671</td>      <td>656</td>    </tr>    <tr>      <th>13</th>      <td>574</td>      <td>586</td>      <td>723</td>      <td>750</td>      <td>691</td>      <td>494</td>      <td>696</td>      <td>787</td>      <td>667</td>      <td>523</td>      <td>...</td>      <td>618</td>      <td>681</td>      <td>568</td>      <td>682</td>      <td>715</td>      <td>644</td>      <td>756</td>      <td>557</td>      <td>690</td>      <td>604</td>    </tr>    <tr>      <th>14</th>      <td>502</td>      <td>382</td>      <td>645</td>      <td>557</td>      <td>570</td>      <td>403</td>      <td>538</td>      <td>677</td>      <td>500</td>      <td>501</td>      <td>...</td>      <td>369</td>      <td>650</td>      <td>507</td>      <td>576</td>      <td>546</td>      <td>531</td>      <td>554</td>      <td>437</td>      <td>616</td>      <td>463</td>    </tr>    <tr>      <th>15</th>      <td>510</td>      <td>505</td>      <td>736</td>      <td>651</td>      <td>649</td>      <td>510</td>      <td>719</td>      <td>733</td>      <td>694</td>      <td>557</td>      <td>...</td>      <td>605</td>      <td>717</td>      <td>574</td>      <td>642</td>      <td>678</td>      <td>576</td>      <td>755</td>      <td>455</td>      <td>598</td>      <td>654</td>    </tr>    <tr>      <th>16</th>      <td>567</td>      <td>376</td>      <td>614</td>      <td>612</td>      <td>643</td>      <td>514</td>      <td>598</td>      <td>724</td>      <td>547</td>      <td>464</td>      <td>...</td>      <td>456</td>      <td>639</td>      <td>520</td>      <td>560</td>      <td>569</td>      <td>442</td>      <td>596</td>      <td>517</td>      <td>659</td>      <td>532</td>    </tr>    <tr>      <th>17</th>      <td>626</td>      <td>716</td>      <td>828</td>      <td>765</td>      <td>740</td>      <td>603</td>      <td>809</td>      <td>852</td>      <td>692</td>      <td>591</td>      <td>...</td>      <td>664</td>      <td>716</td>      <td>655</td>      <td>721</td>      <td>742</td>      <td>612</td>      <td>819</td>      <td>593</td>      <td>744</td>      <td>712</td>    </tr>    <tr>      <th>18</th>      <td>600</td>      <td>559</td>      <td>667</td>      <td>664</td>      <td>641</td>      <td>556</td>      <td>624</td>      <td>815</td>      <td>638</td>      <td>564</td>      <td>...</td>      <td>581</td>      <td>701</td>      <td>559</td>      <td>677</td>      <td>710</td>      <td>554</td>      <td>748</td>      <td>597</td>      <td>614</td>      <td>657</td>    </tr>    <tr>      <th>19</th>      <td>445</td>      <td>431</td>      <td>661</td>      <td>681</td>      <td>641</td>      <td>552</td>      <td>690</td>      <td>719</td>      <td>602</td>      <td>474</td>      <td>...</td>      <td>515</td>      <td>637</td>      <td>576</td>      <td>620</td>      <td>572</td>      <td>512</td>      <td>599</td>      <td>455</td>      <td>622</td>      <td>538</td>    </tr>    <tr>      <th>20</th>      <td>523</td>      <td>569</td>      <td>784</td>      <td>725</td>      <td>713</td>      <td>501</td>      <td>740</td>      <td>772</td>      <td>638</td>      <td>640</td>      <td>...</td>      <td>589</td>      <td>775</td>      <td>664</td>      <td>686</td>      <td>726</td>      <td>672</td>      <td>747</td>      <td>548</td>      <td>723</td>      <td>645</td>    </tr>    <tr>      <th>21</th>      <td>487</td>      <td>465</td>      <td>553</td>      <td>639</td>      <td>517</td>      <td>449</td>      <td>592</td>      <td>609</td>      <td>454</td>      <td>398</td>      <td>...</td>      <td>492</td>      <td>567</td>      <td>534</td>      <td>404</td>      <td>554</td>      <td>417</td>      <td>561</td>      <td>466</td>      <td>498</td>      <td>492</td>    </tr>    <tr>      <th>22</th>      <td>479</td>      <td>449</td>      <td>574</td>      <td>686</td>      <td>583</td>      <td>377</td>      <td>566</td>      <td>614</td>      <td>563</td>      <td>455</td>      <td>...</td>      <td>453</td>      <td>539</td>      <td>491</td>      <td>501</td>      <td>596</td>      <td>520</td>      <td>722</td>      <td>478</td>      <td>565</td>      <td>501</td>    </tr>    <tr>      <th>23</th>      <td>483</td>      <td>386</td>      <td>476</td>      <td>526</td>      <td>550</td>      <td>426</td>      <td>492</td>      <td>585</td>      <td>536</td>      <td>482</td>      <td>...</td>      <td>322</td>      <td>541</td>      <td>438</td>      <td>456</td>      <td>487</td>      <td>408</td>      <td>502</td>      <td>426</td>      <td>474</td>      <td>481</td>    </tr>    <tr>      <th>24</th>      <td>523</td>      <td>551</td>      <td>658</td>      <td>767</td>      <td>537</td>      <td>444</td>      <td>663</td>      <td>731</td>      <td>576</td>      <td>577</td>      <td>...</td>      <td>522</td>      <td>590</td>      <td>525</td>      <td>664</td>      <td>691</td>      <td>548</td>      <td>635</td>      <td>526</td>      <td>641</td>      <td>538</td>    </tr>    <tr>      <th>25</th>      <td>652</td>      <td>656</td>      <td>738</td>      <td>753</td>      <td>853</td>      <td>508</td>      <td>752</td>      <td>815</td>      <td>669</td>      <td>576</td>      <td>...</td>      <td>694</td>      <td>833</td>      <td>693</td>      <td>606</td>      <td>575</td>      <td>616</td>      <td>704</td>      <td>559</td>      <td>728</td>      <td>672</td>    </tr>    <tr>      <th>26</th>      <td>578</td>      <td>577</td>      <td>744</td>      <td>856</td>      <td>699</td>      <td>497</td>      <td>779</td>      <td>800</td>      <td>733</td>      <td>587</td>      <td>...</td>      <td>630</td>      <td>754</td>      <td>704</td>      <td>834</td>      <td>760</td>      <td>680</td>      <td>765</td>      <td>592</td>      <td>731</td>      <td>629</td>    </tr>    <tr>      <th>27</th>      <td>554</td>      <td>494</td>      <td>665</td>      <td>689</td>      <td>630</td>      <td>574</td>      <td>695</td>      <td>703</td>      <td>636</td>      <td>599</td>      <td>...</td>      <td>554</td>      <td>685</td>      <td>532</td>      <td>658</td>      <td>649</td>      <td>554</td>      <td>693</td>      <td>577</td>      <td>634</td>      <td>668</td>    </tr>    <tr>      <th>28</th>      <td>498</td>      <td>552</td>      <td>659</td>      <td>784</td>      <td>552</td>      <td>492</td>      <td>690</td>      <td>775</td>      <td>544</td>      <td>551</td>      <td>...</td>      <td>567</td>      <td>636</td>      <td>518</td>      <td>599</td>      <td>742</td>      <td>521</td>      <td>733</td>      <td>533</td>      <td>605</td>      <td>604</td>    </tr>    <tr>      <th>29</th>      <td>513</td>      <td>491</td>      <td>563</td>      <td>642</td>      <td>477</td>      <td>367</td>      <td>589</td>      <td>647</td>      <td>516</td>      <td>484</td>      <td>...</td>      <td>428</td>      <td>574</td>      <td>504</td>      <td>548</td>      <td>553</td>      <td>483</td>      <td>540</td>      <td>407</td>      <td>547</td>      <td>455</td>    </tr>  </tbody></table><p>30 rows × 30 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%timeit x.dot(y)</span><br></pre></td></tr></table></figure><pre><code>184 µs ± 7.03 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%timeit np.dot(x, y)</span><br></pre></td></tr></table></figure><pre><code>66.4 µs ± 2.46 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)</code></pre><ul><li>执行相同运算，Numpy与Pandas的对比</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x1 = np.array(x)</span><br><span class="line">x1</span><br></pre></td></tr></table></figure><pre><code>array([[6, 3, 7, 4, 6, 9, 2, 6, 7, 4, 3, 7, 7, 2, 5, 4, 1, 7, 5, 1, 4, 0,        9, 5, 8, 0, 9, 2, 6, 3],       [8, 2, 4, 2, 6, 4, 8, 6, 1, 3, 8, 1, 9, 8, 9, 4, 1, 3, 6, 7, 2, 0,        3, 1, 7, 3, 1, 5, 5, 9],       [3, 5, 1, 9, 1, 9, 3, 7, 6, 8, 7, 4, 1, 4, 7, 9, 8, 8, 0, 8, 6, 8,        7, 0, 7, 7, 2, 0, 7, 2],       [2, 0, 4, 9, 6, 9, 8, 6, 8, 7, 1, 0, 6, 6, 7, 4, 2, 7, 5, 2, 0, 2,        4, 2, 0, 4, 9, 6, 6, 8],       [9, 9, 2, 6, 0, 3, 3, 4, 6, 6, 3, 6, 2, 5, 1, 9, 8, 4, 5, 3, 9, 6,        8, 6, 0, 0, 8, 8, 3, 8],       [2, 6, 5, 7, 8, 4, 0, 2, 9, 7, 5, 7, 8, 3, 0, 0, 9, 3, 6, 1, 2, 0,        4, 0, 7, 0, 0, 1, 1, 5],       [6, 4, 0, 0, 2, 1, 4, 9, 5, 6, 3, 6, 7, 0, 5, 7, 4, 3, 1, 5, 5, 0,        8, 5, 2, 3, 3, 2, 9, 2],       [2, 3, 6, 3, 8, 0, 7, 6, 1, 7, 0, 8, 8, 1, 6, 9, 2, 6, 9, 8, 3, 0,        1, 0, 4, 4, 6, 8, 8, 2],       [2, 2, 3, 7, 5, 7, 0, 7, 3, 0, 7, 3, 5, 7, 3, 2, 8, 2, 8, 1, 1, 1,        5, 2, 8, 3, 0, 3, 0, 4],       [3, 7, 7, 6, 2, 0, 0, 2, 5, 6, 5, 5, 5, 2, 5, 7, 1, 4, 0, 0, 4, 2,        3, 2, 0, 0, 4, 5, 2, 8],       [4, 7, 0, 4, 2, 0, 3, 4, 6, 0, 2, 1, 8, 9, 5, 9, 2, 7, 7, 1, 5, 6,        1, 9, 1, 9, 0, 7, 0, 8],       [5, 6, 9, 6, 9, 2, 1, 8, 7, 9, 6, 8, 3, 3, 0, 7, 2, 6, 1, 1, 6, 5,        2, 8, 9, 5, 9, 9, 5, 0],       [3, 9, 5, 5, 4, 0, 7, 4, 4, 6, 3, 5, 3, 2, 6, 7, 3, 1, 9, 2, 0, 7,        2, 9, 6, 9, 4, 9, 4, 6],       [8, 4, 0, 9, 9, 0, 1, 5, 8, 7, 4, 0, 6, 4, 5, 6, 2, 9, 2, 4, 5, 8,        4, 0, 3, 4, 9, 9, 4, 6],       [3, 0, 4, 6, 9, 9, 5, 4, 3, 1, 3, 9, 9, 2, 9, 0, 7, 4, 3, 7, 6, 1,        0, 3, 7, 1, 2, 0, 0, 2],       [4, 2, 0, 0, 7, 9, 1, 2, 1, 2, 6, 0, 9, 7, 9, 9, 9, 1, 2, 8, 6, 3,        9, 4, 1, 7, 3, 8, 4, 8],       [3, 9, 4, 8, 7, 2, 0, 2, 3, 1, 0, 6, 7, 6, 4, 0, 6, 6, 8, 2, 8, 0,        0, 3, 8, 5, 2, 0, 3, 8],       [2, 8, 6, 3, 2, 9, 4, 4, 2, 8, 3, 4, 3, 4, 6, 8, 6, 4, 9, 9, 6, 9,        4, 2, 6, 1, 8, 9, 9, 0],       [5, 6, 7, 9, 8, 1, 9, 1, 4, 4, 5, 2, 7, 0, 5, 3, 0, 6, 8, 3, 3, 5,        2, 5, 6, 9, 9, 2, 6, 2],       [1, 9, 3, 7, 8, 6, 0, 2, 8, 0, 8, 7, 0, 5, 4, 5, 9, 4, 5, 4, 4, 3,        2, 2, 3, 8, 1, 8, 0, 0],       [4, 5, 5, 2, 6, 8, 9, 7, 5, 7, 4, 7, 9, 3, 9, 7, 9, 1, 4, 8, 3, 5,        0, 8, 0, 4, 3, 2, 5, 1],       [2, 4, 8, 1, 9, 7, 1, 4, 6, 7, 0, 5, 0, 1, 0, 4, 9, 8, 5, 0, 0, 1,        8, 2, 0, 4, 6, 5, 0, 4],       [4, 5, 2, 4, 6, 4, 4, 4, 9, 9, 2, 0, 4, 8, 0, 2, 3, 0, 0, 7, 1, 7,        6, 9, 9, 1, 5, 5, 2, 1],       [0, 5, 4, 8, 0, 6, 4, 4, 1, 2, 6, 5, 1, 5, 1, 1, 1, 2, 1, 3, 8, 5,        0, 7, 6, 9, 2, 0, 4, 3],       [9, 7, 0, 9, 0, 3, 7, 4, 1, 5, 4, 1, 2, 8, 6, 6, 5, 7, 3, 7, 3, 7,        8, 2, 2, 1, 9, 2, 2, 4],       [4, 1, 9, 5, 4, 5, 0, 4, 8, 9, 1, 0, 9, 8, 9, 8, 8, 5, 7, 0, 9, 3,        0, 7, 0, 2, 3, 7, 5, 9],       [6, 7, 1, 9, 7, 2, 6, 2, 6, 1, 9, 5, 2, 2, 8, 6, 4, 9, 6, 8, 0, 6,        5, 9, 8, 0, 3, 8, 3, 9],       [2, 8, 1, 3, 5, 1, 7, 7, 0, 2, 9, 8, 4, 5, 3, 9, 1, 7, 5, 4, 8, 0,        4, 5, 4, 5, 5, 6, 3, 7],       [6, 8, 6, 2, 2, 7, 4, 3, 7, 5, 1, 3, 3, 5, 5, 0, 7, 5, 2, 8, 1, 7,        9, 2, 4, 5, 9, 5, 3, 2],       [3, 0, 3, 0, 0, 9, 5, 4, 3, 2, 0, 5, 1, 7, 9, 4, 6, 9, 1, 7, 1, 3,        0, 4, 8, 0, 8, 7, 5, 6]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y1 = np.array(y)</span><br><span class="line">y1</span><br></pre></td></tr></table></figure><pre><code>array([[5, 8, 9, 5, 0, 0, 1, 7, 6, 9, 2, 4, 5, 2, 4, 2, 4, 7, 7, 9, 1, 7,        0, 6, 9, 9, 7, 6, 9, 1],       [0, 1, 8, 8, 3, 9, 8, 7, 3, 6, 5, 1, 9, 3, 4, 8, 1, 4, 0, 3, 9, 2,        0, 4, 9, 2, 7, 7, 9, 8],       [6, 9, 3, 7, 7, 4, 5, 9, 3, 6, 8, 0, 2, 7, 7, 9, 7, 3, 0, 8, 7, 7,        1, 1, 3, 0, 8, 6, 4, 5],       [6, 2, 5, 7, 8, 4, 4, 7, 7, 4, 9, 0, 2, 0, 7, 1, 7, 9, 8, 4, 0, 1,        9, 8, 2, 3, 1, 2, 7, 2],       [6, 0, 9, 2, 6, 6, 2, 7, 7, 0, 6, 5, 1, 4, 6, 0, 6, 5, 1, 2, 1, 5,        4, 0, 7, 8, 9, 5, 7, 0],       [9, 3, 9, 1, 4, 4, 6, 8, 8, 9, 2, 7, 5, 5, 4, 5, 8, 5, 8, 1, 1, 8,        7, 0, 3, 4, 2, 0, 3, 5],       [1, 2, 4, 3, 0, 6, 0, 7, 2, 8, 3, 0, 8, 4, 2, 9, 0, 3, 8, 1, 4, 3,        3, 6, 7, 3, 5, 3, 2, 4],       [4, 0, 3, 3, 8, 3, 5, 6, 7, 5, 1, 7, 0, 2, 8, 2, 1, 4, 0, 4, 1, 7,        3, 1, 6, 6, 9, 6, 9, 6],       [0, 0, 2, 9, 6, 0, 6, 7, 0, 3, 9, 0, 3, 4, 7, 5, 3, 8, 8, 0, 6, 7,        9, 5, 4, 9, 5, 2, 5, 6],       [6, 8, 7, 7, 7, 2, 6, 0, 5, 2, 1, 8, 5, 9, 4, 9, 1, 2, 0, 4, 7, 0,        6, 2, 4, 3, 6, 7, 6, 3],       [0, 6, 4, 7, 6, 2, 9, 5, 9, 9, 9, 8, 6, 4, 2, 9, 4, 0, 0, 3, 4, 9,        3, 9, 1, 2, 5, 4, 0, 8],       [2, 3, 9, 9, 4, 4, 8, 2, 1, 6, 3, 8, 9, 7, 0, 5, 2, 2, 8, 5, 0, 5,        9, 8, 6, 6, 0, 4, 7, 3],       [0, 1, 6, 0, 6, 1, 6, 4, 2, 5, 4, 6, 2, 9, 2, 7, 5, 0, 7, 8, 8, 8,        0, 7, 2, 0, 7, 1, 1, 9],       [5, 1, 5, 9, 6, 4, 9, 8, 7, 5, 1, 8, 0, 5, 3, 9, 0, 4, 8, 6, 2, 4,        3, 2, 0, 0, 4, 2, 5, 0],       [0, 3, 8, 5, 3, 1, 4, 7, 3, 2, 2, 2, 6, 6, 0, 1, 5, 6, 5, 8, 8, 5,        5, 7, 5, 9, 1, 3, 9, 3],       [3, 3, 6, 1, 3, 0, 5, 0, 5, 2, 7, 6, 4, 0, 2, 4, 8, 7, 6, 7, 7, 1,        7, 7, 3, 8, 3, 0, 6, 3],       [0, 6, 5, 9, 6, 4, 6, 6, 2, 2, 4, 1, 2, 3, 9, 3, 6, 7, 0, 3, 3, 6,        8, 6, 5, 1, 3, 2, 6, 3],       [6, 7, 2, 8, 0, 1, 8, 6, 0, 0, 1, 2, 7, 7, 4, 4, 0, 1, 0, 8, 5, 6,        2, 5, 4, 3, 0, 6, 2, 1],       [9, 4, 4, 0, 9, 8, 7, 7, 6, 1, 7, 2, 4, 5, 6, 7, 2, 0, 5, 2, 7, 9,        9, 7, 1, 1, 4, 6, 5, 6],       [4, 1, 1, 5, 1, 2, 6, 2, 3, 3, 2, 3, 0, 0, 1, 5, 0, 5, 8, 8, 0, 0,        0, 9, 8, 5, 9, 3, 4, 0],       [9, 8, 6, 3, 9, 9, 0, 8, 1, 6, 6, 1, 3, 7, 3, 2, 3, 0, 2, 8, 2, 9,        0, 1, 3, 9, 4, 8, 8, 8],       [2, 8, 6, 4, 9, 0, 5, 5, 6, 1, 7, 6, 5, 7, 1, 9, 7, 5, 6, 7, 6, 7,        5, 6, 8, 7, 4, 2, 4, 0],       [0, 3, 5, 9, 0, 3, 6, 5, 1, 1, 8, 4, 7, 0, 1, 7, 1, 5, 4, 5, 6, 2,        5, 3, 9, 3, 9, 5, 1, 9],       [7, 7, 0, 8, 6, 1, 2, 0, 4, 4, 6, 1, 0, 9, 4, 9, 3, 0, 5, 1, 1, 9,        6, 0, 2, 8, 3, 7, 2, 5],       [6, 0, 4, 2, 3, 1, 0, 5, 7, 0, 2, 2, 0, 9, 5, 1, 1, 6, 3, 2, 1, 1,        2, 7, 5, 2, 9, 4, 7, 3],       [5, 0, 2, 1, 4, 9, 4, 6, 9, 3, 8, 8, 7, 1, 8, 7, 8, 9, 2, 2, 5, 5,        3, 5, 9, 2, 7, 4, 1, 6],       [9, 8, 1, 8, 1, 6, 2, 6, 1, 8, 3, 7, 0, 7, 0, 0, 7, 3, 9, 5, 2, 5,        1, 2, 5, 3, 3, 6, 1, 8],       [1, 8, 6, 4, 6, 9, 5, 4, 7, 2, 0, 2, 0, 5, 9, 4, 1, 4, 5, 2, 9, 3,        1, 5, 1, 1, 7, 1, 2, 6],       [0, 7, 7, 4, 3, 2, 7, 8, 5, 2, 4, 9, 2, 2, 3, 5, 9, 6, 4, 9, 0, 2,        8, 3, 7, 3, 9, 2, 3, 8],       [8, 0, 2, 6, 8, 3, 6, 4, 9, 7, 6, 3, 2, 9, 1, 5, 5, 6, 9, 4, 6, 7,        8, 5, 7, 2, 5, 3, 4, 5]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%timeit x1.dot(y1)</span><br></pre></td></tr></table></figure><pre><code>22.8 µs ± 400 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%timeit np.dot(x1, y1)</span><br></pre></td></tr></table></figure><pre><code>22.9 µs ± 853 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%timeit np.dot(x.values, y.values)</span><br></pre></td></tr></table></figure><pre><code>36.8 µs ± 1.07 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x2 = list(x1)</span><br><span class="line">y2 = list(y1)</span><br><span class="line">x3 = []</span><br><span class="line">y3 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x2:</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        res.append(int(j))</span><br><span class="line">    x3.append(res)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> y2:</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        res.append(int(j))</span><br><span class="line">    y3.append(res)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">        row = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(y[<span class="number">0</span>])):</span><br><span class="line">            sum_row = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(len(x[<span class="number">0</span>])):</span><br><span class="line">                sum_row += x[i][k]*y[k][j]</span><br><span class="line">            row.append(sum_row)</span><br><span class="line">        res.append(row)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%timeit f(x3, y3)</span><br></pre></td></tr></table></figure><pre><code>3.89 ms ± 168 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre><p><strong>一般来说，纯粹的计算在Numpy里执行的更快</strong></p><p>Numpy更侧重于计算，Pandas更侧重于数据处理</p><p><strong>（3）广播运算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line">x = pd.DataFrame(np.random.randint(<span class="number">10</span>, size=(<span class="number">3</span>, <span class="number">3</span>)), columns=list(<span class="string">"ABC"</span>))</span><br><span class="line">x</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>6</td>      <td>3</td>      <td>7</td>    </tr>    <tr>      <th>1</th>      <td>4</td>      <td>6</td>      <td>9</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>6</td>      <td>7</td>    </tr>  </tbody></table></div><ul><li>按行广播</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.iloc[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>A    6B    3C    7Name: 0, dtype: int32</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x/x.iloc[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.000000</td>      <td>1.0</td>      <td>1.000000</td>    </tr>    <tr>      <th>1</th>      <td>0.666667</td>      <td>2.0</td>      <td>1.285714</td>    </tr>    <tr>      <th>2</th>      <td>0.333333</td>      <td>2.0</td>      <td>1.000000</td>    </tr>  </tbody></table></div><ul><li>按列广播</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.A</span><br></pre></td></tr></table></figure><pre><code>0    61    42    2Name: A, dtype: int32</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.div(x.A, axis=<span class="number">0</span>)             <span class="comment"># add sub div mul</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>0.5</td>      <td>1.166667</td>    </tr>    <tr>      <th>1</th>      <td>1.0</td>      <td>1.5</td>      <td>2.250000</td>    </tr>    <tr>      <th>2</th>      <td>1.0</td>      <td>3.0</td>      <td>3.500000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.div(x.iloc[<span class="number">0</span>], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.000000</td>      <td>1.0</td>      <td>1.000000</td>    </tr>    <tr>      <th>1</th>      <td>0.666667</td>      <td>2.0</td>      <td>1.285714</td>    </tr>    <tr>      <th>2</th>      <td>0.333333</td>      <td>2.0</td>      <td>1.000000</td>    </tr>  </tbody></table></div><p><strong>3、新的用法</strong></p><p><strong>（1）索引对齐</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = pd.DataFrame(np.random.randint(<span class="number">0</span>, <span class="number">20</span>, size=(<span class="number">2</span>, <span class="number">2</span>)), columns=list(<span class="string">"AB"</span>))</span><br><span class="line">A</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>3</td>      <td>7</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>1</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">B = pd.DataFrame(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, size=(<span class="number">3</span>, <span class="number">3</span>)), columns=list(<span class="string">"ABC"</span>))</span><br><span class="line">B</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>7</td>      <td>5</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>4</td>      <td>0</td>      <td>9</td>    </tr>    <tr>      <th>2</th>      <td>5</td>      <td>8</td>      <td>0</td>    </tr>  </tbody></table></div><ul><li>pandas会自动对齐两个对象的索引，没有的值用np.nan表示</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A+B</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>10.0</td>      <td>12.0</td>      <td>NaN</td>    </tr>    <tr>      <th>1</th>      <td>6.0</td>      <td>1.0</td>      <td>NaN</td>    </tr>    <tr>      <th>2</th>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>  </tbody></table></div><ul><li>缺省值也可用fill_value来填充</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.add(B, fill_value=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>10.0</td>      <td>12.0</td>      <td>1.0</td>    </tr>    <tr>      <th>1</th>      <td>6.0</td>      <td>1.0</td>      <td>9.0</td>    </tr>    <tr>      <th>2</th>      <td>5.0</td>      <td>8.0</td>      <td>0.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A*B</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>21.0</td>      <td>35.0</td>      <td>NaN</td>    </tr>    <tr>      <th>1</th>      <td>8.0</td>      <td>0.0</td>      <td>NaN</td>    </tr>    <tr>      <th>2</th>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>  </tbody></table></div><p><strong>（2）统计相关</strong></p><ul><li>数据种类统计</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y = np.random.randint(<span class="number">3</span>, size=<span class="number">20</span>)</span><br><span class="line">y</span><br></pre></td></tr></table></figure><pre><code>array([2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 0, 2, 0, 2, 2, 0, 0, 2, 1])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.unique(y)</span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 2])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">Counter(y)</span><br></pre></td></tr></table></figure><pre><code>Counter({2: 11, 1: 5, 0: 4})</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y1 = pd.DataFrame(y, columns=[<span class="string">"A"</span>])</span><br><span class="line">y1</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>1</td>    </tr>    <tr>      <th>4</th>      <td>2</td>    </tr>    <tr>      <th>5</th>      <td>1</td>    </tr>    <tr>      <th>6</th>      <td>1</td>    </tr>    <tr>      <th>7</th>      <td>2</td>    </tr>    <tr>      <th>8</th>      <td>1</td>    </tr>    <tr>      <th>9</th>      <td>2</td>    </tr>    <tr>      <th>10</th>      <td>2</td>    </tr>    <tr>      <th>11</th>      <td>0</td>    </tr>    <tr>      <th>12</th>      <td>2</td>    </tr>    <tr>      <th>13</th>      <td>0</td>    </tr>    <tr>      <th>14</th>      <td>2</td>    </tr>    <tr>      <th>15</th>      <td>2</td>    </tr>    <tr>      <th>16</th>      <td>0</td>    </tr>    <tr>      <th>17</th>      <td>0</td>    </tr>    <tr>      <th>18</th>      <td>2</td>    </tr>    <tr>      <th>19</th>      <td>1</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.unique(y1)</span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 2])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y1[<span class="string">"A"</span>].value_counts()</span><br></pre></td></tr></table></figure><pre><code>2    111     50     4Name: A, dtype: int64</code></pre><ul><li>产生新的结果，并进行排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">population_dict = &#123;<span class="string">"BeiJing"</span>: <span class="number">2154</span>,</span><br><span class="line">                   <span class="string">"ShangHai"</span>: <span class="number">2424</span>,</span><br><span class="line">                   <span class="string">"ShenZhen"</span>: <span class="number">1303</span>,</span><br><span class="line">                   <span class="string">"HangZhou"</span>: <span class="number">981</span> &#125;</span><br><span class="line">population = pd.Series(population_dict) </span><br><span class="line"></span><br><span class="line">GDP_dict = &#123;<span class="string">"BeiJing"</span>: <span class="number">30320</span>,</span><br><span class="line">            <span class="string">"ShangHai"</span>: <span class="number">32680</span>,</span><br><span class="line">            <span class="string">"ShenZhen"</span>: <span class="number">24222</span>,</span><br><span class="line">            <span class="string">"HangZhou"</span>: <span class="number">13468</span> &#125;</span><br><span class="line">GDP = pd.Series(GDP_dict)</span><br><span class="line"></span><br><span class="line">city_info = pd.DataFrame(&#123;<span class="string">"population"</span>: population,<span class="string">"GDP"</span>: GDP&#125;)</span><br><span class="line">city_info</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>population</th>      <th>GDP</th>    </tr>  </thead>  <tbody>    <tr>      <th>BeiJing</th>      <td>2154</td>      <td>30320</td>    </tr>    <tr>      <th>ShangHai</th>      <td>2424</td>      <td>32680</td>    </tr>    <tr>      <th>ShenZhen</th>      <td>1303</td>      <td>24222</td>    </tr>    <tr>      <th>HangZhou</th>      <td>981</td>      <td>13468</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">city_info[<span class="string">"per_GDP"</span>] = city_info[<span class="string">"GDP"</span>]/city_info[<span class="string">"population"</span>]</span><br><span class="line">city_info</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>population</th>      <th>GDP</th>      <th>per_GDP</th>    </tr>  </thead>  <tbody>    <tr>      <th>BeiJing</th>      <td>2154</td>      <td>30320</td>      <td>14.076137</td>    </tr>    <tr>      <th>ShangHai</th>      <td>2424</td>      <td>32680</td>      <td>13.481848</td>    </tr>    <tr>      <th>ShenZhen</th>      <td>1303</td>      <td>24222</td>      <td>18.589409</td>    </tr>    <tr>      <th>HangZhou</th>      <td>981</td>      <td>13468</td>      <td>13.728848</td>    </tr>  </tbody></table></div><p>递增排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">city_info.sort_values(by=<span class="string">"per_GDP"</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>population</th>      <th>GDP</th>      <th>per_GDP</th>    </tr>  </thead>  <tbody>    <tr>      <th>ShangHai</th>      <td>2424</td>      <td>32680</td>      <td>13.481848</td>    </tr>    <tr>      <th>HangZhou</th>      <td>981</td>      <td>13468</td>      <td>13.728848</td>    </tr>    <tr>      <th>BeiJing</th>      <td>2154</td>      <td>30320</td>      <td>14.076137</td>    </tr>    <tr>      <th>ShenZhen</th>      <td>1303</td>      <td>24222</td>      <td>18.589409</td>    </tr>  </tbody></table></div><p>递减排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">city_info.sort_values(by=<span class="string">"per_GDP"</span>, ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>population</th>      <th>GDP</th>      <th>per_GDP</th>    </tr>  </thead>  <tbody>    <tr>      <th>ShenZhen</th>      <td>1303</td>      <td>24222</td>      <td>18.589409</td>    </tr>    <tr>      <th>BeiJing</th>      <td>2154</td>      <td>30320</td>      <td>14.076137</td>    </tr>    <tr>      <th>HangZhou</th>      <td>981</td>      <td>13468</td>      <td>13.728848</td>    </tr>    <tr>      <th>ShangHai</th>      <td>2424</td>      <td>32680</td>      <td>13.481848</td>    </tr>  </tbody></table></div><p><strong>按轴进行排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = pd.DataFrame(np.random.randint(<span class="number">20</span>, size=(<span class="number">3</span>, <span class="number">4</span>)), index=[<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>], columns=list(<span class="string">"CBAD"</span>))</span><br><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>C</th>      <th>B</th>      <th>A</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2</th>      <td>3</td>      <td>13</td>      <td>17</td>      <td>8</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>19</td>      <td>14</td>      <td>6</td>    </tr>    <tr>      <th>0</th>      <td>11</td>      <td>7</td>      <td>14</td>      <td>2</td>    </tr>  </tbody></table></div><p>行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.sort_index()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>C</th>      <th>B</th>      <th>A</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>11</td>      <td>7</td>      <td>14</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>19</td>      <td>14</td>      <td>6</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>13</td>      <td>17</td>      <td>8</td>    </tr>  </tbody></table></div><p>列排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.sort_index(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>2</th>      <td>17</td>      <td>13</td>      <td>3</td>      <td>8</td>    </tr>    <tr>      <th>1</th>      <td>14</td>      <td>19</td>      <td>1</td>      <td>6</td>    </tr>    <tr>      <th>0</th>      <td>14</td>      <td>7</td>      <td>11</td>      <td>2</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.sort_index(axis=<span class="number">1</span>, ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>D</th>      <th>C</th>      <th>B</th>      <th>A</th>    </tr>  </thead>  <tbody>    <tr>      <th>2</th>      <td>8</td>      <td>3</td>      <td>13</td>      <td>17</td>    </tr>    <tr>      <th>1</th>      <td>6</td>      <td>1</td>      <td>19</td>      <td>14</td>    </tr>    <tr>      <th>0</th>      <td>2</td>      <td>11</td>      <td>7</td>      <td>14</td>    </tr>  </tbody></table></div><ul><li>统计方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.normal(<span class="number">2</span>, <span class="number">4</span>, size=(<span class="number">6</span>, <span class="number">4</span>)),columns=list(<span class="string">"ABCD"</span>))</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.082198</td>      <td>3.557396</td>      <td>-3.060476</td>      <td>6.367969</td>    </tr>    <tr>      <th>1</th>      <td>13.113252</td>      <td>6.774559</td>      <td>2.874553</td>      <td>5.527044</td>    </tr>    <tr>      <th>2</th>      <td>-2.036341</td>      <td>-4.333177</td>      <td>5.094802</td>      <td>-0.152567</td>    </tr>    <tr>      <th>3</th>      <td>-3.386712</td>      <td>-1.522365</td>      <td>-2.522209</td>      <td>2.537716</td>    </tr>    <tr>      <th>4</th>      <td>4.328491</td>      <td>5.550994</td>      <td>5.577329</td>      <td>5.019991</td>    </tr>    <tr>      <th>5</th>      <td>1.171336</td>      <td>-0.493910</td>      <td>-4.032613</td>      <td>6.398588</td>    </tr>  </tbody></table></div><p>非空个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.count()</span><br></pre></td></tr></table></figure><pre><code>A    6B    6C    6D    6dtype: int64</code></pre><p>求和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.sum()</span><br></pre></td></tr></table></figure><pre><code>A    14.272224B     9.533497C     3.931385D    25.698741dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.sum(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>0     7.9470861    28.2894082    -1.4272833    -4.8935714    20.4768065     3.043402dtype: float64</code></pre><p>最大值 最小值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.min()</span><br></pre></td></tr></table></figure><pre><code>A   -3.386712B   -4.333177C   -4.032613D   -0.152567dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.max(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>0     6.3679691    13.1132522     5.0948023     2.5377164     5.5773295     6.398588dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.082198</td>      <td>3.557396</td>      <td>-3.060476</td>      <td>6.367969</td>    </tr>    <tr>      <th>1</th>      <td>13.113252</td>      <td>6.774559</td>      <td>2.874553</td>      <td>5.527044</td>    </tr>    <tr>      <th>2</th>      <td>-2.036341</td>      <td>-4.333177</td>      <td>5.094802</td>      <td>-0.152567</td>    </tr>    <tr>      <th>3</th>      <td>-3.386712</td>      <td>-1.522365</td>      <td>-2.522209</td>      <td>2.537716</td>    </tr>    <tr>      <th>4</th>      <td>4.328491</td>      <td>5.550994</td>      <td>5.577329</td>      <td>5.019991</td>    </tr>    <tr>      <th>5</th>      <td>1.171336</td>      <td>-0.493910</td>      <td>-4.032613</td>      <td>6.398588</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.idxmax()</span><br></pre></td></tr></table></figure><pre><code>A    1B    1C    4D    5dtype: int64</code></pre><p>均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.mean()</span><br></pre></td></tr></table></figure><pre><code>A    2.378704B    1.588916C    0.655231D    4.283124dtype: float64</code></pre><p>方差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.var()</span><br></pre></td></tr></table></figure><pre><code>A    34.980702B    19.110656C    18.948144D     6.726776dtype: float64</code></pre><p>标准差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.std()</span><br></pre></td></tr></table></figure><pre><code>A    5.914449B    4.371574C    4.352947D    2.593603dtype: float64</code></pre><p>中位数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.median()</span><br></pre></td></tr></table></figure><pre><code>A    1.126767B    1.531743C    0.176172D    5.273518dtype: float64</code></pre><p>众数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = pd.DataFrame(np.random.randint(<span class="number">5</span>, size=(<span class="number">10</span>, <span class="number">2</span>)), columns=list(<span class="string">"AB"</span>))</span><br><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>4</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>3</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>2</td>      <td>4</td>    </tr>    <tr>      <th>4</th>      <td>2</td>      <td>0</td>    </tr>    <tr>      <th>5</th>      <td>4</td>      <td>1</td>    </tr>    <tr>      <th>6</th>      <td>2</td>      <td>0</td>    </tr>    <tr>      <th>7</th>      <td>1</td>      <td>1</td>    </tr>    <tr>      <th>8</th>      <td>3</td>      <td>4</td>    </tr>    <tr>      <th>9</th>      <td>2</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.mode() <span class="comment"># 众数</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2</td>      <td>0</td>    </tr>  </tbody></table></div><p>75%分位数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.quantile(<span class="number">0.75</span>)</span><br></pre></td></tr></table></figure><pre><code>A    3.539202B    5.052594C    4.539740D    6.157738Name: 0.75, dtype: float64</code></pre><p>一网打尽</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.describe()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>6.000000</td>      <td>6.000000</td>      <td>6.000000</td>      <td>6.000000</td>    </tr>    <tr>      <th>mean</th>      <td>2.378704</td>      <td>1.588916</td>      <td>0.655231</td>      <td>4.283124</td>    </tr>    <tr>      <th>std</th>      <td>5.914449</td>      <td>4.371574</td>      <td>4.352947</td>      <td>2.593603</td>    </tr>    <tr>      <th>min</th>      <td>-3.386712</td>      <td>-4.333177</td>      <td>-4.032613</td>      <td>-0.152567</td>    </tr>    <tr>      <th>25%</th>      <td>-1.256706</td>      <td>-1.265251</td>      <td>-2.925910</td>      <td>3.158284</td>    </tr>    <tr>      <th>50%</th>      <td>1.126767</td>      <td>1.531743</td>      <td>0.176172</td>      <td>5.273518</td>    </tr>    <tr>      <th>75%</th>      <td>3.539202</td>      <td>5.052594</td>      <td>4.539740</td>      <td>6.157738</td>    </tr>    <tr>      <th>max</th>      <td>13.113252</td>      <td>6.774559</td>      <td>5.577329</td>      <td>6.398588</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data_2 = pd.DataFrame([[<span class="string">"a"</span>, <span class="string">"a"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>],</span><br><span class="line">                       [<span class="string">"c"</span>, <span class="string">"a"</span>, <span class="string">"c"</span>, <span class="string">"b"</span>],</span><br><span class="line">                       [<span class="string">"a"</span>, <span class="string">"a"</span>, <span class="string">"d"</span>, <span class="string">"c"</span>]], columns=list(<span class="string">"ABCD"</span>))</span><br><span class="line">data_2</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>a</td>      <td>a</td>      <td>c</td>      <td>d</td>    </tr>    <tr>      <th>1</th>      <td>c</td>      <td>a</td>      <td>c</td>      <td>b</td>    </tr>    <tr>      <th>2</th>      <td>a</td>      <td>a</td>      <td>d</td>      <td>c</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_2.describe()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>3</td>      <td>3</td>      <td>3</td>      <td>3</td>    </tr>    <tr>      <th>unique</th>      <td>2</td>      <td>1</td>      <td>2</td>      <td>3</td>    </tr>    <tr>      <th>top</th>      <td>a</td>      <td>a</td>      <td>c</td>      <td>b</td>    </tr>    <tr>      <th>freq</th>      <td>2</td>      <td>3</td>      <td>2</td>      <td>1</td>    </tr>  </tbody></table></div><p>相关性系数和协方差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.corr()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>A</th>      <td>1.000000</td>      <td>0.831063</td>      <td>0.331060</td>      <td>0.510821</td>    </tr>    <tr>      <th>B</th>      <td>0.831063</td>      <td>1.000000</td>      <td>0.179244</td>      <td>0.719112</td>    </tr>    <tr>      <th>C</th>      <td>0.331060</td>      <td>0.179244</td>      <td>1.000000</td>      <td>-0.450365</td>    </tr>    <tr>      <th>D</th>      <td>0.510821</td>      <td>0.719112</td>      <td>-0.450365</td>      <td>1.000000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.corrwith(df[<span class="string">"A"</span>])</span><br></pre></td></tr></table></figure><pre><code>A    1.000000B    0.831063C    0.331060D    0.510821dtype: float64</code></pre><p>自定义输出</p><p>apply（method）的用法：使用method方法默认对每一列进行相应的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.082198</td>      <td>3.557396</td>      <td>-3.060476</td>      <td>6.367969</td>    </tr>    <tr>      <th>1</th>      <td>13.113252</td>      <td>6.774559</td>      <td>2.874553</td>      <td>5.527044</td>    </tr>    <tr>      <th>2</th>      <td>-2.036341</td>      <td>-4.333177</td>      <td>5.094802</td>      <td>-0.152567</td>    </tr>    <tr>      <th>3</th>      <td>-3.386712</td>      <td>-1.522365</td>      <td>-2.522209</td>      <td>2.537716</td>    </tr>    <tr>      <th>4</th>      <td>4.328491</td>      <td>5.550994</td>      <td>5.577329</td>      <td>5.019991</td>    </tr>    <tr>      <th>5</th>      <td>1.171336</td>      <td>-0.493910</td>      <td>-4.032613</td>      <td>6.398588</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.apply(np.cumsum)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.082198</td>      <td>3.557396</td>      <td>-3.060476</td>      <td>6.367969</td>    </tr>    <tr>      <th>1</th>      <td>14.195450</td>      <td>10.331955</td>      <td>-0.185923</td>      <td>11.895013</td>    </tr>    <tr>      <th>2</th>      <td>12.159109</td>      <td>5.998778</td>      <td>4.908878</td>      <td>11.742447</td>    </tr>    <tr>      <th>3</th>      <td>8.772397</td>      <td>4.476413</td>      <td>2.386669</td>      <td>14.280162</td>    </tr>    <tr>      <th>4</th>      <td>13.100888</td>      <td>10.027406</td>      <td>7.963999</td>      <td>19.300153</td>    </tr>    <tr>      <th>5</th>      <td>14.272224</td>      <td>9.533497</td>      <td>3.931385</td>      <td>25.698741</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.apply(np.cumsum, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.082198</td>      <td>4.639594</td>      <td>1.579117</td>      <td>7.947086</td>    </tr>    <tr>      <th>1</th>      <td>13.113252</td>      <td>19.887811</td>      <td>22.762364</td>      <td>28.289408</td>    </tr>    <tr>      <th>2</th>      <td>-2.036341</td>      <td>-6.369518</td>      <td>-1.274717</td>      <td>-1.427283</td>    </tr>    <tr>      <th>3</th>      <td>-3.386712</td>      <td>-4.909077</td>      <td>-7.431287</td>      <td>-4.893571</td>    </tr>    <tr>      <th>4</th>      <td>4.328491</td>      <td>9.879485</td>      <td>15.456814</td>      <td>20.476806</td>    </tr>    <tr>      <th>5</th>      <td>1.171336</td>      <td>0.677427</td>      <td>-3.355186</td>      <td>3.043402</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.apply(sum)</span><br></pre></td></tr></table></figure><pre><code>A    14.272224B     9.533497C     3.931385D    25.698741dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.sum()</span><br></pre></td></tr></table></figure><pre><code>A    14.272224B     9.533497C     3.931385D    25.698741dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.apply(<span class="keyword">lambda</span> x: x.max()-x.min())</span><br></pre></td></tr></table></figure><pre><code>A    16.499965B    11.107736C     9.609942D     6.551155dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_describe</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> pd.Series([x.count(), x.mean(), x.max(), x.idxmin(), x.std()], \</span><br><span class="line">                     index=[<span class="string">"Count"</span>, <span class="string">"mean"</span>, <span class="string">"max"</span>, <span class="string">"idxmin"</span>, <span class="string">"std"</span>])</span><br><span class="line">df.apply(my_describe)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>Count</th>      <td>6.000000</td>      <td>6.000000</td>      <td>6.000000</td>      <td>6.000000</td>    </tr>    <tr>      <th>mean</th>      <td>2.378704</td>      <td>1.588916</td>      <td>0.655231</td>      <td>4.283124</td>    </tr>    <tr>      <th>max</th>      <td>13.113252</td>      <td>6.774559</td>      <td>5.577329</td>      <td>6.398588</td>    </tr>    <tr>      <th>idxmin</th>      <td>3.000000</td>      <td>2.000000</td>      <td>5.000000</td>      <td>2.000000</td>    </tr>    <tr>      <th>std</th>      <td>5.914449</td>      <td>4.371574</td>      <td>4.352947</td>      <td>2.593603</td>    </tr>  </tbody></table></div><h2 id="12-4-缺失值处理"><a href="#12-4-缺失值处理" class="headerlink" title="12.4 缺失值处理"></a>12.4 缺失值处理</h2><p><strong>1、发现缺失值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data = pd.DataFrame(np.array([[<span class="number">1</span>, np.nan, <span class="number">2</span>],</span><br><span class="line">                              [np.nan, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">                              [<span class="number">5</span>, <span class="number">6</span>, <span class="literal">None</span>]]), columns=[<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>])</span><br><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>NaN</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>NaN</td>      <td>3</td>      <td>4</td>    </tr>    <tr>      <th>2</th>      <td>5</td>      <td>6</td>      <td>None</td>    </tr>  </tbody></table></div><p><strong>注意：有None、字符串等，数据类型全部变为object，它比int和float更消耗资源</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.dtypes</span><br></pre></td></tr></table></figure><pre><code>A    objectB    objectC    objectdtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.isnull()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>False</td>      <td>True</td>      <td>False</td>    </tr>    <tr>      <th>1</th>      <td>True</td>      <td>False</td>      <td>False</td>    </tr>    <tr>      <th>2</th>      <td>False</td>      <td>False</td>      <td>True</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.notnull()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>True</td>      <td>False</td>      <td>True</td>    </tr>    <tr>      <th>1</th>      <td>False</td>      <td>True</td>      <td>True</td>    </tr>    <tr>      <th>2</th>      <td>True</td>      <td>True</td>      <td>False</td>    </tr>  </tbody></table></div><p><strong>2、删除缺失值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = pd.DataFrame(np.array([[<span class="number">1</span>, np.nan, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">                              [np.nan, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">                              [<span class="number">7</span>, <span class="number">8</span>, np.nan, <span class="number">9</span>],</span><br><span class="line">                              [<span class="number">10</span>, <span class="number">11</span> , <span class="number">12</span>, <span class="number">13</span>]]), columns=[<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>])</span><br><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>NaN</td>      <td>2.0</td>      <td>3.0</td>    </tr>    <tr>      <th>1</th>      <td>NaN</td>      <td>4.0</td>      <td>5.0</td>      <td>6.0</td>    </tr>    <tr>      <th>2</th>      <td>7.0</td>      <td>8.0</td>      <td>NaN</td>      <td>9.0</td>    </tr>    <tr>      <th>3</th>      <td>10.0</td>      <td>11.0</td>      <td>12.0</td>      <td>13.0</td>    </tr>  </tbody></table></div><p><strong>注意：np.nan是一种特殊的浮点数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.dtypes</span><br></pre></td></tr></table></figure><pre><code>A    float64B    float64C    float64D    float64dtype: object</code></pre><p><strong>（1）删除整行</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.dropna() <span class="comment"># 丢弃有缺失值的行</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>3</th>      <td>10.0</td>      <td>11.0</td>      <td>12.0</td>      <td>13.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>NaN</td>      <td>2.0</td>      <td>3.0</td>    </tr>    <tr>      <th>1</th>      <td>NaN</td>      <td>4.0</td>      <td>5.0</td>      <td>6.0</td>    </tr>    <tr>      <th>2</th>      <td>7.0</td>      <td>8.0</td>      <td>NaN</td>      <td>9.0</td>    </tr>    <tr>      <th>3</th>      <td>10.0</td>      <td>11.0</td>      <td>12.0</td>      <td>13.0</td>    </tr>  </tbody></table></div><p><strong>（2）删除整列</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.dropna(axis=<span class="string">"columns"</span>) <span class="comment"># 丢弃有缺失值的列</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>3.0</td>    </tr>    <tr>      <th>1</th>      <td>6.0</td>    </tr>    <tr>      <th>2</th>      <td>9.0</td>    </tr>    <tr>      <th>3</th>      <td>13.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">"D"</span>] = np.nan</span><br><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>NaN</td>      <td>2.0</td>      <td>NaN</td>    </tr>    <tr>      <th>1</th>      <td>NaN</td>      <td>4.0</td>      <td>5.0</td>      <td>NaN</td>    </tr>    <tr>      <th>2</th>      <td>7.0</td>      <td>8.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>3</th>      <td>10.0</td>      <td>11.0</td>      <td>12.0</td>      <td>NaN</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.dropna(axis=<span class="string">"columns"</span>, how=<span class="string">"all"</span>) <span class="comment"># 加入how='all'参数，则丢弃全为缺失值的列</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>NaN</td>      <td>2.0</td>    </tr>    <tr>      <th>1</th>      <td>NaN</td>      <td>4.0</td>      <td>5.0</td>    </tr>    <tr>      <th>2</th>      <td>7.0</td>      <td>8.0</td>      <td>NaN</td>    </tr>    <tr>      <th>3</th>      <td>10.0</td>      <td>11.0</td>      <td>12.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.dropna(axis=<span class="string">"columns"</span>, how=<span class="string">"any"</span>) <span class="comment"># 加入how='any'参数，则丢弃有缺失值的列</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>    </tr>    <tr>      <th>1</th>    </tr>    <tr>      <th>2</th>    </tr>    <tr>      <th>3</th>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data.loc[<span class="number">3</span>] = np.nan</span><br><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>NaN</td>      <td>2.0</td>      <td>NaN</td>    </tr>    <tr>      <th>1</th>      <td>NaN</td>      <td>4.0</td>      <td>5.0</td>      <td>NaN</td>    </tr>    <tr>      <th>2</th>      <td>7.0</td>      <td>8.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>3</th>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>      <td>NaN</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.dropna(how=<span class="string">"all"</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>NaN</td>      <td>2.0</td>      <td>NaN</td>    </tr>    <tr>      <th>1</th>      <td>NaN</td>      <td>4.0</td>      <td>5.0</td>      <td>NaN</td>    </tr>    <tr>      <th>2</th>      <td>7.0</td>      <td>8.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>  </tbody></table></div><p><strong>3、填充缺失值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = pd.DataFrame(np.array([[<span class="number">1</span>, np.nan, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">                              [np.nan, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">                              [<span class="number">7</span>, <span class="number">8</span>, np.nan, <span class="number">9</span>],</span><br><span class="line">                              [<span class="number">10</span>, <span class="number">11</span> , <span class="number">12</span>, <span class="number">13</span>]]), columns=[<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>])</span><br><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>NaN</td>      <td>2.0</td>      <td>3.0</td>    </tr>    <tr>      <th>1</th>      <td>NaN</td>      <td>4.0</td>      <td>5.0</td>      <td>6.0</td>    </tr>    <tr>      <th>2</th>      <td>7.0</td>      <td>8.0</td>      <td>NaN</td>      <td>9.0</td>    </tr>    <tr>      <th>3</th>      <td>10.0</td>      <td>11.0</td>      <td>12.0</td>      <td>13.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.fillna(value=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>5.0</td>      <td>2.0</td>      <td>3.0</td>    </tr>    <tr>      <th>1</th>      <td>5.0</td>      <td>4.0</td>      <td>5.0</td>      <td>6.0</td>    </tr>    <tr>      <th>2</th>      <td>7.0</td>      <td>8.0</td>      <td>5.0</td>      <td>9.0</td>    </tr>    <tr>      <th>3</th>      <td>10.0</td>      <td>11.0</td>      <td>12.0</td>      <td>13.0</td>    </tr>  </tbody></table></div><ul><li>用均值进行替换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fill = data.mean()</span><br><span class="line">fill</span><br></pre></td></tr></table></figure><pre><code>A    6.000000B    7.666667C    6.333333D    7.750000dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.fillna(value=fill)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>7.666667</td>      <td>2.000000</td>      <td>3.0</td>    </tr>    <tr>      <th>1</th>      <td>6.0</td>      <td>4.000000</td>      <td>5.000000</td>      <td>6.0</td>    </tr>    <tr>      <th>2</th>      <td>7.0</td>      <td>8.000000</td>      <td>6.333333</td>      <td>9.0</td>    </tr>    <tr>      <th>3</th>      <td>10.0</td>      <td>11.000000</td>      <td>12.000000</td>      <td>13.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fill = data.stack().mean()</span><br><span class="line">fill</span><br></pre></td></tr></table></figure><pre><code>7.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.fillna(value=fill)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>7.0</td>      <td>2.0</td>      <td>3.0</td>    </tr>    <tr>      <th>1</th>      <td>7.0</td>      <td>4.0</td>      <td>5.0</td>      <td>6.0</td>    </tr>    <tr>      <th>2</th>      <td>7.0</td>      <td>8.0</td>      <td>7.0</td>      <td>9.0</td>    </tr>    <tr>      <th>3</th>      <td>10.0</td>      <td>11.0</td>      <td>12.0</td>      <td>13.0</td>    </tr>  </tbody></table></div><h2 id="12-5-合并数据"><a href="#12-5-合并数据" class="headerlink" title="12.5 合并数据"></a>12.5 合并数据</h2><ul><li>构造一个生产DataFrame的函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_df</span><span class="params">(cols, ind)</span>:</span></span><br><span class="line">    <span class="string">"一个简单的DataFrame"</span></span><br><span class="line">    data = &#123;c: [str(c)+str(i) <span class="keyword">for</span> i <span class="keyword">in</span> ind]  <span class="keyword">for</span> c <span class="keyword">in</span> cols&#125;</span><br><span class="line">    <span class="keyword">return</span> pd.DataFrame(data, ind)</span><br><span class="line"></span><br><span class="line">make_df(<span class="string">"ABC"</span>, range(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>A0</td>      <td>B0</td>      <td>C0</td>    </tr>    <tr>      <th>1</th>      <td>A1</td>      <td>B1</td>      <td>C1</td>    </tr>    <tr>      <th>2</th>      <td>A2</td>      <td>B2</td>      <td>C2</td>    </tr>  </tbody></table></div><ul><li>垂直合并</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_1 = make_df(<span class="string">"AB"</span>, [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">df_2 = make_df(<span class="string">"AB"</span>, [<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(df_1)</span><br><span class="line">print(df_2)</span><br></pre></td></tr></table></figure><pre><code>    A   B1  A1  B12  A2  B2    A   B3  A3  B34  A4  B4</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([df_1, df_2])</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>A1</td>      <td>B1</td>    </tr>    <tr>      <th>2</th>      <td>A2</td>      <td>B2</td>    </tr>    <tr>      <th>3</th>      <td>A3</td>      <td>B3</td>    </tr>    <tr>      <th>4</th>      <td>A4</td>      <td>B4</td>    </tr>  </tbody></table></div><ul><li>水平合并</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_3 = make_df(<span class="string">"AB"</span>, [<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">df_4 = make_df(<span class="string">"CD"</span>, [<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">print(df_3)</span><br><span class="line">print(df_4)</span><br></pre></td></tr></table></figure><pre><code>    A   B0  A0  B01  A1  B1    C   D0  C0  D01  C1  D1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([df_3, df_4], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>A0</td>      <td>B0</td>      <td>C0</td>      <td>D0</td>    </tr>    <tr>      <th>1</th>      <td>A1</td>      <td>B1</td>      <td>C1</td>      <td>D1</td>    </tr>  </tbody></table></div><ul><li>索引重叠</li></ul><p>行重叠</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_5 = make_df(<span class="string">"AB"</span>, [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">df_6 = make_df(<span class="string">"AB"</span>, [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">print(df_5)</span><br><span class="line">print(df_6)</span><br></pre></td></tr></table></figure><pre><code>    A   B1  A1  B12  A2  B2    A   B1  A1  B12  A2  B2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([df_5, df_6])</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>A1</td>      <td>B1</td>    </tr>    <tr>      <th>2</th>      <td>A2</td>      <td>B2</td>    </tr>    <tr>      <th>1</th>      <td>A1</td>      <td>B1</td>    </tr>    <tr>      <th>2</th>      <td>A2</td>      <td>B2</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([df_5, df_6],ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>A1</td>      <td>B1</td>    </tr>    <tr>      <th>1</th>      <td>A2</td>      <td>B2</td>    </tr>    <tr>      <th>2</th>      <td>A1</td>      <td>B1</td>    </tr>    <tr>      <th>3</th>      <td>A2</td>      <td>B2</td>    </tr>  </tbody></table></div><p>列重叠</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_7 = make_df(<span class="string">"ABC"</span>, [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">df_8 = make_df(<span class="string">"BCD"</span>, [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">print(df_7)</span><br><span class="line">print(df_8)</span><br></pre></td></tr></table></figure><pre><code>    A   B   C1  A1  B1  C12  A2  B2  C2    B   C   D1  B1  C1  D12  B2  C2  D2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([df_7, df_8], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>A1</td>      <td>B1</td>      <td>C1</td>      <td>B1</td>      <td>C1</td>      <td>D1</td>    </tr>    <tr>      <th>2</th>      <td>A2</td>      <td>B2</td>      <td>C2</td>      <td>B2</td>      <td>C2</td>      <td>D2</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([df_7, df_8],axis=<span class="number">1</span>, ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>      <th>2</th>      <th>3</th>      <th>4</th>      <th>5</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>A1</td>      <td>B1</td>      <td>C1</td>      <td>B1</td>      <td>C1</td>      <td>D1</td>    </tr>    <tr>      <th>2</th>      <td>A2</td>      <td>B2</td>      <td>C2</td>      <td>B2</td>      <td>C2</td>      <td>D2</td>    </tr>  </tbody></table></div><ul><li>对齐合并merge()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_9 = make_df(<span class="string">"AB"</span>, [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">df_10 = make_df(<span class="string">"BC"</span>, [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">print(df_9)</span><br><span class="line">print(df_10)</span><br></pre></td></tr></table></figure><pre><code>    A   B1  A1  B12  A2  B2    B   C1  B1  C12  B2  C2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(df_9, df_10)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>A1</td>      <td>B1</td>      <td>C1</td>    </tr>    <tr>      <th>1</th>      <td>A2</td>      <td>B2</td>      <td>C2</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_9 = make_df(<span class="string">"AB"</span>, [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">df_10 = make_df(<span class="string">"CB"</span>, [<span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">print(df_9)</span><br><span class="line">print(df_10)</span><br></pre></td></tr></table></figure><pre><code>    A   B1  A1  B12  A2  B2    C   B2  C2  B21  C1  B1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.merge(df_9, df_10)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>A1</td>      <td>B1</td>      <td>C1</td>    </tr>    <tr>      <th>1</th>      <td>A2</td>      <td>B2</td>      <td>C2</td>    </tr>  </tbody></table></div><p>【例】 合并城市信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">population_dict = &#123;<span class="string">"city"</span>: (<span class="string">"BeiJing"</span>, <span class="string">"HangZhou"</span>, <span class="string">"ShenZhen"</span>),</span><br><span class="line">                   <span class="string">"pop"</span>: (<span class="number">2154</span>, <span class="number">981</span>, <span class="number">1303</span>)&#125;</span><br><span class="line">population = pd.DataFrame(population_dict)</span><br><span class="line">population</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>city</th>      <th>pop</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>BeiJing</td>      <td>2154</td>    </tr>    <tr>      <th>1</th>      <td>HangZhou</td>      <td>981</td>    </tr>    <tr>      <th>2</th>      <td>ShenZhen</td>      <td>1303</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GDP_dict = &#123;<span class="string">"city"</span>: (<span class="string">"BeiJing"</span>, <span class="string">"ShangHai"</span>, <span class="string">"HangZhou"</span>),</span><br><span class="line">            <span class="string">"GDP"</span>: (<span class="number">30320</span>, <span class="number">32680</span>, <span class="number">13468</span>)&#125;</span><br><span class="line">GDP = pd.DataFrame(GDP_dict)</span><br><span class="line">GDP</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>city</th>      <th>GDP</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>BeiJing</td>      <td>30320</td>    </tr>    <tr>      <th>1</th>      <td>ShangHai</td>      <td>32680</td>    </tr>    <tr>      <th>2</th>      <td>HangZhou</td>      <td>13468</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">city_info = pd.merge(population, GDP)</span><br><span class="line">city_info</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>city</th>      <th>pop</th>      <th>GDP</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>BeiJing</td>      <td>2154</td>      <td>30320</td>    </tr>    <tr>      <th>1</th>      <td>HangZhou</td>      <td>981</td>      <td>13468</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">city_info = pd.merge(population, GDP, how=<span class="string">"outer"</span>)</span><br><span class="line">city_info</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>city</th>      <th>pop</th>      <th>GDP</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>BeiJing</td>      <td>2154.0</td>      <td>30320.0</td>    </tr>    <tr>      <th>1</th>      <td>HangZhou</td>      <td>981.0</td>      <td>13468.0</td>    </tr>    <tr>      <th>2</th>      <td>ShenZhen</td>      <td>1303.0</td>      <td>NaN</td>    </tr>    <tr>      <th>3</th>      <td>ShangHai</td>      <td>NaN</td>      <td>32680.0</td>    </tr>  </tbody></table></div><h2 id="12-6-分组和数据透视表"><a href="#12-6-分组和数据透视表" class="headerlink" title="12.6 分组和数据透视表"></a>12.6 分组和数据透视表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">"key"</span>:[<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"C"</span>, <span class="string">"B"</span>, <span class="string">"A"</span>],</span><br><span class="line">                  <span class="string">"data1"</span>: range(<span class="number">6</span>),</span><br><span class="line">                  <span class="string">"data2"</span>: np.random.randint(<span class="number">0</span>, <span class="number">10</span>, size=<span class="number">6</span>)&#125;)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>A</td>      <td>0</td>      <td>3</td>    </tr>    <tr>      <th>1</th>      <td>B</td>      <td>1</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>C</td>      <td>2</td>      <td>4</td>    </tr>    <tr>      <th>3</th>      <td>C</td>      <td>3</td>      <td>6</td>    </tr>    <tr>      <th>4</th>      <td>B</td>      <td>4</td>      <td>6</td>    </tr>    <tr>      <th>5</th>      <td>A</td>      <td>5</td>      <td>3</td>    </tr>  </tbody></table></div><p><strong>（1）分组</strong></p><ul><li>延迟计算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">"key"</span>) <span class="comment"># 将原DataFrame按key分组</span></span><br></pre></td></tr></table></figure><pre><code>&lt;pandas.core.groupby.groupby.DataFrameGroupBy object at 0x0000012E335827B8&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">"key"</span>).sum()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>data2</th>    </tr>    <tr>      <th>key</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>A</th>      <td>5</td>      <td>6</td>    </tr>    <tr>      <th>B</th>      <td>5</td>      <td>9</td>    </tr>    <tr>      <th>C</th>      <td>5</td>      <td>10</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">"key"</span>).mean()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>data2</th>    </tr>    <tr>      <th>key</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>A</th>      <td>2.5</td>      <td>3.0</td>    </tr>    <tr>      <th>B</th>      <td>2.5</td>      <td>4.5</td>    </tr>    <tr>      <th>C</th>      <td>2.5</td>      <td>5.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> df.groupby(<span class="string">"key"</span>):</span><br><span class="line">    print(str(i))</span><br></pre></td></tr></table></figure><pre><code>(&#39;A&#39;,   key  data1  data20   A      0      35   A      5      3)(&#39;B&#39;,   key  data1  data21   B      1      34   B      4      6)(&#39;C&#39;,   key  data1  data22   C      2      43   C      3      6)</code></pre><ul><li>按列取值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">"key"</span>)[<span class="string">"data2"</span>].sum()</span><br></pre></td></tr></table></figure><pre><code>keyA     6B     9C    10Name: data2, dtype: int32</code></pre><ul><li>按组迭代</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> data, group <span class="keyword">in</span> df.groupby(<span class="string">"key"</span>):</span><br><span class="line">    print(<span class="string">"&#123;0:5&#125; shape=&#123;1&#125;"</span>.format(data, group.shape))</span><br></pre></td></tr></table></figure><pre><code>A     shape=(2, 3)B     shape=(2, 3)C     shape=(2, 3)</code></pre><ul><li>调用方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">"key"</span>)[<span class="string">"data1"</span>].describe()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>count</th>      <th>mean</th>      <th>std</th>      <th>min</th>      <th>25%</th>      <th>50%</th>      <th>75%</th>      <th>max</th>    </tr>    <tr>      <th>key</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>A</th>      <td>2.0</td>      <td>2.5</td>      <td>3.535534</td>      <td>0.0</td>      <td>1.25</td>      <td>2.5</td>      <td>3.75</td>      <td>5.0</td>    </tr>    <tr>      <th>B</th>      <td>2.0</td>      <td>2.5</td>      <td>2.121320</td>      <td>1.0</td>      <td>1.75</td>      <td>2.5</td>      <td>3.25</td>      <td>4.0</td>    </tr>    <tr>      <th>C</th>      <td>2.0</td>      <td>2.5</td>      <td>0.707107</td>      <td>2.0</td>      <td>2.25</td>      <td>2.5</td>      <td>2.75</td>      <td>3.0</td>    </tr>  </tbody></table></div><ul><li>支持更复杂的操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">"key"</span>).aggregate([<span class="string">"min"</span>, <span class="string">"median"</span>, <span class="string">"max"</span>])</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead tr th {        text-align: left;    }    .dataframe thead tr:last-of-type th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th colspan="3" halign="left">data1</th>      <th colspan="3" halign="left">data2</th>    </tr>    <tr>      <th></th>      <th>min</th>      <th>median</th>      <th>max</th>      <th>min</th>      <th>median</th>      <th>max</th>    </tr>    <tr>      <th>key</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>A</th>      <td>0</td>      <td>2.5</td>      <td>5</td>      <td>3</td>      <td>3.0</td>      <td>3</td>    </tr>    <tr>      <th>B</th>      <td>1</td>      <td>2.5</td>      <td>4</td>      <td>3</td>      <td>4.5</td>      <td>6</td>    </tr>    <tr>      <th>C</th>      <td>2</td>      <td>2.5</td>      <td>3</td>      <td>4</td>      <td>5.0</td>      <td>6</td>    </tr>  </tbody></table></div><ul><li>过滤</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_func</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="string">"data2"</span>].std() &gt; <span class="number">3</span></span><br><span class="line">df.groupby(<span class="string">"key"</span>)[<span class="string">"data2"</span>].std()</span><br></pre></td></tr></table></figure><pre><code>keyA    0.000000B    2.121320C    1.414214Name: data2, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">"key"</span>).filter(filter_func)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>  </tbody></table></div><ul><li>转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>A</td>      <td>0</td>      <td>3</td>    </tr>    <tr>      <th>1</th>      <td>B</td>      <td>1</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>C</td>      <td>2</td>      <td>4</td>    </tr>    <tr>      <th>3</th>      <td>C</td>      <td>3</td>      <td>6</td>    </tr>    <tr>      <th>4</th>      <td>B</td>      <td>4</td>      <td>6</td>    </tr>    <tr>      <th>5</th>      <td>A</td>      <td>5</td>      <td>3</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">"key"</span>).transform(<span class="keyword">lambda</span> x: x-x.mean())</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>-2.5</td>      <td>0.0</td>    </tr>    <tr>      <th>1</th>      <td>-1.5</td>      <td>-1.5</td>    </tr>    <tr>      <th>2</th>      <td>-0.5</td>      <td>-1.0</td>    </tr>    <tr>      <th>3</th>      <td>0.5</td>      <td>1.0</td>    </tr>    <tr>      <th>4</th>      <td>1.5</td>      <td>1.5</td>    </tr>    <tr>      <th>5</th>      <td>2.5</td>      <td>0.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>A</td>      <td>0</td>      <td>3</td>    </tr>    <tr>      <th>1</th>      <td>B</td>      <td>1</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>C</td>      <td>2</td>      <td>4</td>    </tr>    <tr>      <th>3</th>      <td>C</td>      <td>3</td>      <td>6</td>    </tr>    <tr>      <th>4</th>      <td>B</td>      <td>4</td>      <td>6</td>    </tr>    <tr>      <th>5</th>      <td>A</td>      <td>5</td>      <td>3</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">"key"</span>).apply(<span class="keyword">lambda</span> x: x-x.mean())</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>-2.5</td>      <td>0.0</td>    </tr>    <tr>      <th>1</th>      <td>-1.5</td>      <td>-1.5</td>    </tr>    <tr>      <th>2</th>      <td>-0.5</td>      <td>-1.0</td>    </tr>    <tr>      <th>3</th>      <td>0.5</td>      <td>1.0</td>    </tr>    <tr>      <th>4</th>      <td>1.5</td>      <td>1.5</td>    </tr>    <tr>      <th>5</th>      <td>2.5</td>      <td>0.0</td>    </tr>  </tbody></table></div><ul><li>apply（）方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>A</td>      <td>0</td>      <td>3</td>    </tr>    <tr>      <th>1</th>      <td>B</td>      <td>1</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>C</td>      <td>2</td>      <td>4</td>    </tr>    <tr>      <th>3</th>      <td>C</td>      <td>3</td>      <td>6</td>    </tr>    <tr>      <th>4</th>      <td>B</td>      <td>4</td>      <td>6</td>    </tr>    <tr>      <th>5</th>      <td>A</td>      <td>5</td>      <td>3</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">norm_by_data2</span><span class="params">(x)</span>:</span></span><br><span class="line">    x[<span class="string">"data1"</span>] /= x[<span class="string">"data2"</span>].sum()</span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">"key"</span>).apply(norm_by_data2)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>A</td>      <td>0.000000</td>      <td>3</td>    </tr>    <tr>      <th>1</th>      <td>B</td>      <td>0.111111</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>C</td>      <td>0.200000</td>      <td>4</td>    </tr>    <tr>      <th>3</th>      <td>C</td>      <td>0.300000</td>      <td>6</td>    </tr>    <tr>      <th>4</th>      <td>B</td>      <td>0.444444</td>      <td>6</td>    </tr>    <tr>      <th>5</th>      <td>A</td>      <td>0.833333</td>      <td>3</td>    </tr>  </tbody></table></div><ul><li>将列表、数组设为分组键</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>]</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>key</th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>A</td>      <td>0</td>      <td>3</td>    </tr>    <tr>      <th>1</th>      <td>B</td>      <td>1</td>      <td>3</td>    </tr>    <tr>      <th>2</th>      <td>C</td>      <td>2</td>      <td>4</td>    </tr>    <tr>      <th>3</th>      <td>C</td>      <td>3</td>      <td>6</td>    </tr>    <tr>      <th>4</th>      <td>B</td>      <td>4</td>      <td>6</td>    </tr>    <tr>      <th>5</th>      <td>A</td>      <td>5</td>      <td>3</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(L).sum()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>7</td>      <td>10</td>    </tr>    <tr>      <th>1</th>      <td>4</td>      <td>9</td>    </tr>    <tr>      <th>2</th>      <td>4</td>      <td>6</td>    </tr>  </tbody></table></div><ul><li>用字典将索引映射到分组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df2 = df.set_index(<span class="string">"key"</span>)</span><br><span class="line">df2</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>data2</th>    </tr>    <tr>      <th>key</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>A</th>      <td>0</td>      <td>3</td>    </tr>    <tr>      <th>B</th>      <td>1</td>      <td>3</td>    </tr>    <tr>      <th>C</th>      <td>2</td>      <td>4</td>    </tr>    <tr>      <th>C</th>      <td>3</td>      <td>6</td>    </tr>    <tr>      <th>B</th>      <td>4</td>      <td>6</td>    </tr>    <tr>      <th>A</th>      <td>5</td>      <td>3</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mapping = &#123;<span class="string">"A"</span>: <span class="string">"first"</span>, <span class="string">"B"</span>: <span class="string">"constant"</span>, <span class="string">"C"</span>: <span class="string">"constant"</span>&#125;</span><br><span class="line">df2.groupby(mapping).sum()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>constant</th>      <td>10</td>      <td>19</td>    </tr>    <tr>      <th>first</th>      <td>5</td>      <td>6</td>    </tr>  </tbody></table></div><ul><li>任意Python函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.groupby(str.lower).mean()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>2.5</td>      <td>3.0</td>    </tr>    <tr>      <th>b</th>      <td>2.5</td>      <td>4.5</td>    </tr>    <tr>      <th>c</th>      <td>2.5</td>      <td>5.0</td>    </tr>  </tbody></table></div><ul><li>多个有效值组成的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.groupby([str.lower, mapping]).mean()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>data1</th>      <th>data2</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <th>first</th>      <td>2.5</td>      <td>3.0</td>    </tr>    <tr>      <th>b</th>      <th>constant</th>      <td>2.5</td>      <td>4.5</td>    </tr>    <tr>      <th>c</th>      <th>constant</th>      <td>2.5</td>      <td>5.0</td>    </tr>  </tbody></table></div><p>【例1】 行星观测数据处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">planets = sns.load_dataset(<span class="string">"planets"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">planets.shape</span><br></pre></td></tr></table></figure><pre><code>(1035, 6)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">planets.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>method</th>      <th>number</th>      <th>orbital_period</th>      <th>mass</th>      <th>distance</th>      <th>year</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Radial Velocity</td>      <td>1</td>      <td>269.300</td>      <td>7.10</td>      <td>77.40</td>      <td>2006</td>    </tr>    <tr>      <th>1</th>      <td>Radial Velocity</td>      <td>1</td>      <td>874.774</td>      <td>2.21</td>      <td>56.95</td>      <td>2008</td>    </tr>    <tr>      <th>2</th>      <td>Radial Velocity</td>      <td>1</td>      <td>763.000</td>      <td>2.60</td>      <td>19.84</td>      <td>2011</td>    </tr>    <tr>      <th>3</th>      <td>Radial Velocity</td>      <td>1</td>      <td>326.030</td>      <td>19.40</td>      <td>110.62</td>      <td>2007</td>    </tr>    <tr>      <th>4</th>      <td>Radial Velocity</td>      <td>1</td>      <td>516.220</td>      <td>10.50</td>      <td>119.47</td>      <td>2009</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">planets.describe()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>number</th>      <th>orbital_period</th>      <th>mass</th>      <th>distance</th>      <th>year</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>1035.000000</td>      <td>992.000000</td>      <td>513.000000</td>      <td>808.000000</td>      <td>1035.000000</td>    </tr>    <tr>      <th>mean</th>      <td>1.785507</td>      <td>2002.917596</td>      <td>2.638161</td>      <td>264.069282</td>      <td>2009.070531</td>    </tr>    <tr>      <th>std</th>      <td>1.240976</td>      <td>26014.728304</td>      <td>3.818617</td>      <td>733.116493</td>      <td>3.972567</td>    </tr>    <tr>      <th>min</th>      <td>1.000000</td>      <td>0.090706</td>      <td>0.003600</td>      <td>1.350000</td>      <td>1989.000000</td>    </tr>    <tr>      <th>25%</th>      <td>1.000000</td>      <td>5.442540</td>      <td>0.229000</td>      <td>32.560000</td>      <td>2007.000000</td>    </tr>    <tr>      <th>50%</th>      <td>1.000000</td>      <td>39.979500</td>      <td>1.260000</td>      <td>55.250000</td>      <td>2010.000000</td>    </tr>    <tr>      <th>75%</th>      <td>2.000000</td>      <td>526.005000</td>      <td>3.040000</td>      <td>178.500000</td>      <td>2012.000000</td>    </tr>    <tr>      <th>max</th>      <td>7.000000</td>      <td>730000.000000</td>      <td>25.000000</td>      <td>8500.000000</td>      <td>2014.000000</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">planets.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>method</th>      <th>number</th>      <th>orbital_period</th>      <th>mass</th>      <th>distance</th>      <th>year</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Radial Velocity</td>      <td>1</td>      <td>269.300</td>      <td>7.10</td>      <td>77.40</td>      <td>2006</td>    </tr>    <tr>      <th>1</th>      <td>Radial Velocity</td>      <td>1</td>      <td>874.774</td>      <td>2.21</td>      <td>56.95</td>      <td>2008</td>    </tr>    <tr>      <th>2</th>      <td>Radial Velocity</td>      <td>1</td>      <td>763.000</td>      <td>2.60</td>      <td>19.84</td>      <td>2011</td>    </tr>    <tr>      <th>3</th>      <td>Radial Velocity</td>      <td>1</td>      <td>326.030</td>      <td>19.40</td>      <td>110.62</td>      <td>2007</td>    </tr>    <tr>      <th>4</th>      <td>Radial Velocity</td>      <td>1</td>      <td>516.220</td>      <td>10.50</td>      <td>119.47</td>      <td>2009</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">decade = <span class="number">10</span> * (planets[<span class="string">"year"</span>] // <span class="number">10</span>)</span><br><span class="line">decade.head()</span><br></pre></td></tr></table></figure><pre><code>0    20001    20002    20103    20004    2000Name: year, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">decade = decade.astype(str) + <span class="string">"s"</span></span><br><span class="line">decade.name = <span class="string">"decade"</span></span><br><span class="line">decade.head()</span><br></pre></td></tr></table></figure><pre><code>0    2000s1    2000s2    2010s3    2000s4    2000sName: decade, dtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">planets.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>method</th>      <th>number</th>      <th>orbital_period</th>      <th>mass</th>      <th>distance</th>      <th>year</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Radial Velocity</td>      <td>1</td>      <td>269.300</td>      <td>7.10</td>      <td>77.40</td>      <td>2006</td>    </tr>    <tr>      <th>1</th>      <td>Radial Velocity</td>      <td>1</td>      <td>874.774</td>      <td>2.21</td>      <td>56.95</td>      <td>2008</td>    </tr>    <tr>      <th>2</th>      <td>Radial Velocity</td>      <td>1</td>      <td>763.000</td>      <td>2.60</td>      <td>19.84</td>      <td>2011</td>    </tr>    <tr>      <th>3</th>      <td>Radial Velocity</td>      <td>1</td>      <td>326.030</td>      <td>19.40</td>      <td>110.62</td>      <td>2007</td>    </tr>    <tr>      <th>4</th>      <td>Radial Velocity</td>      <td>1</td>      <td>516.220</td>      <td>10.50</td>      <td>119.47</td>      <td>2009</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">planets.groupby([<span class="string">"method"</span>, decade]).sum()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>number</th>      <th>orbital_period</th>      <th>mass</th>      <th>distance</th>      <th>year</th>    </tr>    <tr>      <th>method</th>      <th>decade</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Astrometry</th>      <th>2010s</th>      <td>2</td>      <td>1.262360e+03</td>      <td>0.00000</td>      <td>35.75</td>      <td>4023</td>    </tr>    <tr>      <th rowspan="2" valign="top">Eclipse Timing Variations</th>      <th>2000s</th>      <td>5</td>      <td>1.930800e+04</td>      <td>6.05000</td>      <td>261.44</td>      <td>6025</td>    </tr>    <tr>      <th>2010s</th>      <td>10</td>      <td>2.345680e+04</td>      <td>4.20000</td>      <td>1000.00</td>      <td>12065</td>    </tr>    <tr>      <th rowspan="2" valign="top">Imaging</th>      <th>2000s</th>      <td>29</td>      <td>1.350935e+06</td>      <td>0.00000</td>      <td>956.83</td>      <td>40139</td>    </tr>    <tr>      <th>2010s</th>      <td>21</td>      <td>6.803750e+04</td>      <td>0.00000</td>      <td>1210.08</td>      <td>36208</td>    </tr>    <tr>      <th rowspan="2" valign="top">Microlensing</th>      <th>2000s</th>      <td>12</td>      <td>1.732500e+04</td>      <td>0.00000</td>      <td>0.00</td>      <td>20070</td>    </tr>    <tr>      <th>2010s</th>      <td>15</td>      <td>4.750000e+03</td>      <td>0.00000</td>      <td>41440.00</td>      <td>26155</td>    </tr>    <tr>      <th>Orbital Brightness Modulation</th>      <th>2010s</th>      <td>5</td>      <td>2.127920e+00</td>      <td>0.00000</td>      <td>2360.00</td>      <td>6035</td>    </tr>    <tr>      <th rowspan="3" valign="top">Pulsar Timing</th>      <th>1990s</th>      <td>9</td>      <td>1.900153e+02</td>      <td>0.00000</td>      <td>0.00</td>      <td>5978</td>    </tr>    <tr>      <th>2000s</th>      <td>1</td>      <td>3.652500e+04</td>      <td>0.00000</td>      <td>0.00</td>      <td>2003</td>    </tr>    <tr>      <th>2010s</th>      <td>1</td>      <td>9.070629e-02</td>      <td>0.00000</td>      <td>1200.00</td>      <td>2011</td>    </tr>    <tr>      <th>Pulsation Timing Variations</th>      <th>2000s</th>      <td>1</td>      <td>1.170000e+03</td>      <td>0.00000</td>      <td>0.00</td>      <td>2007</td>    </tr>    <tr>      <th rowspan="4" valign="top">Radial Velocity</th>      <th>1980s</th>      <td>1</td>      <td>8.388800e+01</td>      <td>11.68000</td>      <td>40.57</td>      <td>1989</td>    </tr>    <tr>      <th>1990s</th>      <td>52</td>      <td>1.091561e+04</td>      <td>68.17820</td>      <td>723.71</td>      <td>55943</td>    </tr>    <tr>      <th>2000s</th>      <td>475</td>      <td>2.633526e+05</td>      <td>945.31928</td>      <td>15201.16</td>      <td>619775</td>    </tr>    <tr>      <th>2010s</th>      <td>424</td>      <td>1.809630e+05</td>      <td>316.47890</td>      <td>11382.67</td>      <td>432451</td>    </tr>    <tr>      <th rowspan="2" valign="top">Transit</th>      <th>2000s</th>      <td>64</td>      <td>2.897102e+02</td>      <td>0.00000</td>      <td>31823.31</td>      <td>124462</td>    </tr>    <tr>      <th>2010s</th>      <td>712</td>      <td>8.087813e+03</td>      <td>1.47000</td>      <td>102419.46</td>      <td>673999</td>    </tr>    <tr>      <th>Transit Timing Variations</th>      <th>2010s</th>      <td>9</td>      <td>2.393505e+02</td>      <td>0.00000</td>      <td>3313.00</td>      <td>8050</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">planets.groupby([<span class="string">"method"</span>, decade])[[<span class="string">"number"</span>]].sum().unstack().fillna(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead tr th {        text-align: left;    }    .dataframe thead tr:last-of-type th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th colspan="4" halign="left">number</th>    </tr>    <tr>      <th>decade</th>      <th>1980s</th>      <th>1990s</th>      <th>2000s</th>      <th>2010s</th>    </tr>    <tr>      <th>method</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Astrometry</th>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>2.0</td>    </tr>    <tr>      <th>Eclipse Timing Variations</th>      <td>0.0</td>      <td>0.0</td>      <td>5.0</td>      <td>10.0</td>    </tr>    <tr>      <th>Imaging</th>      <td>0.0</td>      <td>0.0</td>      <td>29.0</td>      <td>21.0</td>    </tr>    <tr>      <th>Microlensing</th>      <td>0.0</td>      <td>0.0</td>      <td>12.0</td>      <td>15.0</td>    </tr>    <tr>      <th>Orbital Brightness Modulation</th>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>5.0</td>    </tr>    <tr>      <th>Pulsar Timing</th>      <td>0.0</td>      <td>9.0</td>      <td>1.0</td>      <td>1.0</td>    </tr>    <tr>      <th>Pulsation Timing Variations</th>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>    </tr>    <tr>      <th>Radial Velocity</th>      <td>1.0</td>      <td>52.0</td>      <td>475.0</td>      <td>424.0</td>    </tr>    <tr>      <th>Transit</th>      <td>0.0</td>      <td>0.0</td>      <td>64.0</td>      <td>712.0</td>    </tr>    <tr>      <th>Transit Timing Variations</th>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>9.0</td>    </tr>  </tbody></table></div><p><strong>（2）数据透视表</strong></p><p>【例2】泰坦尼克号乘客数据分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">titanic = sns.load_dataset(<span class="string">"titanic"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>survived</th>      <th>pclass</th>      <th>sex</th>      <th>age</th>      <th>sibsp</th>      <th>parch</th>      <th>fare</th>      <th>embarked</th>      <th>class</th>      <th>who</th>      <th>adult_male</th>      <th>deck</th>      <th>embark_town</th>      <th>alive</th>      <th>alone</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>3</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>7.2500</td>      <td>S</td>      <td>Third</td>      <td>man</td>      <td>True</td>      <td>NaN</td>      <td>Southampton</td>      <td>no</td>      <td>False</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>1</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>71.2833</td>      <td>C</td>      <td>First</td>      <td>woman</td>      <td>False</td>      <td>C</td>      <td>Cherbourg</td>      <td>yes</td>      <td>False</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>3</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>7.9250</td>      <td>S</td>      <td>Third</td>      <td>woman</td>      <td>False</td>      <td>NaN</td>      <td>Southampton</td>      <td>yes</td>      <td>True</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>1</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>53.1000</td>      <td>S</td>      <td>First</td>      <td>woman</td>      <td>False</td>      <td>C</td>      <td>Southampton</td>      <td>yes</td>      <td>False</td>    </tr>    <tr>      <th>4</th>      <td>0</td>      <td>3</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>8.0500</td>      <td>S</td>      <td>Third</td>      <td>man</td>      <td>True</td>      <td>NaN</td>      <td>Southampton</td>      <td>no</td>      <td>True</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T = titanic[titanic.age.notnull()].copy()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T.age.apply(<span class="keyword">lambda</span> x: <span class="number">60</span> <span class="keyword">if</span> x&gt;=<span class="number">60</span> <span class="keyword">else</span> x)</span><br><span class="line">T.age.value_counts()</span><br></pre></td></tr></table></figure><pre><code>24.00    3022.00    2718.00    2619.00    2530.00    2528.00    2521.00    2425.00    2336.00    2229.00    2032.00    1827.00    1835.00    1826.00    1816.00    1731.00    1720.00    1533.00    1523.00    1534.00    1539.00    1417.00    1342.00    1340.00    1345.00    1238.00    1150.00    102.00     104.00     1047.00     9         ..71.00     259.00     263.00     20.83      230.50     270.00     257.00     20.75      213.00     210.00     264.00     240.50     232.50     245.50     220.50     124.50     10.67      114.50     10.92      174.00     134.50     180.00     112.00     136.50     153.00     155.50     170.50     166.00     123.50     10.42      1Name: age, Length: 88, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Age = <span class="number">10</span>*(T[<span class="string">"age"</span>]//<span class="number">10</span>)</span><br><span class="line">Age = Age.astype(int)</span><br><span class="line">Age.head()</span><br><span class="line">Age.value_counts()</span><br></pre></td></tr></table></figure><pre><code>20    22030    16710    10240     890      6250     4860     1970      680      1Name: age, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Age.astype(str)+<span class="string">"s"</span></span><br></pre></td></tr></table></figure><pre><code>0      20s1      30s2      20s3      30s4      30s6      50s7       0s8      20s9      10s10      0s11     50s12     20s13     30s14     10s15     50s16      0s18     30s20     30s21     30s22     10s23     20s24      0s25     30s27     10s30     40s33     60s34     20s35     40s37     20s38     10s      ... 856    40s857    50s858    20s860    40s861    20s862    40s864    20s865    40s866    20s867    30s869     0s870    20s871    40s872    30s873    40s874    20s875    10s876    20s877    10s879    50s880    20s881    30s882    20s883    20s884    20s885    30s886    20s887    10s889    20s890    30sName: age, Length: 714, dtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T.groupby([<span class="string">"sex"</span>, Age])[<span class="string">"survived"</span>].mean().unstack()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>age</th>      <th>0</th>      <th>10</th>      <th>20</th>      <th>30</th>      <th>40</th>      <th>50</th>      <th>60</th>      <th>70</th>      <th>80</th>    </tr>    <tr>      <th>sex</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>female</th>      <td>0.633333</td>      <td>0.755556</td>      <td>0.722222</td>      <td>0.833333</td>      <td>0.687500</td>      <td>0.888889</td>      <td>1.000000</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>male</th>      <td>0.593750</td>      <td>0.122807</td>      <td>0.168919</td>      <td>0.214953</td>      <td>0.210526</td>      <td>0.133333</td>      <td>0.133333</td>      <td>0.0</td>      <td>1.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T.age = Age</span><br><span class="line">T.pivot_table(<span class="string">"survived"</span>, index=<span class="string">"sex"</span>, columns=<span class="string">"age"</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>age</th>      <th>0</th>      <th>10</th>      <th>20</th>      <th>30</th>      <th>40</th>      <th>50</th>      <th>60</th>      <th>70</th>      <th>80</th>    </tr>    <tr>      <th>sex</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>female</th>      <td>0.633333</td>      <td>0.755556</td>      <td>0.722222</td>      <td>0.833333</td>      <td>0.687500</td>      <td>0.888889</td>      <td>1.000000</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>male</th>      <td>0.593750</td>      <td>0.122807</td>      <td>0.168919</td>      <td>0.214953</td>      <td>0.210526</td>      <td>0.133333</td>      <td>0.133333</td>      <td>0.0</td>      <td>1.0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.describe()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>survived</th>      <th>pclass</th>      <th>age</th>      <th>sibsp</th>      <th>parch</th>      <th>fare</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>891.000000</td>      <td>891.000000</td>      <td>714.000000</td>      <td>891.000000</td>      <td>891.000000</td>      <td>891.000000</td>    </tr>    <tr>      <th>mean</th>      <td>0.383838</td>      <td>2.308642</td>      <td>29.699118</td>      <td>0.523008</td>      <td>0.381594</td>      <td>32.204208</td>    </tr>    <tr>      <th>std</th>      <td>0.486592</td>      <td>0.836071</td>      <td>14.526497</td>      <td>1.102743</td>      <td>0.806057</td>      <td>49.693429</td>    </tr>    <tr>      <th>min</th>      <td>0.000000</td>      <td>1.000000</td>      <td>0.420000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>    </tr>    <tr>      <th>25%</th>      <td>0.000000</td>      <td>2.000000</td>      <td>20.125000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>7.910400</td>    </tr>    <tr>      <th>50%</th>      <td>0.000000</td>      <td>3.000000</td>      <td>28.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>14.454200</td>    </tr>    <tr>      <th>75%</th>      <td>1.000000</td>      <td>3.000000</td>      <td>38.000000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>31.000000</td>    </tr>    <tr>      <th>max</th>      <td>1.000000</td>      <td>3.000000</td>      <td>80.000000</td>      <td>8.000000</td>      <td>6.000000</td>      <td>512.329200</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.groupby(<span class="string">"sex"</span>)[[<span class="string">"survived"</span>]].mean()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>survived</th>    </tr>    <tr>      <th>sex</th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>female</th>      <td>0.742038</td>    </tr>    <tr>      <th>male</th>      <td>0.188908</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.groupby(<span class="string">"sex"</span>)[<span class="string">"survived"</span>].mean()</span><br></pre></td></tr></table></figure><pre><code>sexfemale    0.742038male      0.188908Name: survived, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.groupby([<span class="string">"sex"</span>, <span class="string">"class"</span>])[<span class="string">"survived"</span>].aggregate(<span class="string">"mean"</span>).unstack()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>class</th>      <th>First</th>      <th>Second</th>      <th>Third</th>    </tr>    <tr>      <th>sex</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>female</th>      <td>0.968085</td>      <td>0.921053</td>      <td>0.500000</td>    </tr>    <tr>      <th>male</th>      <td>0.368852</td>      <td>0.157407</td>      <td>0.135447</td>    </tr>  </tbody></table></div><ul><li>数据透视表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.pivot_table(<span class="string">"survived"</span>, index=<span class="string">"sex"</span>, columns=<span class="string">"class"</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>class</th>      <th>First</th>      <th>Second</th>      <th>Third</th>    </tr>    <tr>      <th>sex</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>female</th>      <td>0.968085</td>      <td>0.921053</td>      <td>0.500000</td>    </tr>    <tr>      <th>male</th>      <td>0.368852</td>      <td>0.157407</td>      <td>0.135447</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.pivot_table(<span class="string">"survived"</span>, index=<span class="string">"sex"</span>, columns=<span class="string">"class"</span>, aggfunc=<span class="string">"mean"</span>, margins=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>class</th>      <th>First</th>      <th>Second</th>      <th>Third</th>      <th>All</th>    </tr>    <tr>      <th>sex</th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>female</th>      <td>0.968085</td>      <td>0.921053</td>      <td>0.500000</td>      <td>0.742038</td>    </tr>    <tr>      <th>male</th>      <td>0.368852</td>      <td>0.157407</td>      <td>0.135447</td>      <td>0.188908</td>    </tr>    <tr>      <th>All</th>      <td>0.629630</td>      <td>0.472826</td>      <td>0.242363</td>      <td>0.383838</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.pivot_table(index=<span class="string">"sex"</span>, columns=<span class="string">"class"</span>, aggfunc=&#123;<span class="string">"survived"</span>: <span class="string">"sum"</span>, <span class="string">"fare"</span>: <span class="string">"mean"</span>&#125;)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead tr th {        text-align: left;    }    .dataframe thead tr:last-of-type th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr>      <th></th>      <th colspan="3" halign="left">fare</th>      <th colspan="3" halign="left">survived</th>    </tr>    <tr>      <th>class</th>      <th>First</th>      <th>Second</th>      <th>Third</th>      <th>First</th>      <th>Second</th>      <th>Third</th>    </tr>    <tr>      <th>sex</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>female</th>      <td>106.125798</td>      <td>21.970121</td>      <td>16.118810</td>      <td>91</td>      <td>70</td>      <td>72</td>    </tr>    <tr>      <th>male</th>      <td>67.226127</td>      <td>19.741782</td>      <td>12.661633</td>      <td>45</td>      <td>17</td>      <td>47</td>    </tr>  </tbody></table></div><h2 id="12-7-其他"><a href="#12-7-其他" class="headerlink" title="12.7 其他"></a>12.7 其他</h2><p><strong>（1）向量化字符串操作</strong></p><p><strong>（2） 处理时间序列</strong></p><p><strong>（3） 多级索引：用于多维数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">base_data = np.array([[<span class="number">1771</span>, <span class="number">11115</span> ],</span><br><span class="line">                      [<span class="number">2154</span>, <span class="number">30320</span>],</span><br><span class="line">                      [<span class="number">2141</span>, <span class="number">14070</span>],</span><br><span class="line">                      [<span class="number">2424</span>, <span class="number">32680</span>],</span><br><span class="line">                      [<span class="number">1077</span>, <span class="number">7806</span>],</span><br><span class="line">                      [<span class="number">1303</span>, <span class="number">24222</span>],</span><br><span class="line">                      [<span class="number">798</span>, <span class="number">4789</span>],</span><br><span class="line">                      [<span class="number">981</span>, <span class="number">13468</span>]]) </span><br><span class="line">data = pd.DataFrame(base_data, index=[[<span class="string">"BeiJing"</span>,<span class="string">"BeiJing"</span>,<span class="string">"ShangHai"</span>,<span class="string">"ShangHai"</span>,<span class="string">"ShenZhen"</span>,<span class="string">"ShenZhen"</span>,<span class="string">"HangZhou"</span>,<span class="string">"HangZhou"</span>]\</span><br><span class="line">                                     , [<span class="number">2008</span>, <span class="number">2018</span>]*<span class="number">4</span>], columns=[<span class="string">"population"</span>, <span class="string">"GDP"</span>])</span><br><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>population</th>      <th>GDP</th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">BeiJing</th>      <th>2008</th>      <td>1771</td>      <td>11115</td>    </tr>    <tr>      <th>2018</th>      <td>2154</td>      <td>30320</td>    </tr>    <tr>      <th rowspan="2" valign="top">ShangHai</th>      <th>2008</th>      <td>2141</td>      <td>14070</td>    </tr>    <tr>      <th>2018</th>      <td>2424</td>      <td>32680</td>    </tr>    <tr>      <th rowspan="2" valign="top">ShenZhen</th>      <th>2008</th>      <td>1077</td>      <td>7806</td>    </tr>    <tr>      <th>2018</th>      <td>1303</td>      <td>24222</td>    </tr>    <tr>      <th rowspan="2" valign="top">HangZhou</th>      <th>2008</th>      <td>798</td>      <td>4789</td>    </tr>    <tr>      <th>2018</th>      <td>981</td>      <td>13468</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data.index.names = [<span class="string">"city"</span>, <span class="string">"year"</span>]</span><br><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>population</th>      <th>GDP</th>    </tr>    <tr>      <th>city</th>      <th>year</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">BeiJing</th>      <th>2008</th>      <td>1771</td>      <td>11115</td>    </tr>    <tr>      <th>2018</th>      <td>2154</td>      <td>30320</td>    </tr>    <tr>      <th rowspan="2" valign="top">ShangHai</th>      <th>2008</th>      <td>2141</td>      <td>14070</td>    </tr>    <tr>      <th>2018</th>      <td>2424</td>      <td>32680</td>    </tr>    <tr>      <th rowspan="2" valign="top">ShenZhen</th>      <th>2008</th>      <td>1077</td>      <td>7806</td>    </tr>    <tr>      <th>2018</th>      <td>1303</td>      <td>24222</td>    </tr>    <tr>      <th rowspan="2" valign="top">HangZhou</th>      <th>2008</th>      <td>798</td>      <td>4789</td>    </tr>    <tr>      <th>2018</th>      <td>981</td>      <td>13468</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">"GDP"</span>]</span><br></pre></td></tr></table></figure><pre><code>city      yearBeiJing   2008    11115          2018    30320ShangHai  2008    14070          2018    32680ShenZhen  2008     7806          2018    24222HangZhou  2008     4789          2018    13468Name: GDP, dtype: int32</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.loc[<span class="string">"ShangHai"</span>, <span class="string">"GDP"</span>]</span><br></pre></td></tr></table></figure><pre><code>year2008    140702018    32680Name: GDP, dtype: int32</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.loc[<span class="string">"ShangHai"</span>, <span class="number">2018</span>][<span class="string">"GDP"</span>]</span><br></pre></td></tr></table></figure><pre><code>32680</code></pre><p><strong>（4） 高性能的Pandas：eval（）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1, df2, df3, df4 = (pd.DataFrame(np.random.random((<span class="number">10000</span>,<span class="number">100</span>))) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%timeit (df1+df2)/(df3+df4)</span><br></pre></td></tr></table></figure><pre><code>10.7 ms ± 323 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre><ul><li>减少了复合代数式计算中间过程的内存分配</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%timeit pd.eval(<span class="string">"(df1+df2)/(df3+df4)"</span>)</span><br></pre></td></tr></table></figure><pre><code>7.69 ms ± 288 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.allclose((df1+df2)/(df3+df4), pd.eval(<span class="string">"(df1+df2)/(df3+df4)"</span>))</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><ul><li>实现列间运算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.random((<span class="number">1000</span>, <span class="number">3</span>)), columns=list(<span class="string">"ABC"</span>))</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.444109</td>      <td>0.403663</td>      <td>0.865813</td>    </tr>    <tr>      <th>1</th>      <td>0.294881</td>      <td>0.458937</td>      <td>0.235739</td>    </tr>    <tr>      <th>2</th>      <td>0.312199</td>      <td>0.256650</td>      <td>0.393556</td>    </tr>    <tr>      <th>3</th>      <td>0.080160</td>      <td>0.176736</td>      <td>0.385579</td>    </tr>    <tr>      <th>4</th>      <td>0.830258</td>      <td>0.352358</td>      <td>0.186917</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res_1 = pd.eval(<span class="string">"(df.A+df.B)/(df.C-1)"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res_2 = df.eval(<span class="string">"(A+B)/(C-1)"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.allclose(res_1, res_2)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">"D"</span>] = pd.eval(<span class="string">"(df.A+df.B)/(df.C-1)"</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.444109</td>      <td>0.403663</td>      <td>0.865813</td>      <td>-6.317854</td>    </tr>    <tr>      <th>1</th>      <td>0.294881</td>      <td>0.458937</td>      <td>0.235739</td>      <td>-0.986336</td>    </tr>    <tr>      <th>2</th>      <td>0.312199</td>      <td>0.256650</td>      <td>0.393556</td>      <td>-0.938006</td>    </tr>    <tr>      <th>3</th>      <td>0.080160</td>      <td>0.176736</td>      <td>0.385579</td>      <td>-0.418112</td>    </tr>    <tr>      <th>4</th>      <td>0.830258</td>      <td>0.352358</td>      <td>0.186917</td>      <td>-1.454484</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.eval(<span class="string">"D=(A+B)/(C-1)"</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.444109</td>      <td>0.403663</td>      <td>0.865813</td>      <td>-6.317854</td>    </tr>    <tr>      <th>1</th>      <td>0.294881</td>      <td>0.458937</td>      <td>0.235739</td>      <td>-0.986336</td>    </tr>    <tr>      <th>2</th>      <td>0.312199</td>      <td>0.256650</td>      <td>0.393556</td>      <td>-0.938006</td>    </tr>    <tr>      <th>3</th>      <td>0.080160</td>      <td>0.176736</td>      <td>0.385579</td>      <td>-0.418112</td>    </tr>    <tr>      <th>4</th>      <td>0.830258</td>      <td>0.352358</td>      <td>0.186917</td>      <td>-1.454484</td>    </tr>  </tbody></table></div><ul><li>使用局部变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">column_mean = df.mean(axis=<span class="number">1</span>)</span><br><span class="line">res = df.eval(<span class="string">"A+@column_mean"</span>)</span><br><span class="line">res.head()</span><br></pre></td></tr></table></figure><pre><code>0   -0.7069581    0.2956872    0.3182993    0.1362514    0.809020dtype: float64</code></pre><p><strong>（4） 高性能的Pandas：query（）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.444109</td>      <td>0.403663</td>      <td>0.865813</td>      <td>-6.317854</td>    </tr>    <tr>      <th>1</th>      <td>0.294881</td>      <td>0.458937</td>      <td>0.235739</td>      <td>-0.986336</td>    </tr>    <tr>      <th>2</th>      <td>0.312199</td>      <td>0.256650</td>      <td>0.393556</td>      <td>-0.938006</td>    </tr>    <tr>      <th>3</th>      <td>0.080160</td>      <td>0.176736</td>      <td>0.385579</td>      <td>-0.418112</td>    </tr>    <tr>      <th>4</th>      <td>0.830258</td>      <td>0.352358</td>      <td>0.186917</td>      <td>-1.454484</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%timeit df[(df.A &lt; <span class="number">0.5</span>) &amp; (df.B &gt; <span class="number">0.5</span>)]</span><br></pre></td></tr></table></figure><pre><code>1.1 ms ± 150 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%timeit df.query(<span class="string">"(A &lt; 0.5)&amp;(B &gt; 0.5)"</span>)</span><br></pre></td></tr></table></figure><pre><code>3.46 ms ± 509 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.query(<span class="string">"(A &lt; 0.5)&amp;(B &gt; 0.5)"</span>).head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>      <th>C</th>      <th>D</th>    </tr>  </thead>  <tbody>    <tr>      <th>5</th>      <td>0.125739</td>      <td>0.557392</td>      <td>0.556752</td>      <td>-1.541193</td>    </tr>    <tr>      <th>6</th>      <td>0.264407</td>      <td>0.738427</td>      <td>0.669857</td>      <td>-3.037572</td>    </tr>    <tr>      <th>11</th>      <td>0.427045</td>      <td>0.719621</td>      <td>0.732786</td>      <td>-4.291193</td>    </tr>    <tr>      <th>12</th>      <td>0.050538</td>      <td>0.864942</td>      <td>0.883998</td>      <td>-7.891950</td>    </tr>    <tr>      <th>19</th>      <td>0.310231</td>      <td>0.558427</td>      <td>0.627987</td>      <td>-2.335022</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.allclose(df[(df.A &lt; <span class="number">0.5</span>) &amp; (df.B &gt; <span class="number">0.5</span>)], df.query(<span class="string">"(A &lt; 0.5)&amp;(B &gt; 0.5)"</span>))</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><p><strong>（5）eval（）和query（）的使用时机</strong></p><p>小数组时，普通方法反而更快</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.values.nbytes</span><br></pre></td></tr></table></figure><pre><code>32000</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1.values.nbytes</span><br></pre></td></tr></table></figure><pre><code>8000000</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础11(Numpy库)</title>
      <link href="/2020/08/15/deepshare_python%E5%9F%BA%E7%A1%8011/"/>
      <url>/2020/08/15/deepshare_python%E5%9F%BA%E7%A1%8011/</url>
      
        <content type="html"><![CDATA[<h1 id="第十一章-Numpy库"><a href="#第十一章-Numpy库" class="headerlink" title="第十一章 Numpy库"></a>第十一章 Numpy库</h1><h2 id="11-1-为什么要用Numpy"><a href="#11-1-为什么要用Numpy" class="headerlink" title="11.1 为什么要用Numpy"></a>11.1 为什么要用Numpy</h2><h3 id="11-1-1-ensp-低效的Python-for循环"><a href="#11-1-1-ensp-低效的Python-for循环" class="headerlink" title="11.1.1 &ensp;低效的Python for循环"></a>11.1.1 &ensp;低效的Python for循环</h3><p>【例】 求100万个数的倒数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_reciprocals</span><span class="params">(values)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> values:      <span class="comment"># 每遍历到一个元素，就要判断其类型，并查找适用于该数据类型的正确函数</span></span><br><span class="line">        res.append(<span class="number">1</span>/value)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">values = list(range(<span class="number">1</span>, <span class="number">1000000</span>))</span><br><span class="line">%timeit compute_reciprocals(values)</span><br></pre></td></tr></table></figure><pre><code>166 ms ± 6.57 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre><p>%timeit ：ipython中统计运行时间的魔术方法（多次运行取平均值）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">values = np.arange(<span class="number">1</span>, <span class="number">1000000</span>)</span><br><span class="line">%timeit <span class="number">1</span>/values</span><br></pre></td></tr></table></figure><pre><code>5.76 ms ± 90.3 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre><p><strong>实现相同计算，Numpy的运行速度是Python循环的25倍，产生了质的飞跃</strong></p><h3 id="11-1-2-ensp-Numpy为什么如此高效"><a href="#11-1-2-ensp-Numpy为什么如此高效" class="headerlink" title="11.1.2 &ensp;Numpy为什么如此高效"></a>11.1.2 &ensp;Numpy为什么如此高效</h3><p><strong>Numpy 是由C语言编写的</strong></p><p><strong>1、编译型语言VS解释型语言</strong></p><p>C语言执行时，对代码进行整体编译，速度更快</p><p><strong>2、连续单一类型存储VS分散多变类型存储</strong></p><p>（1）Numpy数组内的数据类型必须是统一的，如全部是浮点型，而Python列表支持任意类型数据的填充</p><p>（2）Numpy数组内的数据<strong>连续存储在内存中</strong>，而Python列表的数据<strong>分散在内存中</strong></p><p> &emsp; <strong>这种存储结构，与一些更加高效的底层处理方式更加的契合</strong></p><p><strong>3、多线程VS线程锁</strong></p><p>Python语言执行时有线程锁，无法实现真正的多线程并行，而C语言可以</p><h3 id="11-1-3-ensp-什么时候用Numpy"><a href="#11-1-3-ensp-什么时候用Numpy" class="headerlink" title="11.1.3 &ensp;什么时候用Numpy"></a>11.1.3 &ensp;什么时候用Numpy</h3><p><strong>在数据处理的过程中，遇到使用“Python for循环” 实现一些向量化、矩阵化操作的时候，要优先考虑用Numpy</strong></p><p>如：  1、两个向量的点乘  </p><p>&emsp;  &emsp;2、矩阵乘法  </p><h2 id="11-2-Numpy数组的创建"><a href="#11-2-Numpy数组的创建" class="headerlink" title="11.2 Numpy数组的创建"></a>11.2 Numpy数组的创建</h2><h3 id="11-2-1-从列表开始创建"><a href="#11-2-1-从列表开始创建" class="headerlink" title="11.2.1 从列表开始创建"></a>11.2.1 从列表开始创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><pre><code>[1 2 3 4 5]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(type(x))</span><br><span class="line">print(x.shape)</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;numpy.ndarray&#39;&gt;(5,)</code></pre><ul><li>设置数组的数据类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], dtype=<span class="string">"float32"</span>)</span><br><span class="line">print(x)</span><br><span class="line">print(type(x[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><pre><code>[1. 2. 3. 4. 5.]&lt;class &#39;numpy.float32&#39;&gt;</code></pre><ul><li>二维数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">             [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">             [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line">print(x)</span><br><span class="line">print(x.shape)</span><br></pre></td></tr></table></figure><pre><code>[[1 2 3] [4 5 6] [7 8 9]](3, 3)</code></pre><h3 id="11-2-2-从头创建数组"><a href="#11-2-2-从头创建数组" class="headerlink" title="11.2.2 从头创建数组"></a>11.2.2 从头创建数组</h3><p><strong>（1）创建长度为5的数组，值都为0</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.zeros(<span class="number">5</span>, dtype=int)</span><br></pre></td></tr></table></figure><pre><code>array([0, 0, 0, 0, 0])</code></pre><p><strong>（2）创建一个2*4的浮点型数组，值都为1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.ones((<span class="number">2</span>, <span class="number">4</span>), dtype=float)</span><br></pre></td></tr></table></figure><pre><code>array([[1., 1., 1., 1.],       [1., 1., 1., 1.]])</code></pre><p><strong>（3）创建一个3*5的数组，值都为8.8</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.full((<span class="number">3</span>, <span class="number">5</span>), <span class="number">8.8</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[8.8, 8.8, 8.8, 8.8, 8.8],       [8.8, 8.8, 8.8, 8.8, 8.8],       [8.8, 8.8, 8.8, 8.8, 8.8]])</code></pre><p><strong>（4）创建一个3*3的单位矩阵</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.eye(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[1., 0., 0.],       [0., 1., 0.],       [0., 0., 1.]])</code></pre><p><strong>（5）创建一个线性序列数组，从1开始，到15结束，步长为2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">1</span>, <span class="number">15</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>array([ 1,  3,  5,  7,  9, 11, 13])</code></pre><p><strong>（6）创建一个4个元素的数组，这四个数均匀的分配到0~1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><pre><code>array([0.        , 0.33333333, 0.66666667, 1.        ])</code></pre><p><strong>（7）创建一个10个元素的数组，形成1~10^9的等比数列</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.logspace(<span class="number">0</span>, <span class="number">9</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><pre><code>array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,       1.e+08, 1.e+09])</code></pre><p><strong>（8）创建一个3*3的，在0~1之间均匀分布的随机数构成的数组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.random((<span class="number">3</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[0.95965665, 0.112545  , 0.54850803],       [0.88975115, 0.93301959, 0.01296354],       [0.54707445, 0.04428504, 0.23868503]])</code></pre><p><strong>（9）创建一个3*3的，均值为0，标准差为1的正态分布随机数构成的数组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.normal(<span class="number">0</span>, <span class="number">1</span>, (<span class="number">3</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[-1.3891312 ,  1.41949716, -0.44351392],       [-1.40654635, -0.27605271,  0.27551558],       [ 1.01144325,  0.52382962, -0.37434268]])</code></pre><p><strong>（10）创建一个3*3的，在[0,10)之间随机整数构成的数组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[9, 9, 2],       [3, 1, 0],       [2, 5, 8]])</code></pre><p><strong>（11）随机重排列</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>])</span><br><span class="line">np.random.permutation(x)       <span class="comment"># 生产新列表</span></span><br></pre></td></tr></table></figure><pre><code>array([30, 20, 10, 40])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(x)</span><br><span class="line">np.random.shuffle(x)          <span class="comment"># 修改原列表</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><pre><code>[10 20 30 40][30 10 40 20]</code></pre><p><strong>（12）随机采样</strong></p><ul><li>按指定形状采样</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>, <span class="number">25</span>, dtype = float)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22.,       23., 24.])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.choice(x, size=(<span class="number">4</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[18., 20., 23.],       [19., 15., 11.],       [19., 22., 19.],       [15., 14., 20.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.choice(<span class="number">10</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><pre><code>array([6, 8, 8, 1, 6, 4, 9, 1, 2, 7])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">5</span>).reshape(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">x</span><br><span class="line">x.sum(axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[10]])</code></pre><ul><li>按概率采样</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>, <span class="number">25</span>, dtype = float)</span><br><span class="line">np.random.choice(x, size=(<span class="number">4</span>, <span class="number">3</span>), p=x/np.sum(x))</span><br></pre></td></tr></table></figure><pre><code>array([[10., 16., 19.],       [13., 14., 10.],       [22., 23., 10.],       [21., 10., 24.]])</code></pre><h2 id="11-3-Numpy数组的性质"><a href="#11-3-Numpy数组的性质" class="headerlink" title="11.3 Numpy数组的性质"></a>11.3 Numpy数组的性质</h2><h3 id="11-3-1-数组的属性"><a href="#11-3-1-数组的属性" class="headerlink" title="11.3.1 数组的属性"></a>11.3.1 数组的属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.randint(<span class="number">10</span>, size=(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([[4, 1, 6, 3],       [5, 3, 0, 9],       [2, 8, 4, 1]])</code></pre><p><strong>1、数组的形状shape</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.shape</span><br></pre></td></tr></table></figure><pre><code>(3, 4)</code></pre><p><strong>2、数组的维度ndim</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.ndim</span><br></pre></td></tr></table></figure><pre><code>2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y = np.arange(<span class="number">10</span>)</span><br><span class="line">y</span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y.ndim</span><br></pre></td></tr></table></figure><pre><code>1</code></pre><p><strong>3、数组的大小size</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.size</span><br></pre></td></tr></table></figure><pre><code>12</code></pre><p><strong>4、数组的数据类型dtype</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.dtype</span><br></pre></td></tr></table></figure><pre><code>dtype(&#39;int32&#39;)</code></pre><h3 id="11-3-2-数组索引"><a href="#11-3-2-数组索引" class="headerlink" title="11.3.2 数组索引"></a>11.3.2 数组索引</h3><p><strong>1、一维数组的索引</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x1 = np.arange(<span class="number">10</span>)</span><br><span class="line">x1</span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x1[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x1[<span class="number">5</span>]</span><br></pre></td></tr></table></figure><pre><code>5</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x1[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><pre><code>9</code></pre><p><strong>2、多维数组的索引——以二维为例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x2 = np.random.randint(<span class="number">0</span>, <span class="number">20</span>, (<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">x2</span><br></pre></td></tr></table></figure><pre><code>array([[17,  8, 15],       [17, 11, 13]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2[<span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>17</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>17</code></pre><p><strong>注意：numpy数组的数据类型是固定的，向一个整型数组插入一个浮点值，浮点值会向下进行取整</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">1.618</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2</span><br></pre></td></tr></table></figure><pre><code>array([[ 1,  8, 15],       [17, 11, 13]])</code></pre><h3 id="11-3-3-数组的切片"><a href="#11-3-3-数组的切片" class="headerlink" title="11.3.3 数组的切片"></a>11.3.3 数组的切片</h3><p><strong>1、一维数组——跟列表一样</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x1 = np.arange(<span class="number">10</span>)</span><br><span class="line">x1</span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x1[:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 2])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x1[<span class="number">3</span>:]</span><br></pre></td></tr></table></figure><pre><code>array([3, 4, 5, 6, 7, 8, 9])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x1[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><pre><code>array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])</code></pre><p><strong>2、多维数组——以二维为例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x2 = np.random.randint(<span class="number">20</span>, size=(<span class="number">3</span>,<span class="number">4</span>)) </span><br><span class="line">x2</span><br></pre></td></tr></table></figure><pre><code>array([[13,  1,  2,  8],       [ 1,  7,  5, 14],       [ 2,  7,  8, 16]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2[:<span class="number">2</span>, :<span class="number">3</span>]             <span class="comment"># 前两行，前三列</span></span><br></pre></td></tr></table></figure><pre><code>array([[13,  1,  2],       [ 1,  7,  5]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2[:<span class="number">2</span>, <span class="number">0</span>:<span class="number">3</span>:<span class="number">2</span>]       <span class="comment"># 前两行 前三列（每隔一列）</span></span><br></pre></td></tr></table></figure><pre><code>array([[13,  2],       [ 1,  5]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2[::<span class="number">-1</span>, ::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><pre><code>array([[16,  8,  7,  2],       [14,  5,  7,  1],       [ 8,  2,  1, 13]])</code></pre><p><strong>3、获取数组的行和列</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x3 = np.random.randint(<span class="number">20</span>, size=(<span class="number">3</span>,<span class="number">4</span>)) </span><br><span class="line">x3</span><br></pre></td></tr></table></figure><pre><code>array([[ 0, 14, 13,  2],       [ 5, 18,  7, 16],       [13,  7,  6,  4]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x3[<span class="number">1</span>, :]   <span class="comment">#第一行  从0开始计数</span></span><br></pre></td></tr></table></figure><pre><code>array([ 5, 18,  7, 16])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x3[<span class="number">1</span>]    <span class="comment"># 第一行简写</span></span><br></pre></td></tr></table></figure><pre><code>array([ 5, 18,  7, 16])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x3[:, <span class="number">2</span>]  <span class="comment"># 第二列   从0开始计数</span></span><br></pre></td></tr></table></figure><pre><code>array([13,  7,  6])</code></pre><p><strong>4、切片获取的是视图，而非副本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x4 = np.random.randint(<span class="number">20</span>, size=(<span class="number">3</span>,<span class="number">4</span>)) </span><br><span class="line">x4</span><br></pre></td></tr></table></figure><pre><code>array([[12, 13, 16,  6],       [ 0,  9, 11, 15],       [12,  7,  7,  2]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x5 = x4[:<span class="number">2</span>, :<span class="number">2</span>]</span><br><span class="line">x5</span><br></pre></td></tr></table></figure><pre><code>array([[12, 13],       [ 0,  9]])</code></pre><p><strong>注意：视图元素发生修改，则原数组亦发生相应修改</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x5[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">x5</span><br></pre></td></tr></table></figure><pre><code>array([[ 0, 13],       [ 0,  9]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x4</span><br></pre></td></tr></table></figure><pre><code>array([[ 0, 13, 16,  6],       [ 0,  9, 11, 15],       [12,  7,  7,  2]])</code></pre><p><strong>修改切片的安全方式：copy</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x4 = np.random.randint(<span class="number">20</span>, size=(<span class="number">3</span>,<span class="number">4</span>)) </span><br><span class="line">x4</span><br></pre></td></tr></table></figure><pre><code>array([[ 4,  5,  6,  5],       [ 7, 15,  9,  4],       [ 7,  8, 19,  3]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x6 = x4[:<span class="number">2</span>, :<span class="number">2</span>].copy()</span><br><span class="line">x6</span><br></pre></td></tr></table></figure><pre><code>array([[ 4,  5],       [ 7, 15]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x6[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">x6</span><br></pre></td></tr></table></figure><pre><code>array([[ 0,  5],       [ 7, 15]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x4</span><br></pre></td></tr></table></figure><pre><code>array([[ 4,  5,  6,  5],       [ 7, 15,  9,  4],       [ 7,  8, 19,  3]])</code></pre><h3 id="11-3-4-数组的变形"><a href="#11-3-4-数组的变形" class="headerlink" title="11.3.4 数组的变形"></a>11.3.4 数组的变形</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x5 = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">12</span>,))</span><br><span class="line">x5</span><br></pre></td></tr></table></figure><pre><code>array([8, 5, 7, 7, 9, 5, 2, 5, 9, 6, 0, 3])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x5.shape</span><br></pre></td></tr></table></figure><pre><code>(12,)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x6 = x5.reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">x6</span><br></pre></td></tr></table></figure><pre><code>array([[8, 5, 7, 7],       [9, 5, 2, 5],       [9, 6, 0, 3]])</code></pre><p><strong>注意：reshape返回的是视图，而非副本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x6[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">x5</span><br></pre></td></tr></table></figure><pre><code>array([0, 5, 7, 7, 9, 5, 2, 5, 9, 6, 0, 3])</code></pre><p><strong>一维向量转行向量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x7 = x5.reshape(<span class="number">1</span>, x5.shape[<span class="number">0</span>])    </span><br><span class="line">x7</span><br></pre></td></tr></table></figure><pre><code>array([[0, 5, 7, 7, 9, 5, 2, 5, 9, 6, 0, 3]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x8 = x5[np.newaxis, :]</span><br><span class="line">x8</span><br></pre></td></tr></table></figure><pre><code>array([[0, 5, 7, 7, 9, 5, 2, 5, 9, 6, 0, 3]])</code></pre><p><strong>一维向量转列向量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x7 = x5.reshape(x5.shape[<span class="number">0</span>], <span class="number">1</span>)    </span><br><span class="line">x7</span><br></pre></td></tr></table></figure><pre><code>array([[0],       [5],       [7],       [7],       [9],       [5],       [2],       [5],       [9],       [6],       [0],       [3]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x8 = x5[:, np.newaxis]</span><br><span class="line">x8</span><br></pre></td></tr></table></figure><pre><code>array([[0],       [5],       [7],       [7],       [9],       [5],       [2],       [5],       [9],       [6],       [0],       [3]])</code></pre><p><strong>多维向量转一维向量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x6 = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">x6</span><br></pre></td></tr></table></figure><pre><code>array([[6, 1, 2, 1],       [5, 3, 9, 8],       [0, 6, 0, 0]])</code></pre><p><strong>flatten返回的是副本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x9 = x6.flatten()</span><br><span class="line">x9</span><br></pre></td></tr></table></figure><pre><code>array([6, 1, 2, 1, 5, 3, 9, 8, 0, 6, 0, 0])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x9[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">x6</span><br></pre></td></tr></table></figure><pre><code>array([[6, 1, 2, 1],       [5, 3, 9, 8],       [0, 6, 0, 0]])</code></pre><p><strong>ravel返回的是视图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x10 = x6.ravel()</span><br><span class="line">x10</span><br></pre></td></tr></table></figure><pre><code>array([6, 1, 2, 1, 5, 3, 9, 8, 0, 6, 0, 0])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x10[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">x6</span><br></pre></td></tr></table></figure><pre><code>array([[1, 1, 2, 1],       [5, 3, 9, 8],       [0, 6, 0, 0]])</code></pre><p><strong>reshape返回的是视图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x11 = x6.reshape(<span class="number">-1</span>)</span><br><span class="line">x11</span><br></pre></td></tr></table></figure><pre><code>array([1, 1, 2, 1, 5, 3, 9, 8, 0, 6, 0, 0])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x11[<span class="number">0</span>]=<span class="number">10</span></span><br><span class="line">x6</span><br></pre></td></tr></table></figure><pre><code>array([[10,  1,  2,  1],       [ 5,  3,  9,  8],       [ 0,  6,  0,  0]])</code></pre><h3 id="11-3-5-数组的拼接"><a href="#11-3-5-数组的拼接" class="headerlink" title="11.3.5 数组的拼接"></a>11.3.5 数组的拼接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x1 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">              [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">x2 = np.array([[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]])</span><br></pre></td></tr></table></figure><p><strong>1、水平拼接——非视图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x3 = np.hstack([x1, x2])</span><br><span class="line">x3</span><br></pre></td></tr></table></figure><pre><code>array([[1, 2, 3, 7, 8, 9],       [4, 5, 6, 0, 1, 2]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x3[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">x1</span><br></pre></td></tr></table></figure><pre><code>array([[1, 2, 3],       [4, 5, 6]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x4 = np.c_[x1, x2]</span><br><span class="line">x4</span><br></pre></td></tr></table></figure><pre><code>array([[1, 2, 3, 7, 8, 9],       [4, 5, 6, 0, 1, 2]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x4[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">x1</span><br></pre></td></tr></table></figure><pre><code>array([[1, 2, 3],       [4, 5, 6]])</code></pre><p><strong>2、垂直拼接——非视图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x1 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">              [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">x2 = np.array([[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x5 = np.vstack([x1, x2])</span><br><span class="line">x5</span><br></pre></td></tr></table></figure><pre><code>array([[1, 2, 3],       [4, 5, 6],       [7, 8, 9],       [0, 1, 2]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x6 = np.r_[x1, x2]</span><br><span class="line">x6</span><br></pre></td></tr></table></figure><pre><code>array([[1, 2, 3],       [4, 5, 6],       [7, 8, 9],       [0, 1, 2]])</code></pre><h3 id="11-3-6-数组的分裂"><a href="#11-3-6-数组的分裂" class="headerlink" title="11.3.6 数组的分裂"></a>11.3.6 数组的分裂</h3><p><strong>1、split的用法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x6 = np.arange(<span class="number">10</span>)</span><br><span class="line">x6</span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x6 = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">x6</span><br></pre></td></tr></table></figure><pre><code>array([[7, 6, 7, 3],       [7, 1, 8, 2],       [6, 4, 5, 2]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x1, x2, x3 = np.split(x6, [<span class="number">2</span>, <span class="number">7</span>])</span><br><span class="line">print(x1, x2, x3)</span><br></pre></td></tr></table></figure><pre><code>[[7 6 7 3] [7 1 8 2]] [[6 4 5 2]] []</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help(np.split)</span><br></pre></td></tr></table></figure><pre><code>Help on function split in module numpy.lib.shape_base:split(ary, indices_or_sections, axis=0)    Split an array into multiple sub-arrays.    Parameters    ----------    ary : ndarray        Array to be divided into sub-arrays.    indices_or_sections : int or 1-D array        If `indices_or_sections` is an integer, N, the array will be divided        into N equal arrays along `axis`.  If such a split is not possible,        an error is raised.        If `indices_or_sections` is a 1-D array of sorted integers, the entries        indicate where along `axis` the array is split.  For example,        ``[2, 3]`` would, for ``axis=0``, result in          - ary[:2]          - ary[2:3]          - ary[3:]        If an index exceeds the dimension of the array along `axis`,        an empty sub-array is returned correspondingly.    axis : int, optional        The axis along which to split, default is 0.    Returns    -------    sub-arrays : list of ndarrays        A list of sub-arrays.    Raises    ------    ValueError        If `indices_or_sections` is given as an integer, but        a split does not result in equal division.    See Also    --------    array_split : Split an array into multiple sub-arrays of equal or                  near-equal size.  Does not raise an exception if                  an equal division cannot be made.    hsplit : Split array into multiple sub-arrays horizontally (column-wise).    vsplit : Split array into multiple sub-arrays vertically (row wise).    dsplit : Split array into multiple sub-arrays along the 3rd axis (depth).    concatenate : Join a sequence of arrays along an existing axis.    stack : Join a sequence of arrays along a new axis.    hstack : Stack arrays in sequence horizontally (column wise).    vstack : Stack arrays in sequence vertically (row wise).    dstack : Stack arrays in sequence depth wise (along third dimension).    Examples    --------    &gt;&gt;&gt; x = np.arange(9.0)    &gt;&gt;&gt; np.split(x, 3)    [array([ 0.,  1.,  2.]), array([ 3.,  4.,  5.]), array([ 6.,  7.,  8.])]    &gt;&gt;&gt; x = np.arange(8.0)    &gt;&gt;&gt; np.split(x, [3, 5, 6, 10])    [array([ 0.,  1.,  2.]),     array([ 3.,  4.]),     array([ 5.]),     array([ 6.,  7.]),     array([], dtype=float64)]</code></pre><p><strong>2、hsplit的用法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x7 = np.arange(<span class="number">1</span>, <span class="number">26</span>).reshape(<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">x7</span><br></pre></td></tr></table></figure><pre><code>array([[ 1,  2,  3,  4,  5],       [ 6,  7,  8,  9, 10],       [11, 12, 13, 14, 15],       [16, 17, 18, 19, 20],       [21, 22, 23, 24, 25]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">left, middle, right = np.hsplit(x7, [<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"left:\n"</span>, left)            <span class="comment"># 第0~1列</span></span><br><span class="line">print(<span class="string">"middle:\n"</span>, middle)        <span class="comment"># 第2~3列</span></span><br><span class="line">print(<span class="string">"right:\n"</span>, right)          <span class="comment"># 第4列</span></span><br></pre></td></tr></table></figure><pre><code>left: [[ 1  2] [ 6  7] [11 12] [16 17] [21 22]]middle: [[ 3  4] [ 8  9] [13 14] [18 19] [23 24]]right: [[ 5] [10] [15] [20] [25]]</code></pre><p><strong>3、vsplit的用法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x7 = np.arange(<span class="number">1</span>, <span class="number">26</span>).reshape(<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">x7</span><br></pre></td></tr></table></figure><pre><code>array([[ 1,  2,  3,  4,  5],       [ 6,  7,  8,  9, 10],       [11, 12, 13, 14, 15],       [16, 17, 18, 19, 20],       [21, 22, 23, 24, 25]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upper, middle, lower = np.vsplit(x7, [<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line">print(<span class="string">"upper:\n"</span>, upper)         <span class="comment"># 第0~1行</span></span><br><span class="line">print(<span class="string">"middle:\n"</span>, middle)       <span class="comment"># 第2~3行</span></span><br><span class="line">print(<span class="string">"lower:\n"</span>, lower)         <span class="comment"># 第4行</span></span><br></pre></td></tr></table></figure><pre><code>upper: [[ 1  2  3  4  5] [ 6  7  8  9 10]]middle: [[11 12 13 14 15] [16 17 18 19 20]]lower: [[21 22 23 24 25]]</code></pre><h2 id="11-4-Numpy四大运算"><a href="#11-4-Numpy四大运算" class="headerlink" title="11.4 Numpy四大运算"></a>11.4 Numpy四大运算</h2><h3 id="11-4-1-向量化运算"><a href="#11-4-1-向量化运算" class="headerlink" title="11.4.1 向量化运算"></a>11.4.1 向量化运算</h3><p><strong>1、与数字的加减乘除等</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x1 = np.arange(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line">x1</span><br></pre></td></tr></table></figure><pre><code>array([1, 2, 3, 4, 5])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"x1+5"</span>, x1+<span class="number">5</span>)</span><br><span class="line">print(<span class="string">"x1-5"</span>, x1<span class="number">-5</span>)</span><br><span class="line">print(<span class="string">"x1*5"</span>, x1*<span class="number">5</span>)</span><br><span class="line">print(<span class="string">"x1/5"</span>, x1/<span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>x1+5 [ 6  7  8  9 10]x1-5 [-4 -3 -2 -1  0]x1*5 [ 5 10 15 20 25]x1/5 [0.2 0.4 0.6 0.8 1. ]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"-x1"</span>, -x1)</span><br><span class="line">print(<span class="string">"x1**2"</span>, x1**<span class="number">2</span>)</span><br><span class="line">print(<span class="string">"x1//2"</span>, x1//<span class="number">2</span>)</span><br><span class="line">print(<span class="string">"x1%2"</span>, x1%<span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>-x1 [-1 -2 -3 -4 -5]x1**2 [ 1  4  9 16 25]x1//2 [0 1 1 2 2]x1%2 [1 0 1 0 1]</code></pre><p><strong>2、绝对值、三角函数、指数、对数</strong></p><p>（1）绝对值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x2 = np.array([<span class="number">1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">-2</span>, <span class="number">0</span>])</span><br><span class="line">x2</span><br></pre></td></tr></table></figure><pre><code>array([ 1, -1,  2, -2,  0])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abs(x2)</span><br></pre></td></tr></table></figure><pre><code>array([1, 1, 2, 2, 0])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.abs(x2)</span><br></pre></td></tr></table></figure><pre><code>array([1, 1, 2, 2, 0])</code></pre><p>（2）三角函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">theta = np.linspace(<span class="number">0</span>, np.pi, <span class="number">3</span>)</span><br><span class="line">theta</span><br></pre></td></tr></table></figure><pre><code>array([0.        , 1.57079633, 3.14159265])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"sin(theta)"</span>, np.sin(theta))</span><br><span class="line">print(<span class="string">"con(theta)"</span>, np.cos(theta))</span><br><span class="line">print(<span class="string">"tan(theta)"</span>, np.tan(theta))</span><br></pre></td></tr></table></figure><pre><code>sin(theta) [0.0000000e+00 1.0000000e+00 1.2246468e-16]con(theta) [ 1.000000e+00  6.123234e-17 -1.000000e+00]tan(theta) [ 0.00000000e+00  1.63312394e+16 -1.22464680e-16]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">0</span> ,<span class="number">-1</span>]</span><br><span class="line">print(<span class="string">"arcsin(x)"</span>, np.arcsin(x))</span><br><span class="line">print(<span class="string">"arccon(x)"</span>, np.arccos(x))</span><br><span class="line">print(<span class="string">"arctan(x)"</span>, np.arctan(x))</span><br></pre></td></tr></table></figure><pre><code>arcsin(x) [ 1.57079633  0.         -1.57079633]arccon(x) [0.         1.57079633 3.14159265]arctan(x) [ 0.78539816  0.         -0.78539816]</code></pre><p>（3）指数运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">3</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 2])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.exp(x)</span><br></pre></td></tr></table></figure><pre><code>array([1.        , 2.71828183, 7.3890561 ])</code></pre><p>（4）对数运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span> ,<span class="number">10</span>])</span><br><span class="line">print(<span class="string">"ln(x)"</span>, np.log(x))</span><br><span class="line">print(<span class="string">"log2(x)"</span>, np.log2(x))</span><br><span class="line">print(<span class="string">"log10(x)"</span>, np.log10(x))</span><br></pre></td></tr></table></figure><pre><code>ln(x) [0.         0.69314718 1.38629436 2.07944154 2.30258509]log2(x) [0.         1.         2.         3.         3.32192809]log10(x) [0.         0.30103    0.60205999 0.90308999 1.        ]</code></pre><p><strong>3、两个数组的运算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x1 = np.arange(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line">x1</span><br></pre></td></tr></table></figure><pre><code>array([1, 2, 3, 4, 5])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x2 = np.arange(<span class="number">6</span>,<span class="number">11</span>)</span><br><span class="line">x2</span><br></pre></td></tr></table></figure><pre><code>array([ 6,  7,  8,  9, 10])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"x1+x2:"</span>, x1+x2)</span><br><span class="line">print(<span class="string">"x1-x2:"</span>, x1-x2)</span><br><span class="line">print(<span class="string">"x1*x2:"</span>, x1*x2)</span><br><span class="line">print(<span class="string">"x1/x2:"</span>, x1/x2)</span><br></pre></td></tr></table></figure><pre><code>x1+x2: [ 7  9 11 13 15]x1-x2: [-5 -5 -5 -5 -5]x1*x2: [ 6 14 24 36 50]x1/x2: [0.16666667 0.28571429 0.375      0.44444444 0.5       ]</code></pre><h3 id="11-4-2-矩阵运算"><a href="#11-4-2-矩阵运算" class="headerlink" title="11.4.2 矩阵运算"></a>11.4.2 矩阵运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([[0, 1, 2],       [3, 4, 5],       [6, 7, 8]])</code></pre><ul><li>矩阵的转置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y = x.T</span><br><span class="line">y</span><br></pre></td></tr></table></figure><pre><code>array([[0, 3, 6],       [1, 4, 7],       [2, 5, 8]])</code></pre><ul><li>矩阵乘法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">             [<span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line">y = np.array([[<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">             [<span class="number">1</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.dot(y)</span><br></pre></td></tr></table></figure><pre><code>array([[0, 1],       [1, 2]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.dot(x, y)</span><br></pre></td></tr></table></figure><pre><code>array([[0, 1],       [1, 2]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y.dot(x)</span><br></pre></td></tr></table></figure><pre><code>array([[1, 1],       [2, 1]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.dot(y, x)</span><br></pre></td></tr></table></figure><pre><code>array([[1, 1],       [2, 1]])</code></pre><p><strong>注意跟x*y的区别</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x*y</span><br></pre></td></tr></table></figure><pre><code>array([[0, 0],       [1, 1]])</code></pre><h3 id="11-4-3-广播运算"><a href="#11-4-3-广播运算" class="headerlink" title="11.4.3 广播运算"></a>11.4.3 广播运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">3</span>).reshape(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([[0, 1, 2]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x+<span class="number">5</span></span><br></pre></td></tr></table></figure><pre><code>array([[5, 6, 7]])</code></pre><p><strong>规则</strong></p><p>如果两个数组的形状在维度上不匹配</p><p>那么数组的形式会沿着维度为1的维度进行扩展以匹配另一个数组的形状。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x1 = np.ones((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">x1</span><br></pre></td></tr></table></figure><pre><code>array([[1., 1., 1.],       [1., 1., 1.],       [1., 1., 1.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x2 = np.arange(<span class="number">3</span>).reshape(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">x2</span><br></pre></td></tr></table></figure><pre><code>array([[0, 1, 2]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x1+x2</span><br></pre></td></tr></table></figure><pre><code>array([[1., 2., 3.],       [1., 2., 3.],       [1., 2., 3.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x3 = np.logspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">10</span>, base=<span class="number">2</span>).reshape(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">x3</span><br></pre></td></tr></table></figure><pre><code>array([[   2.,    4.,    8.,   16.,   32.],       [  64.,  128.,  256.,  512., 1024.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x4 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>]])</span><br><span class="line">x4</span><br></pre></td></tr></table></figure><pre><code>array([[ 1,  2,  4,  8, 16]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x3/x4</span><br></pre></td></tr></table></figure><pre><code>array([[ 2.,  2.,  2.,  2.,  2.],       [64., 64., 64., 64., 64.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x5 = np.arange(<span class="number">3</span>).reshape(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">x5</span><br></pre></td></tr></table></figure><pre><code>array([[0],       [1],       [2]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x6 = np.arange(<span class="number">3</span>).reshape(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">x6</span><br></pre></td></tr></table></figure><pre><code>array([[0, 1, 2]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x5+x6</span><br></pre></td></tr></table></figure><pre><code>array([[0, 1, 2],       [1, 2, 3],       [2, 3, 4]])</code></pre><h3 id="11-4-4-比较运算和掩码"><a href="#11-4-4-比较运算和掩码" class="headerlink" title="11.4.4 比较运算和掩码"></a>11.4.4 比较运算和掩码</h3><p><strong>1、比较运算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x1 = np.random.randint(<span class="number">100</span>, size=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">x1</span><br></pre></td></tr></table></figure><pre><code>array([[ 2,  2, 95, 94, 80, 41, 29, 18,  0, 80],       [67, 31, 11, 58, 39, 42, 49, 37,  0, 11],       [ 3, 21, 15, 54, 41, 97, 92, 85, 91, 88],       [95, 25, 49, 74, 67, 12, 31, 23, 27, 82],       [69, 88, 85, 93, 74, 37,  3,  7,  9, 89],       [25, 30, 27, 24, 71, 81, 81, 31, 52, 38],       [44, 37, 84, 83, 60, 95, 91, 86,  2, 51],       [75, 93, 70, 10, 92, 70, 29, 35, 45, 97],       [83, 34, 50, 49, 58, 62,  9, 48, 17, 78],       [62, 98, 90, 84, 88, 34, 19, 59, 98, 31]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x1 &gt; <span class="number">50</span></span><br></pre></td></tr></table></figure><pre><code>array([[False, False,  True,  True,  True, False, False, False, False,         True],       [ True, False, False,  True, False, False, False, False, False,        False],       [False, False, False,  True, False,  True,  True,  True,  True,         True],       [ True, False, False,  True,  True, False, False, False, False,         True],       [ True,  True,  True,  True,  True, False, False, False, False,         True],       [False, False, False, False,  True,  True,  True, False,  True,        False],       [False, False,  True,  True,  True,  True,  True,  True, False,         True],       [ True,  True,  True, False,  True,  True, False, False, False,         True],       [ True, False, False, False,  True,  True, False, False, False,         True],       [ True,  True,  True,  True,  True, False, False,  True,  True,        False]])</code></pre><p><strong>2、操作布尔数组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x2 = np.random.randint(<span class="number">10</span>, size=(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">x2</span><br></pre></td></tr></table></figure><pre><code>array([[3, 1, 4, 6],       [1, 1, 4, 8],       [2, 4, 8, 4]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(x2 &gt; <span class="number">5</span>)</span><br><span class="line">np.sum(x2 &gt; <span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>[[False False False  True] [False False False  True] [False False  True False]]3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.all(x2 &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.any(x2 == <span class="number">6</span>)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.all(x2 &lt; <span class="number">9</span>, axis=<span class="number">1</span>)   <span class="comment"># 按行进行判断</span></span><br></pre></td></tr></table></figure><pre><code>array([ True,  True,  True])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2</span><br></pre></td></tr></table></figure><pre><code>array([[3, 1, 4, 6],       [1, 1, 4, 8],       [2, 4, 8, 4]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(x2 &lt; <span class="number">9</span>) &amp; (x2 &gt;<span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>array([[False, False, False,  True],       [False, False, False,  True],       [False, False,  True, False]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum((x2 &lt; <span class="number">9</span>) &amp; (x2 &gt;<span class="number">5</span>))</span><br></pre></td></tr></table></figure><pre><code>3</code></pre><p><strong>3、将布尔数组作为掩码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2</span><br></pre></td></tr></table></figure><pre><code>array([[3, 1, 4, 6],       [1, 1, 4, 8],       [2, 4, 8, 4]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2 &gt; <span class="number">5</span></span><br></pre></td></tr></table></figure><pre><code>array([[False, False, False,  True],       [False, False, False,  True],       [False, False,  True, False]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2[x2 &gt; <span class="number">5</span>]</span><br></pre></td></tr></table></figure><pre><code>array([6, 8, 8])</code></pre><h3 id="11-4-5-花哨的索引"><a href="#11-4-5-花哨的索引" class="headerlink" title="11.4.5  花哨的索引"></a>11.4.5  花哨的索引</h3><p><strong>1、一维数组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.randint(<span class="number">100</span>, size=<span class="number">10</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([80,  0, 75, 19, 19, 27, 15, 24, 35, 92])</code></pre><p><strong>注意：结果的形状与索引数组ind一致</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ind = [<span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>]</span><br><span class="line">x[ind]</span><br></pre></td></tr></table></figure><pre><code>array([75, 15, 92])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ind = np.array([[<span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">               [<span class="number">2</span>, <span class="number">3</span>]])</span><br><span class="line">x[ind]</span><br></pre></td></tr></table></figure><pre><code>array([[ 0, 80],       [75, 19]])</code></pre><p><strong>2、多维数组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([[ 0,  1,  2,  3],       [ 4,  5,  6,  7],       [ 8,  9, 10, 11]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">row = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">col = np.array([<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>])</span><br><span class="line">x[row, col]               <span class="comment"># x(0, 1) x(1, 3) x(2, 0)</span></span><br></pre></td></tr></table></figure><pre><code>array([1, 7, 8])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">row[:, np.newaxis]       <span class="comment"># 列向量</span></span><br></pre></td></tr></table></figure><pre><code>array([[0],       [1],       [2]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[row[:, np.newaxis], col]    <span class="comment"># 广播机制</span></span><br></pre></td></tr></table></figure><pre><code>array([[ 1,  3,  0],       [ 5,  7,  4],       [ 9, 11,  8]])</code></pre><h2 id="11-5-其他Numpy通用函数"><a href="#11-5-其他Numpy通用函数" class="headerlink" title="11.5 其他Numpy通用函数"></a>11.5 其他Numpy通用函数</h2><h3 id="11-5-1-数值排序"><a href="#11-5-1-数值排序" class="headerlink" title="11.5.1  数值排序"></a>11.5.1  数值排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.randint(<span class="number">20</span>, <span class="number">50</span>, size=<span class="number">10</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([30, 28, 46, 46, 39, 34, 41, 45, 46, 42])</code></pre><ul><li>产生新的排序数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sort(x)</span><br></pre></td></tr></table></figure><pre><code>array([28, 30, 34, 39, 41, 42, 45, 46, 46, 46])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([30, 28, 46, 46, 39, 34, 41, 45, 46, 42])</code></pre><ul><li>替换原数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x.sort()</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([28, 30, 34, 39, 41, 42, 45, 46, 46, 46])</code></pre><ul><li>获得排序索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.randint(<span class="number">20</span>, <span class="number">50</span>, size=<span class="number">10</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([39, 41, 27, 43, 43, 26, 30, 22, 22, 26])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i = np.argsort(x)</span><br><span class="line">i</span><br></pre></td></tr></table></figure><pre><code>array([7, 8, 5, 9, 2, 6, 0, 1, 3, 4], dtype=int64)</code></pre><h3 id="11-5-2-最大最小值"><a href="#11-5-2-最大最小值" class="headerlink" title="11.5.2  最大最小值"></a>11.5.2  最大最小值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.randint(<span class="number">20</span>, <span class="number">50</span>, size=<span class="number">10</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([24, 29, 40, 22, 26, 21, 40, 39, 41, 38])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"max:"</span>, np.max(x))</span><br><span class="line">print(<span class="string">"min:"</span>, np.min(x))</span><br></pre></td></tr></table></figure><pre><code>max: 41min: 21</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"max_index:"</span>, np.argmax(x))</span><br><span class="line">print(<span class="string">"min_index:"</span>, np.argmin(x))</span><br></pre></td></tr></table></figure><pre><code>max_index: 8min_index: 5</code></pre><h3 id="11-5-3-数值求和、求积"><a href="#11-5-3-数值求和、求积" class="headerlink" title="11.5.3  数值求和、求积"></a>11.5.3  数值求和、求积</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([1, 2, 3, 4, 5])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.sum()</span><br></pre></td></tr></table></figure><pre><code>15</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum(x)</span><br></pre></td></tr></table></figure><pre><code>15</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x1 = np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">x1</span><br></pre></td></tr></table></figure><pre><code>array([[0, 1, 2],       [3, 4, 5]])</code></pre><ul><li>按行求和</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum(x1, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([ 3, 12])</code></pre><ul><li>按列求和</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum(x1, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>array([3, 5, 7])</code></pre><ul><li>全体求和</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum(x1)</span><br></pre></td></tr></table></figure><pre><code>15</code></pre><ul><li>求积</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([1, 2, 3, 4, 5])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.prod()</span><br></pre></td></tr></table></figure><pre><code>120</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.prod(x)</span><br></pre></td></tr></table></figure><pre><code>120</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">10</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>array([[1, 2, 3],       [4, 5, 6],       [7, 8, 9]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.prod(x, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>array([  6, 120, 504])</code></pre><h3 id="11-5-4-中位数、均值、方差、标准差"><a href="#11-5-4-中位数、均值、方差、标准差" class="headerlink" title="11.5.4  中位数、均值、方差、标准差"></a>11.5.4  中位数、均值、方差、标准差</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, size=<span class="number">10000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.hist(x, bins=<span class="number">50</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>&lt;Figure size 640x480 with 1 Axes&gt;</code></pre><ul><li>中位数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.median(x)</span><br></pre></td></tr></table></figure><pre><code>-0.01370823948627687</code></pre><ul><li>均值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.mean()</span><br></pre></td></tr></table></figure><pre><code>-0.009601644618779558</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.mean(x)</span><br></pre></td></tr></table></figure><pre><code>-0.009601644618779558</code></pre><ul><li>方差</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.var()</span><br></pre></td></tr></table></figure><pre><code>1.0111943453268242</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.var(x)</span><br></pre></td></tr></table></figure><pre><code>1.0111943453268242</code></pre><ul><li>标准差</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.std()</span><br></pre></td></tr></table></figure><pre><code>1.0055815955589205</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.std(x)</span><br></pre></td></tr></table></figure><pre><code>1.0055815955589205</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础10(标准库)</title>
      <link href="/2020/08/15/deepshare_python%E5%9F%BA%E7%A1%8010/"/>
      <url>/2020/08/15/deepshare_python%E5%9F%BA%E7%A1%8010/</url>
      
        <content type="html"><![CDATA[<h1 id="第十章-Python标准库"><a href="#第十章-Python标准库" class="headerlink" title="第十章  Python标准库"></a>第十章  Python标准库</h1><p>Python自身提供了比较丰富的生态，拿来即用，可极大的提高开发效率</p><h2 id="10-1-time库"><a href="#10-1-time库" class="headerlink" title="10.1 time库"></a>10.1 time库</h2><p><strong>Python处理时间的标准库</strong></p><p><strong>1、获取现在时间</strong></p><p>（1）time.localtime()  本地时间</p><p>（2）time.gmtime()   UTC世界统一时间</p><p>北京时间比时间统一时间UTC早8个小时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">t_local = time.localtime()</span><br><span class="line">t_UTC = time.gmtime()</span><br><span class="line">print(<span class="string">"t_local"</span>, t_local)           <span class="comment"># 本地时间</span></span><br><span class="line">print(<span class="string">"t_UTC"</span>, t_UTC)               <span class="comment"># UTC统一时间</span></span><br></pre></td></tr></table></figure><pre><code>t_local time.struct_time(tm_year=2020, tm_mon=8, tm_mday=15, tm_hour=0, tm_min=0, tm_sec=29, tm_wday=5, tm_yday=228, tm_isdst=0)t_UTC time.struct_time(tm_year=2020, tm_mon=8, tm_mday=14, tm_hour=16, tm_min=0, tm_sec=29, tm_wday=4, tm_yday=227, tm_isdst=0)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.ctime()                      <span class="comment"># 返回本地时间的字符串</span></span><br></pre></td></tr></table></figure><pre><code>&#39;Sat Aug 15 00:00:29 2020&#39;</code></pre><p><strong>2、时间戳与计时器</strong></p><p>（1）time.time() &emsp;         返回自纪元以来的秒数，记录sleep</p><p>（2）time.perf_counter() &emsp;    随意选取一个时间点，记录现在时间到该时间点的间隔秒数，记录sleep</p><p>（3）time.process_time() &emsp;    随意选取一个时间点，记录现在时间到该时间点的间隔秒数，不记录sleep</p><p>perf_counter()精度较time()更高一些</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">t_1_start = time.time()</span><br><span class="line">t_2_start = time.perf_counter()</span><br><span class="line">t_3_start = time.process_time()</span><br><span class="line">print(t_1_start)</span><br><span class="line">print(t_2_start)</span><br><span class="line">print(t_3_start)</span><br><span class="line"></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">    res += i</span><br><span class="line">    </span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">t_1_end = time.time()</span><br><span class="line">t_2_end = time.perf_counter()</span><br><span class="line">t_3_end = time.process_time()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"time方法：&#123;:.3f&#125;秒"</span>.format(t_1_end-t_1_start))</span><br><span class="line">print(<span class="string">"perf_counter方法：&#123;:.3f&#125;秒"</span>.format(t_2_end-t_2_start))</span><br><span class="line">print(<span class="string">"process_time方法：&#123;:.3f&#125;秒"</span>.format(t_3_end-t_3_start))</span><br></pre></td></tr></table></figure><pre><code>1597420829.1820032e-071.484375time方法：5.111秒perf_counter方法：5.110秒process_time方法：0.125秒</code></pre><p><strong>3、格式化</strong></p><p>（1）time.strftime 自定义格式化输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lctime = time.localtime()</span><br><span class="line">time.strftime(<span class="string">"%Y-%m-%d %A %H:%M:%S"</span>, lctime)</span><br></pre></td></tr></table></figure><pre><code>&#39;2020-08-15 Saturday 00:00:34&#39;</code></pre><p><strong>4、睡觉觉</strong></p><p>（1）time.sleep()</p><h2 id="10-2-random库"><a href="#10-2-random库" class="headerlink" title="10.2 random库"></a>10.2 random库</h2><p><strong>随机数在计算机应用中十分常见</strong></p><p><strong>Python通过random库提供各种伪随机数</strong></p><p><strong>基本可以用于除加密解密算法外的大多数工程应用</strong></p><p><strong>1、随机种子——seed(a=None)</strong></p><p>（1）相同种子会产生相同的随机数</p><p>（2）如果不设置随机种子，以系统当前时间为默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">seed(<span class="number">10</span>)</span><br><span class="line">print(random())</span><br><span class="line">seed(<span class="number">10</span>)</span><br><span class="line">print(random())</span><br></pre></td></tr></table></figure><pre><code>0.57140259468991350.5714025946899135</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(random())</span><br></pre></td></tr></table></figure><pre><code>0.4288890546751146</code></pre><p><strong>2、产生随机整数</strong></p><p><strong>（1）randint(a, b)——产生[a, b]之间的随机整数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = [randint(<span class="number">1</span>,<span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">numbers</span><br></pre></td></tr></table></figure><pre><code>[10, 1, 4, 8, 8, 5, 3, 1, 9, 8]</code></pre><p><strong>（2）randrange(a)——产生[0, a)之间的随机整数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = [randrange(<span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">numbers</span><br></pre></td></tr></table></figure><pre><code>[5, 1, 3, 5, 0, 6, 2, 9, 5, 6]</code></pre><p><strong>（3）randrange(a, b, step)——产生[a, b)之间以setp为步长的随机整数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = [randrange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">numbers</span><br></pre></td></tr></table></figure><pre><code>[6, 4, 4, 6, 2, 4, 4, 2, 6, 2]</code></pre><p><strong>3、产生随机浮点数</strong></p><p><strong>（1）random()——产生[0.0, 1.0)之间的随机浮点数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = [random() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">numbers</span><br></pre></td></tr></table></figure><pre><code>[0.9693881604049188, 0.613326820546709, 0.0442606328646209, 0.004055144158407464, 0.13397252704913387, 0.941002271395834, 0.3028605620290723, 0.3661456016604264, 0.8981962445391883, 0.31436380495645067]</code></pre><p><strong>（2）uniform(a, b)——产生[a, b]之间的随机浮点数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = [uniform(<span class="number">2.1</span>, <span class="number">3.5</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">numbers</span><br></pre></td></tr></table></figure><pre><code>[2.8685750576173676, 2.710443340673771, 2.190991846577591, 2.9183647159827024, 3.281695056726663, 2.318986485742369, 2.414018556160458, 2.678018290800777, 2.1516948166820806, 2.7952448980631672]</code></pre><p><strong>4、序列用函数</strong></p><p><strong>（1）choice(seq)——从序列类型中随机返回一个元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choice([<span class="string">'win'</span>, <span class="string">'lose'</span>, <span class="string">'draw'</span>])</span><br></pre></td></tr></table></figure><pre><code>&#39;draw&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choice(<span class="string">"python"</span>)</span><br></pre></td></tr></table></figure><pre><code>&#39;n&#39;</code></pre><p><strong>（2）choices(seq,weights=None, k)——对序列类型进行k次重复采样，可设置权重</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choices([<span class="string">'win'</span>, <span class="string">'lose'</span>, <span class="string">'draw'</span>], k=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>[&#39;win&#39;, &#39;draw&#39;, &#39;win&#39;, &#39;lose&#39;, &#39;draw&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choices([<span class="string">'win'</span>, <span class="string">'lose'</span>, <span class="string">'draw'</span>], [<span class="number">4</span>,<span class="number">4</span>,<span class="number">2</span>], k=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><pre><code>[&#39;draw&#39;, &#39;win&#39;, &#39;draw&#39;, &#39;lose&#39;, &#39;lose&#39;, &#39;draw&#39;, &#39;win&#39;, &#39;win&#39;, &#39;draw&#39;, &#39;lose&#39;]</code></pre><p><strong>（3）shuffle(seq)——将序列类型中元素随机排列，返回打乱后的序列</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>]</span><br><span class="line">shuffle(numbers)</span><br><span class="line">numbers</span><br></pre></td></tr></table></figure><pre><code>[&#39;two&#39;, &#39;four&#39;, &#39;one&#39;, &#39;three&#39;]</code></pre><p><strong>（4）sample(pop, k)——从pop类型中随机选取k个元素，以列表类型返回</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>], k=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>[10, 30, 20]</code></pre><p><strong>5、概率分布——以高斯分布为例</strong></p><p><strong>gauss(mean, std)——生产一个符合高斯分布的随机数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">number = gauss(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">number</span><br></pre></td></tr></table></figure><pre><code>-0.4766824049599741</code></pre><p><strong>多生成几个</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">res = [gauss(<span class="number">0</span>, <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>)]</span><br><span class="line"></span><br><span class="line">plt.hist(res, bins=<span class="number">1000</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>&lt;Figure size 640x480 with 1 Axes&gt;</code></pre><p>【例1】用random库实现简单的微信红包分配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">red_packet</span><span class="params">(total, num)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, num):</span><br><span class="line">        per = random.uniform(<span class="number">0.01</span>, total/(num-i+<span class="number">1</span>)*<span class="number">2</span>)          <span class="comment"># 保证每个人获得红包的期望是total/num</span></span><br><span class="line">        total = total - per</span><br><span class="line">        print(<span class="string">"第&#123;&#125;位红包金额： &#123;:.2f&#125;元"</span>.format(i, per))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"第&#123;&#125;位红包金额： &#123;:.2f&#125;元"</span>.format(num, total))</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">red_packet(<span class="number">10</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>第1位红包金额： 1.85元第2位红包金额： 3.91元第3位红包金额： 1.66元第4位红包金额： 2.50元第5位红包金额： 0.08元</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">red_packet</span><span class="params">(total, num)</span>:</span></span><br><span class="line">    ls = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, num):</span><br><span class="line">        per = round(random.uniform(<span class="number">0.01</span>, total/(num-i+<span class="number">1</span>)*<span class="number">2</span>), <span class="number">2</span>)     <span class="comment"># 保证每个人获得红包的期望是total/num</span></span><br><span class="line">        ls.append(per)</span><br><span class="line">        total = total - per</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ls.append(total)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> ls</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line"><span class="comment"># 重复发十万次红包，统计每个位置的平均值（约等于期望）</span></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line">    ls = red_packet(<span class="number">10</span>,<span class="number">5</span>)</span><br><span class="line">    res.append(ls)</span><br><span class="line"></span><br><span class="line">res = np.array(res)</span><br><span class="line">print(res[:<span class="number">10</span>])</span><br><span class="line">np.mean(res, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>[[1.71 0.83 3.27 0.7  3.49] [0.39 3.03 0.75 1.89 3.94] [2.27 0.85 3.48 0.47 2.93] [1.26 3.27 1.99 0.42 3.06] [0.09 4.37 0.27 5.15 0.12] [0.84 1.24 1.27 2.33 4.32] [0.65 2.59 0.5  4.4  1.86] [3.51 2.63 2.07 1.42 0.37] [0.43 1.78 4.22 0.05 3.52] [2.86 1.36 3.67 1.33 0.78]]array([2.0040861, 2.0042645, 2.0043338, 1.9987458, 1.9885698])</code></pre><p>【例2】生产4位由数字和英文字母构成的验证码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">print(string.digits)</span><br><span class="line">print(string.ascii_letters)</span><br><span class="line"></span><br><span class="line">s=string.digits + string.ascii_letters</span><br><span class="line">v=random.sample(s,<span class="number">4</span>)</span><br><span class="line">print(v)</span><br><span class="line">print(<span class="string">''</span>.join(v))</span><br></pre></td></tr></table></figure><pre><code>0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ[&#39;1&#39;, &#39;j&#39;, &#39;Z&#39;, &#39;7&#39;]1jZ7</code></pre><h2 id="10-3-collections库——容器数据类型"><a href="#10-3-collections库——容器数据类型" class="headerlink" title="10.3 collections库——容器数据类型"></a>10.3 collections库——容器数据类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br></pre></td></tr></table></figure><p><strong>1、namedtuple——具名元组</strong></p><ul><li>点的坐标，仅看数据，很难知道表达的是一个点的坐标</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = (<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li><p>构建一个新的元组子类  </p><p>   定义方法如下：typename 是元组名字，field_names 是域名</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collections.namedtuple(typename, field_names, *, rename=<span class="literal">False</span>, defaults=<span class="literal">None</span>, module=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help(collections.namedtuple)</span><br></pre></td></tr></table></figure><pre><code>Help on function namedtuple in module collections:namedtuple(typename, field_names, *, verbose=False, rename=False, module=None)    Returns a new subclass of tuple with named fields.    &gt;&gt;&gt; Point = namedtuple(&#39;Point&#39;, [&#39;x&#39;, &#39;y&#39;])    &gt;&gt;&gt; Point.__doc__                   # docstring for the new class    &#39;Point(x, y)&#39;    &gt;&gt;&gt; p = Point(11, y=22)             # instantiate with positional args or keywords    &gt;&gt;&gt; p[0] + p[1]                     # indexable like a plain tuple    33    &gt;&gt;&gt; x, y = p                        # unpack like a regular tuple    &gt;&gt;&gt; x, y    (11, 22)    &gt;&gt;&gt; p.x + p.y                       # fields also accessible by name    33    &gt;&gt;&gt; d = p._asdict()                 # convert to a dictionary    &gt;&gt;&gt; d[&#39;x&#39;]    11    &gt;&gt;&gt; Point(**d)                      # convert from a dictionary    Point(x=11, y=22)    &gt;&gt;&gt; p._replace(x=100)               # _replace() is like str.replace() but targets named fields    Point(x=100, y=22)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Point = collections.namedtuple(<span class="string">"Point"</span>, [<span class="string">"x"</span>, <span class="string">"y"</span>])</span><br><span class="line">p = Point(<span class="number">1</span>, y=<span class="number">2</span>)</span><br><span class="line">p</span><br></pre></td></tr></table></figure><pre><code>Point(x=1, y=2)</code></pre><ul><li>可以调用属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(p.x)</span><br><span class="line">print(p.y)</span><br></pre></td></tr></table></figure><pre><code>12</code></pre><ul><li>有元组的性质</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(p[<span class="number">0</span>])</span><br><span class="line">print(p[<span class="number">1</span>])</span><br><span class="line">x, y = p</span><br><span class="line">print(x)</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><pre><code>1212</code></pre><ul><li>确实是元组的子类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(isinstance(p, tuple))</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><p>【例】模拟扑克牌</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Card = collections.namedtuple(<span class="string">"Card"</span>, [<span class="string">"rank"</span>, <span class="string">"suit"</span>])</span><br><span class="line">ranks = [str(n) <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">11</span>)] + list(<span class="string">"JQKA"</span>)    </span><br><span class="line">suits = <span class="string">"spades diamonds clubs hearts"</span>.split()</span><br><span class="line">print(<span class="string">"ranks"</span>, ranks)</span><br><span class="line">print(<span class="string">"suits"</span>, suits)</span><br><span class="line">cards = [Card(rank, suit) <span class="keyword">for</span> rank <span class="keyword">in</span> ranks</span><br><span class="line">                          <span class="keyword">for</span> suit <span class="keyword">in</span> suits]</span><br><span class="line">cards</span><br></pre></td></tr></table></figure><pre><code>ranks [&#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;10&#39;, &#39;J&#39;, &#39;Q&#39;, &#39;K&#39;, &#39;A&#39;]suits [&#39;spades&#39;, &#39;diamonds&#39;, &#39;clubs&#39;, &#39;hearts&#39;][Card(rank=&#39;2&#39;, suit=&#39;spades&#39;), Card(rank=&#39;2&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;2&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;2&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;3&#39;, suit=&#39;spades&#39;), Card(rank=&#39;3&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;3&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;3&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;4&#39;, suit=&#39;spades&#39;), Card(rank=&#39;4&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;4&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;4&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;5&#39;, suit=&#39;spades&#39;), Card(rank=&#39;5&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;5&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;5&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;6&#39;, suit=&#39;spades&#39;), Card(rank=&#39;6&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;6&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;6&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;7&#39;, suit=&#39;spades&#39;), Card(rank=&#39;7&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;7&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;7&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;8&#39;, suit=&#39;spades&#39;), Card(rank=&#39;8&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;8&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;8&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;9&#39;, suit=&#39;spades&#39;), Card(rank=&#39;9&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;9&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;9&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;10&#39;, suit=&#39;spades&#39;), Card(rank=&#39;10&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;10&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;10&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;J&#39;, suit=&#39;spades&#39;), Card(rank=&#39;J&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;J&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;J&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;Q&#39;, suit=&#39;spades&#39;), Card(rank=&#39;Q&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;Q&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;Q&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;K&#39;, suit=&#39;spades&#39;), Card(rank=&#39;K&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;K&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;K&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;A&#39;, suit=&#39;spades&#39;), Card(rank=&#39;A&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;A&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;A&#39;, suit=&#39;hearts&#39;)]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 洗牌</span></span><br><span class="line">shuffle(cards)</span><br><span class="line">cards</span><br></pre></td></tr></table></figure><pre><code>[Card(rank=&#39;4&#39;, suit=&#39;spades&#39;), Card(rank=&#39;Q&#39;, suit=&#39;spades&#39;), Card(rank=&#39;8&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;3&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;Q&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;10&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;10&#39;, suit=&#39;spades&#39;), Card(rank=&#39;A&#39;, suit=&#39;spades&#39;), Card(rank=&#39;7&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;2&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;9&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;8&#39;, suit=&#39;spades&#39;), Card(rank=&#39;6&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;4&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;A&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;9&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;3&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;Q&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;K&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;6&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;10&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;5&#39;, suit=&#39;spades&#39;), Card(rank=&#39;K&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;3&#39;, suit=&#39;spades&#39;), Card(rank=&#39;J&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;5&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;7&#39;, suit=&#39;spades&#39;), Card(rank=&#39;K&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;A&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;6&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;5&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;2&#39;, suit=&#39;spades&#39;), Card(rank=&#39;7&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;J&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;A&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;5&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;8&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;2&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;4&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;6&#39;, suit=&#39;spades&#39;), Card(rank=&#39;J&#39;, suit=&#39;spades&#39;), Card(rank=&#39;10&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;9&#39;, suit=&#39;spades&#39;), Card(rank=&#39;2&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;3&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;J&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;Q&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;K&#39;, suit=&#39;spades&#39;), Card(rank=&#39;4&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;7&#39;, suit=&#39;clubs&#39;), Card(rank=&#39;9&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;8&#39;, suit=&#39;clubs&#39;)]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机抽一张牌</span></span><br><span class="line">choice(cards)</span><br></pre></td></tr></table></figure><pre><code>Card(rank=&#39;J&#39;, suit=&#39;hearts&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机抽多张牌</span></span><br><span class="line">sample(cards, k=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>[Card(rank=&#39;5&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;8&#39;, suit=&#39;spades&#39;), Card(rank=&#39;Q&#39;, suit=&#39;hearts&#39;), Card(rank=&#39;K&#39;, suit=&#39;diamonds&#39;), Card(rank=&#39;K&#39;, suit=&#39;hearts&#39;)]</code></pre><p><strong>2、Counter——计数器工具</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"牛奶奶找刘奶奶买牛奶"</span></span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'blue'</span>]</span><br><span class="line">cnt_str = Counter(s)</span><br><span class="line">cnt_color = Counter(colors)</span><br><span class="line">print(cnt_str)</span><br><span class="line">print(cnt_color)</span><br></pre></td></tr></table></figure><pre><code>Counter({&#39;奶&#39;: 5, &#39;牛&#39;: 2, &#39;找&#39;: 1, &#39;刘&#39;: 1, &#39;买&#39;: 1})Counter({&#39;blue&#39;: 3, &#39;red&#39;: 2, &#39;green&#39;: 1})</code></pre><ul><li>是字典的一个子类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(isinstance(Counter(), dict))</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><ul><li>最常见的统计——most_commom(n)<br>提供 n 个频率最高的元素和计数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnt_color.most_common(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>[(&#39;blue&#39;, 3), (&#39;red&#39;, 2)]</code></pre><ul><li>元素展开——elements()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(cnt_str.elements())</span><br></pre></td></tr></table></figure><pre><code>[&#39;牛&#39;, &#39;牛&#39;, &#39;奶&#39;, &#39;奶&#39;, &#39;奶&#39;, &#39;奶&#39;, &#39;奶&#39;, &#39;找&#39;, &#39;刘&#39;, &#39;买&#39;]</code></pre><ul><li>其他一些加减操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c = Counter(a=<span class="number">3</span>, b=<span class="number">1</span>)</span><br><span class="line">d = Counter(a=<span class="number">1</span>, b=<span class="number">2</span>)</span><br><span class="line">c+d</span><br></pre></td></tr></table></figure><pre><code>Counter({&#39;a&#39;: 4, &#39;b&#39;: 3})</code></pre><p>【例】从一副牌中抽取10张，大于10的比例有多少</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cards = collections.Counter(tens=<span class="number">16</span>, low_cards=<span class="number">36</span>)</span><br><span class="line">seen = sample(list(cards.elements()), k=<span class="number">10</span>)</span><br><span class="line">print(seen)</span><br></pre></td></tr></table></figure><pre><code>[&#39;low_cards&#39;, &#39;tens&#39;, &#39;tens&#39;, &#39;low_cards&#39;, &#39;low_cards&#39;, &#39;tens&#39;, &#39;low_cards&#39;, &#39;tens&#39;, &#39;tens&#39;, &#39;tens&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seen.count(<span class="string">'tens'</span>) / <span class="number">10</span></span><br></pre></td></tr></table></figure><pre><code>0.6</code></pre><p><strong>3、deque——双向队列</strong></p><p>列表访问数据非常快速</p><p>插入和删除操作非常慢——通过移动元素位置来实现</p><p>特别是 insert(0, v) 和 pop(0)，在列表开始进行的插入和删除操作</p><p><strong>双向队列可以方便的在队列两边高效、快速的增加和删除元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">d = deque(<span class="string">'cde'</span>) </span><br><span class="line">d</span><br></pre></td></tr></table></figure><pre><code>deque([&#39;c&#39;, &#39;d&#39;, &#39;e&#39;])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d.append(<span class="string">"f"</span>)            <span class="comment"># 右端增加</span></span><br><span class="line">d.append(<span class="string">"g"</span>)</span><br><span class="line">d.appendleft(<span class="string">"b"</span>)        <span class="comment"># 左端增加</span></span><br><span class="line">d.appendleft(<span class="string">"a"</span>)</span><br><span class="line">d</span><br></pre></td></tr></table></figure><pre><code>deque([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d.pop()           <span class="comment"># 右端删除 </span></span><br><span class="line">d.popleft()       <span class="comment"># 左端删除</span></span><br><span class="line">d</span><br></pre></td></tr></table></figure><pre><code>deque([&#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;])</code></pre><p>deque 其他用法可参考官方文档</p><h2 id="10-4-itertools库——迭代器"><a href="#10-4-itertools库——迭代器" class="headerlink" title="10.4 itertools库——迭代器"></a>10.4 itertools库——迭代器</h2><p><strong>1、排列组合迭代器</strong></p><p>（1）product——笛卡尔积</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.product(<span class="string">'ABC'</span>, <span class="string">'01'</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>(&#39;A&#39;, &#39;0&#39;)(&#39;A&#39;, &#39;1&#39;)(&#39;B&#39;, &#39;0&#39;)(&#39;B&#39;, &#39;1&#39;)(&#39;C&#39;, &#39;0&#39;)(&#39;C&#39;, &#39;1&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.product(<span class="string">'ABC'</span>, repeat=<span class="number">3</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><codecode></pre><p>（2）  permutations——排列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(<span class="string">'ABCD'</span>, <span class="number">3</span>):   <span class="comment"># 3 是排列的长度</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><codecode></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(range(<span class="number">3</span>)):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>(0, 1, 2)(0, 2, 1)(1, 0, 2)(1, 2, 0)(2, 0, 1)(2, 1, 0)</code></pre><p>（3）combinations——组合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.combinations(<span class="string">'ABCD'</span>, <span class="number">2</span>):  <span class="comment"># 2是组合的长度</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>(&#39;A&#39;, &#39;B&#39;)(&#39;A&#39;, &#39;C&#39;)(&#39;A&#39;, &#39;D&#39;)(&#39;B&#39;, &#39;C&#39;)(&#39;B&#39;, &#39;D&#39;)(&#39;C&#39;, &#39;D&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.combinations(range(<span class="number">4</span>), <span class="number">3</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>(0, 1, 2)(0, 1, 3)(0, 2, 3)(1, 2, 3)</code></pre><p>（4）combinations_with_replacement——元素可重复组合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.combinations_with_replacement(<span class="string">'ABC'</span>, <span class="number">2</span>):  <span class="comment"># 2是组合的长度</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>(&#39;A&#39;, &#39;A&#39;)(&#39;A&#39;, &#39;B&#39;)(&#39;A&#39;, &#39;C&#39;)(&#39;B&#39;, &#39;B&#39;)(&#39;B&#39;, &#39;C&#39;)(&#39;C&#39;, &#39;C&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.product(<span class="string">'ABC'</span>,repeat=<span class="number">2</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>(&#39;A&#39;, &#39;A&#39;)(&#39;A&#39;, &#39;B&#39;)(&#39;A&#39;, &#39;C&#39;)(&#39;B&#39;, &#39;A&#39;)(&#39;B&#39;, &#39;B&#39;)(&#39;B&#39;, &#39;C&#39;)(&#39;C&#39;, &#39;A&#39;)(&#39;C&#39;, &#39;B&#39;)(&#39;C&#39;, &#39;C&#39;)</code></pre><p><strong>2、拉链</strong></p><p>（1）zip——短拉链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> zip(<span class="string">"ABC"</span>, <span class="string">"012"</span>, <span class="string">"xyz"</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>(&#39;A&#39;, &#39;0&#39;, &#39;x&#39;)(&#39;B&#39;, &#39;1&#39;, &#39;y&#39;)(&#39;C&#39;, &#39;2&#39;, &#39;z&#39;)</code></pre><p>长度不一时，执行到最短的对象处，就停止</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> zip(<span class="string">"ABC"</span>, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]):          <span class="comment"># 注意zip是内置的，不需要加itertools</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>(&#39;A&#39;, 0)(&#39;B&#39;, 1)(&#39;C&#39;, 2)</code></pre><p>（2）zip_longest——长拉链</p><p>长度不一时，执行到最长的对象处，就停止，缺省元素用None或指定字符替代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.zip_longest(<span class="string">"ABC"</span>, <span class="string">"012345"</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>(&#39;A&#39;, &#39;0&#39;)(&#39;B&#39;, &#39;1&#39;)(&#39;C&#39;, &#39;2&#39;)(None, &#39;3&#39;)(None, &#39;4&#39;)(None, &#39;5&#39;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.zip_longest(<span class="string">"ABC"</span>, <span class="string">"012345"</span>, fillvalue = <span class="string">"?"</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>(&#39;A&#39;, &#39;0&#39;)(&#39;B&#39;, &#39;1&#39;)(&#39;C&#39;, &#39;2&#39;)(&#39;?&#39;, &#39;3&#39;)(&#39;?&#39;, &#39;4&#39;)(&#39;?&#39;, &#39;5&#39;)</code></pre><p><strong>3、无穷迭代器</strong></p><p>（1）count(start=0, step=1)——计数</p><pre><code>创建一个迭代器，它从 start 值开始，返回均匀间隔的值</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">itertools.count(<span class="number">10</span>)</span><br><span class="line"><span class="comment">#10</span></span><br><span class="line"><span class="comment">#11</span></span><br><span class="line"><span class="comment">#12</span></span><br><span class="line"><span class="comment">#.</span></span><br><span class="line"><span class="comment">#.</span></span><br><span class="line"><span class="comment">#.</span></span><br></pre></td></tr></table></figure><pre><code>count(10)</code></pre><p>（2）cycle(iterable)——循环</p><pre><code>创建一个迭代器，返回 iterable 中所有元素，无限重复</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">itertools.cycle(<span class="string">"ABC"</span>)</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>（3）repeat(object  [, times])——重复</p><pre><code>创建一个迭代器，不断重复 object 。除非设定参数 times ，否则将无限重复</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.repeat(<span class="number">10</span>, <span class="number">3</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>101010</code></pre><p><strong>4、其他</strong></p><p>（1）chain(iterables)——锁链</p><pre><code>把一组迭代对象串联起来，形成一个更大的迭代器</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.chain(<span class="string">'ABC'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>ABC123</code></pre><p>（2）enumerate(iterable, start=0)——枚举（Python内置）</p><pre><code>产出由两个元素组成的元组，结构是（index, item）,其中index 从start开始，item从iterable中取</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enumerate(<span class="string">"Python"</span>, start=<span class="number">1</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>(1, &#39;P&#39;)(2, &#39;y&#39;)(3, &#39;t&#39;)(4, &#39;h&#39;)(5, &#39;o&#39;)(6, &#39;n&#39;)</code></pre><p>（3）groupby(iterable, key=None)——分组</p><pre><code>创建一个迭代器，按照key指定的方式，返回 iterable 中连续的键和组一般来说，要预先对数据进行排序key为None默认把连续重复元素分组</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, group <span class="keyword">in</span> itertools.groupby(<span class="string">'AAAABBBCCDAABBB'</span>):</span><br><span class="line">    print(key, list(group))</span><br></pre></td></tr></table></figure><pre><code>A [&#39;A&#39;, &#39;A&#39;, &#39;A&#39;, &#39;A&#39;]B [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;]C [&#39;C&#39;, &#39;C&#39;]D [&#39;D&#39;]A [&#39;A&#39;, &#39;A&#39;]B [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">animals = [<span class="string">"duck"</span>, <span class="string">"eagle"</span>, <span class="string">"rat"</span>, <span class="string">"giraffe"</span>, <span class="string">"bear"</span>, <span class="string">"bat"</span>, <span class="string">"dolphin"</span>, <span class="string">"shark"</span>, <span class="string">"lion"</span>]</span><br><span class="line">animals.sort(key=len)</span><br><span class="line">print(animals)</span><br></pre></td></tr></table></figure><pre><code>[&#39;rat&#39;, &#39;bat&#39;, &#39;duck&#39;, &#39;bear&#39;, &#39;lion&#39;, &#39;eagle&#39;, &#39;shark&#39;, &#39;giraffe&#39;, &#39;dolphin&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, group <span class="keyword">in</span> itertools.groupby(animals, key=len):</span><br><span class="line">    print(key, list(group))</span><br></pre></td></tr></table></figure><pre><code>3 [&#39;rat&#39;, &#39;bat&#39;]4 [&#39;duck&#39;, &#39;bear&#39;, &#39;lion&#39;]5 [&#39;eagle&#39;, &#39;shark&#39;]7 [&#39;giraffe&#39;, &#39;dolphin&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">animals = [<span class="string">"duck"</span>, <span class="string">"eagle"</span>, <span class="string">"rat"</span>, <span class="string">"giraffe"</span>, <span class="string">"bear"</span>, <span class="string">"bat"</span>, <span class="string">"dolphin"</span>, <span class="string">"shark"</span>, <span class="string">"lion"</span>]</span><br><span class="line">animals.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line">print(animals)</span><br><span class="line"><span class="keyword">for</span> key, group <span class="keyword">in</span> itertools.groupby(animals, key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]):</span><br><span class="line">    print(key, list(group))</span><br></pre></td></tr></table></figure><pre><code>[&#39;bear&#39;, &#39;bat&#39;, &#39;duck&#39;, &#39;dolphin&#39;, &#39;eagle&#39;, &#39;giraffe&#39;, &#39;lion&#39;, &#39;rat&#39;, &#39;shark&#39;]b [&#39;bear&#39;, &#39;bat&#39;]d [&#39;duck&#39;, &#39;dolphin&#39;]e [&#39;eagle&#39;]g [&#39;giraffe&#39;]l [&#39;lion&#39;]r [&#39;rat&#39;]s [&#39;shark&#39;]</code></pre><p><strong>itertools 其他函数可参考官方文档</strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础9</title>
      <link href="/2020/08/14/deepshare_python%E5%9F%BA%E7%A1%809/"/>
      <url>/2020/08/14/deepshare_python%E5%9F%BA%E7%A1%809/</url>
      
        <content type="html"><![CDATA[<h1 id="第九章-有益的探索"><a href="#第九章-有益的探索" class="headerlink" title="第九章 有益的探索"></a>第九章 有益的探索</h1><h2 id="9-1-数据类型的底层实现"><a href="#9-1-数据类型的底层实现" class="headerlink" title="9.1 数据类型的底层实现"></a>9.1 数据类型的底层实现</h2><h3 id="9-1-1-从奇怪的列表说起"><a href="#9-1-1-从奇怪的列表说起" class="headerlink" title="9.1.1 从奇怪的列表说起"></a>9.1.1 从奇怪的列表说起</h3><p><strong>1、错综复杂的复制</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>, [<span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>], (<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>), &#123;<span class="string">"name"</span>: <span class="string">"Sarah"</span>&#125;]</span><br></pre></td></tr></table></figure><ul><li>浅拷贝</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list_3 = list_1          <span class="comment"># 错误！！！</span></span><br><span class="line">list_2 = list_1[:]     <span class="comment"># 或者list_1[:] \ list(list_1) 均可实习浅拷贝</span></span><br><span class="line">print(list_1)</span><br></pre></td></tr></table></figure><pre><code>[1, [22, 33, 44], (5, 6, 7), {&#39;name&#39;: &#39;Sarah&#39;}]</code></pre><ul><li>对浅拷贝前后两列表分别进行操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list_1[<span class="number">1</span>].append(<span class="number">55</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"list_1:  "</span>, list_1)</span><br><span class="line">print(<span class="string">"list_2:  "</span>, list_2)</span><br><span class="line">print(list_3)</span><br></pre></td></tr></table></figure><pre><code>list_1:   [1, [22, 33, 44, 55], (5, 6, 7), {&#39;name&#39;: &#39;Sarah&#39;}]list_2:   [1, [22, 33, 44, 55], (5, 6, 7), {&#39;name&#39;: &#39;Sarah&#39;}][1, [22, 33, 44, 55], (5, 6, 7), {&#39;name&#39;: &#39;Sarah&#39;}]</code></pre><p><strong>2、列表的底层实现</strong></p><p><strong>引用数组的概念</strong>  </p><p>列表内的元素可以分散的存储在内存中  </p><p>列表存储的，实际上是这些<strong>元素的地址！！！</strong>——地址的存储在内存中是连续的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>, [<span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>], (<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>), &#123;<span class="string">"name"</span>: <span class="string">"Sarah"</span>&#125;]</span><br><span class="line">list_2 = list(list_1)   <span class="comment"># 浅拷贝   与list_1.copy()功能一样</span></span><br></pre></td></tr></table></figure><p>（1）新增元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list_1.append(<span class="number">100</span>)</span><br><span class="line">list_2.append(<span class="string">"n"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"list_1:  "</span>, list_1)</span><br><span class="line">print(<span class="string">"list_2:  "</span>, list_2)</span><br></pre></td></tr></table></figure><pre><code>list_1:   [1, [22, 33, 44], (5, 6, 7), {&#39;name&#39;: &#39;Sarah&#39;}, 100]list_2:   [1, [22, 33, 44], (5, 6, 7), {&#39;name&#39;: &#39;Sarah&#39;}, &#39;n&#39;]</code></pre><p>（2）修改元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list_1[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">list_2[<span class="number">0</span>] = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"list_1:  "</span>, list_1)</span><br><span class="line">print(<span class="string">"list_2:  "</span>, list_2)</span><br></pre></td></tr></table></figure><pre><code>list_1:   [10, [22, 33, 44], (5, 6, 7), {&#39;name&#39;: &#39;Sarah&#39;}, 100]list_2:   [20, [22, 33, 44], (5, 6, 7), {&#39;name&#39;: &#39;Sarah&#39;}, &#39;n&#39;]</code></pre><p>（3）对列表型元素进行操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list_1[<span class="number">1</span>].remove(<span class="number">44</span>)</span><br><span class="line">list_2[<span class="number">1</span>] += [<span class="number">55</span>, <span class="number">66</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">"list_1:  "</span>, list_1)</span><br><span class="line">print(<span class="string">"list_2:  "</span>, list_2)</span><br></pre></td></tr></table></figure><pre><code>list_1:   [10, [22, 33, 55, 66], (5, 6, 7), {&#39;name&#39;: &#39;Sarah&#39;}, 100]list_2:   [20, [22, 33, 55, 66], (5, 6, 7), {&#39;name&#39;: &#39;Sarah&#39;}, &#39;n&#39;]</code></pre><p>（4）对元组型元素进行操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list_2[<span class="number">2</span>] += (<span class="number">8</span>,<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"list_1:  "</span>, list_1)</span><br><span class="line">print(<span class="string">"list_2:  "</span>, list_2)</span><br></pre></td></tr></table></figure><pre><code>list_1:   [10, [22, 33, 55, 66], (5, 6, 7), {&#39;name&#39;: &#39;Sarah&#39;}, 100]list_2:   [20, [22, 33, 55, 66], (5, 6, 7, 8, 9), {&#39;name&#39;: &#39;Sarah&#39;}, &#39;n&#39;]</code></pre><p>元组是不可变的！！！</p><p>（5）对字典型元素进行操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list_1[<span class="number">-2</span>][<span class="string">"age"</span>] = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"list_1:  "</span>, list_1)</span><br><span class="line">print(<span class="string">"list_2:  "</span>, list_2)</span><br></pre></td></tr></table></figure><pre><code>list_1:   [10, [22, 33, 55, 66], (5, 6, 7), {&#39;name&#39;: &#39;Sarah&#39;, &#39;age&#39;: 18}, 100]list_2:   [20, [22, 33, 55, 66], (5, 6, 7, 8, 9), {&#39;name&#39;: &#39;Sarah&#39;, &#39;age&#39;: 18}, &#39;n&#39;]</code></pre><p><strong>3、引入深拷贝</strong></p><p><strong>浅拷贝之后</strong>  </p><ul><li><p>针对不可变元素（数字、字符串、元组）的操作，都各自生效了  </p></li><li><p>针对可变元素（列表、集合）的操作，发生了一些混淆</p></li></ul><p><strong>引入深拷贝</strong></p><ul><li>深拷贝将所有层级的相关元素全部复制，完全分开，泾渭分明，避免了上述问题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">list_1 = [<span class="number">1</span>, [<span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>], (<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>), &#123;<span class="string">"name"</span>: <span class="string">"Sarah"</span>&#125;]</span><br><span class="line">list_2 = copy.deepcopy(list_1)</span><br><span class="line">list_1[<span class="number">-1</span>][<span class="string">"age"</span>] = <span class="number">18</span></span><br><span class="line">list_2[<span class="number">1</span>].append(<span class="number">55</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"list_1:  "</span>, list_1)</span><br><span class="line">print(<span class="string">"list_2:  "</span>, list_2)</span><br></pre></td></tr></table></figure><pre><code>list_1:   [1, [22, 33, 44], (5, 6, 7), {&#39;name&#39;: &#39;Sarah&#39;, &#39;age&#39;: 18}]list_2:   [1, [22, 33, 44, 55], (5, 6, 7), {&#39;name&#39;: &#39;Sarah&#39;}]</code></pre><h3 id="9-1-2-神秘的字典"><a href="#9-1-2-神秘的字典" class="headerlink" title="9.1.2 神秘的字典"></a>9.1.2 神秘的字典</h3><p><strong>1、快速的查找</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">ls_1 = list(range(<span class="number">1000000</span>))</span><br><span class="line">ls_2 = list(range(<span class="number">500</span>))+[<span class="number">-10</span>]*<span class="number">500</span></span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> ls_2:</span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> ls_1:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">"查找&#123;&#125;个元素，在ls_1列表中的有&#123;&#125;个，共用时&#123;&#125;秒"</span>.format(len(ls_2), count,round((end-start),<span class="number">2</span>)))</span><br></pre></td></tr></table></figure><pre><code>查找1000个元素，在ls_1列表中的有500个，共用时5.01秒</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">d = &#123;i:i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>)&#125;</span><br><span class="line">ls_2 = list(range(<span class="number">500</span>))+[<span class="number">-10</span>]*<span class="number">500</span></span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> ls_2:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d[n]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">"查找&#123;&#125;个元素，在ls_1列表中的有&#123;&#125;个，共用时&#123;&#125;秒"</span>.format(len(ls_2), count,round(end-start)))</span><br></pre></td></tr></table></figure><pre><code>查找1000个元素，在ls_1列表中的有500个，共用时0秒</code></pre><p><strong>2、字典的底层实现</strong></p><p>通过稀疏数组来实现值的存储与访问</p><p><strong>字典的创建过程</strong></p><ul><li>第一步：创建一个散列表（稀疏数组 N &gt;&gt; n）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>第一步：通过hash()计算键的散列值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(hash(<span class="string">"python"</span>))</span><br><span class="line">print(hash(<span class="number">1024</span>))</span><br><span class="line">print(hash((<span class="number">1</span>,<span class="number">2</span>)))</span><br></pre></td></tr></table></figure><pre><code>-520741465254406703810243713081631934410656</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="string">"age"</span>] = <span class="number">18</span>    <span class="comment"># 增加键值对的操作，首先会计算键的散列值hash("age")</span></span><br><span class="line">print(hash(<span class="string">"age"</span>))</span><br></pre></td></tr></table></figure><pre><code>4373112565491609817</code></pre><ul><li>第二步：根据计算的散列值确定其在散列表中的位置</li></ul><p>极个别时候，散列值会发生冲突，则内部有相应的解决冲突的办法</p><ul><li>第三步：在该位置上存入值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">2</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p><strong>键值对的访问过程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="string">"age"</span>]</span><br></pre></td></tr></table></figure><pre><code>18</code></pre><ul><li><p>第一步：计算要访问的键的散列值</p></li><li><p>第二步：根据计算的散列值，通过一定的规则，确定其在散列表中的位置</p></li><li><p>第三步：读取该位置上存储的值</p><pre><code> 如果存在，则返回该值   如果不存在，则报错KeyError</code></pre></li></ul><p><strong>3、小结</strong></p><p><strong>（1）字典数据类型，通过空间换时间，实现了快速的数据查找</strong></p><ul><li>也就注定了字典的空间利用效率低下</li></ul><p><strong>（2）因为散列值对应位置的顺序与键在字典中显示的顺序可能不同，因此表现出来字典是无序的</strong></p><ul><li><p>回顾一下 N &gt;&gt; n<br>如果N = n，会产生很多位置冲突</p></li><li><p>思考一下开头的小例子，为什么字典实现了比列表更快速的查找</p></li></ul><h3 id="9-1-3-紧凑的字符串"><a href="#9-1-3-紧凑的字符串" class="headerlink" title="9.1.3 紧凑的字符串"></a>9.1.3 紧凑的字符串</h3><p><strong>通过紧凑数组实现字符串的存储</strong></p><ul><li><p>数据在内存中是连续存放的，效率更高，节省空间</p></li><li><p>思考一下，同为序列类型，为什么列表采用引用数组，而字符串采用紧凑数组</p></li></ul><h3 id="9-1-4-是否可变"><a href="#9-1-4-是否可变" class="headerlink" title="9.1.4 是否可变"></a>9.1.4 是否可变</h3><p><strong>1、不可变类型：数字、字符串、元组</strong></p><p><strong>在生命周期中保持内容不变</strong></p><ul><li><p>换句话说，改变了就不是它自己了（id变了）</p></li><li><p>不可变对象的 += 操作 实际上创建了一个新的对象</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="string">"Python"</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"x id:"</span>, id(x))</span><br><span class="line">print(<span class="string">"y id:"</span>, id(y))</span><br></pre></td></tr></table></figure><pre><code>x id: 1886940224y id: 2760889537400</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x += <span class="number">2</span></span><br><span class="line">y += <span class="string">"3.7"</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"x id:"</span>, id(x))</span><br><span class="line">print(<span class="string">"y id:"</span>, id(y))</span><br></pre></td></tr></table></figure><pre><code>x id: 1886940288y id: 2760929012144</code></pre><p><strong>元组并不是总是不可变的</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>,[<span class="number">2</span>])</span><br><span class="line">t[<span class="number">1</span>].append(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure><pre><code>(1, [2, 3])</code></pre><p><strong>2、可变类型：列表、字典、集合</strong></p><ul><li><p>id 保持不变，但是里面的内容可以变</p></li><li><p>可变对象的 += 操作 实际在原对象的基础上就地修改</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">d = &#123;<span class="string">"Name"</span>: <span class="string">"Sarah"</span>, <span class="string">"Age"</span>: <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="string">"ls id:"</span>, id(ls))</span><br><span class="line">print(<span class="string">"d id:"</span>, id(d))</span><br></pre></td></tr></table></figure><pre><code>ls id: 2760929012552d id: 2760970683592</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls += [<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">d_2 = &#123;<span class="string">"Sex"</span>: <span class="string">"female"</span>&#125;</span><br><span class="line">d.update(d_2)            <span class="comment"># 把d_2 中的元素更新到d中</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"ls id:"</span>, id(ls))</span><br><span class="line">print(<span class="string">"d id:"</span>, id(d))</span><br></pre></td></tr></table></figure><pre><code>ls id: 2760929012552d id: 2760970683592</code></pre><h3 id="9-1-5-列表操作的几个小例子"><a href="#9-1-5-列表操作的几个小例子" class="headerlink" title="9.1.5 列表操作的几个小例子"></a>9.1.5 列表操作的几个小例子</h3><p><strong>【例1】 删除列表内的特定元素</strong></p><ul><li>方法1 存在运算删除法</li></ul><p>缺点：每次存在运算，都要从头对列表进行遍历、查找、效率低</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">alist = [<span class="string">"d"</span>, <span class="string">"d"</span>, <span class="string">"d"</span>, <span class="string">"2"</span>, <span class="string">"2"</span>, <span class="string">"d"</span> ,<span class="string">"d"</span>, <span class="string">"4"</span>]</span><br><span class="line">s = <span class="string">"d"</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> s <span class="keyword">in</span> alist:</span><br><span class="line">        alist.remove(s)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(alist)</span><br></pre></td></tr></table></figure><pre><code>[&#39;2&#39;, &#39;2&#39;, &#39;4&#39;]</code></pre><ul><li>方法2 一次性遍历元素执行删除</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alist = [<span class="string">"d"</span>, <span class="string">"d"</span>, <span class="string">"d"</span>, <span class="string">"2"</span>, <span class="string">"2"</span>, <span class="string">"d"</span> ,<span class="string">"d"</span>, <span class="string">"4"</span>]</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> alist:</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">"d"</span>:</span><br><span class="line">        alist.remove(s)      <span class="comment"># remove（s） 删除列表中第一次出现的该元素</span></span><br><span class="line">print(alist)</span><br></pre></td></tr></table></figure><pre><code>[&#39;2&#39;, &#39;2&#39;, &#39;d&#39;, &#39;d&#39;, &#39;4&#39;]</code></pre><p>解决方法：使用负向索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alist = [<span class="string">"d"</span>, <span class="string">"d"</span>, <span class="string">"d"</span>, <span class="string">"2"</span>, <span class="string">"2"</span>, <span class="string">"d"</span> ,<span class="string">"d"</span>, <span class="string">"4"</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(-len(alist), <span class="number">0</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="keyword">if</span> alist[i] == <span class="string">"d"</span>:</span><br><span class="line">        alist.remove(alist[i])      <span class="comment"># remove（s） 删除列表中第一次出现的该元素</span></span><br><span class="line">print(alist)</span><br></pre></td></tr></table></figure><pre><code>-8-7-6-5-4-3-2-1[&#39;2&#39;, &#39;2&#39;, &#39;4&#39;]</code></pre><p><strong>【例2】 多维列表的创建</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls = [[<span class="number">0</span>]*<span class="number">10</span>]*<span class="number">5</span></span><br><span class="line">ls</span><br></pre></td></tr></table></figure><pre><code>[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">ls</span><br></pre></td></tr></table></figure><pre><code>[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]]</code></pre><h2 id="9-2-更加简洁的语法"><a href="#9-2-更加简洁的语法" class="headerlink" title="9.2 更加简洁的语法"></a>9.2 更加简洁的语法</h2><h3 id="9-2-1-解析语法"><a href="#9-2-1-解析语法" class="headerlink" title="9.2.1 解析语法"></a>9.2.1 解析语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls = [[<span class="number">0</span>]*<span class="number">10</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><pre><code>[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">ls</span><br></pre></td></tr></table></figure><pre><code>[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]</code></pre><p><strong>1、解析语法的基本结构——以列表解析为例（也称为列表推导）</strong></p><p>[expression <strong>for value in iterable</strong> if conditihon]</p><ul><li>三要素：表达式、可迭代对象、if条件（可选）</li></ul><p><strong>执行过程</strong></p><p>（1）从可迭代对象中拿出一个元素</p><p>（2）通过if条件（如果有的话），对元素进行筛选</p><pre><code> 若通过筛选：则把元素传递给表达式   若未通过：  则进入（1）步骤，进入下一次迭代</code></pre><p>（3）将传递给表达式的元素，代入表达式进行处理，产生一个结果</p><p>（4）将（3）步产生的结果作为列表的一个元素进行存储</p><p>（5）重复（1）~（4）步，直至迭代对象迭代结束，返回新创建的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 等价于如下代码</span></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> iterale:</span><br><span class="line">    <span class="keyword">if</span> condition:</span><br><span class="line">        result.append(expression)</span><br></pre></td></tr></table></figure><p>【例】求20以内奇数的平方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        squares.append(i**<span class="number">2</span>)</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure><pre><code>[1, 9, 25, 49, 81, 121, 169, 225, 289, 361]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">21</span>) <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">1</span>]</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure><pre><code>[1, 9, 25, 49, 81, 121, 169, 225, 289, 361]</code></pre><p><strong>支持多变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">results = [i*j <span class="keyword">for</span> i,j <span class="keyword">in</span> zip(x, y)]</span><br><span class="line">results</span><br></pre></td></tr></table></figure><pre><code>[1, 4, 9]</code></pre><p><strong>支持循环嵌套</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">colors = [<span class="string">"black"</span>, <span class="string">"white"</span>]</span><br><span class="line">sizes = [<span class="string">"S"</span>, <span class="string">"M"</span>, <span class="string">"L"</span>]</span><br><span class="line">tshirts = [<span class="string">"&#123;&#125; &#123;&#125;"</span>.format(color, size) <span class="keyword">for</span> color <span class="keyword">in</span> colors <span class="keyword">for</span> size <span class="keyword">in</span> sizes]</span><br><span class="line">tshirts</span><br></pre></td></tr></table></figure><pre><code>[&#39;black S&#39;, &#39;black M&#39;, &#39;black L&#39;, &#39;white S&#39;, &#39;white M&#39;, &#39;white L&#39;]</code></pre><p><strong>2、其他解析语法的例子</strong></p><ul><li>解析语法构造字典（字典推导）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">squares = &#123;i: i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)&#125;</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> squares.items():</span><br><span class="line">    print(k, <span class="string">":  "</span>, v)</span><br></pre></td></tr></table></figure><pre><code>0 :   01 :   12 :   43 :   94 :   165 :   256 :   367 :   498 :   649 :   81</code></pre><ul><li>解析语法构造集合（集合推导）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = &#123;i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)&#125;</span><br><span class="line">squares</span><br></pre></td></tr></table></figure><pre><code>{0, 1, 4, 9, 16, 25, 36, 49, 64, 81}</code></pre><ul><li>生成器表达式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = (i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">squares</span><br></pre></td></tr></table></figure><pre><code>&lt;generator object &lt;genexpr&gt; at 0x00000282D42FB990&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">colors = [<span class="string">"black"</span>, <span class="string">"white"</span>]</span><br><span class="line">sizes = [<span class="string">"S"</span>, <span class="string">"M"</span>, <span class="string">"L"</span>]</span><br><span class="line">tshirts = (<span class="string">"&#123;&#125; &#123;&#125;"</span>.format(color, size) <span class="keyword">for</span> color <span class="keyword">in</span> colors <span class="keyword">for</span> size <span class="keyword">in</span> sizes)</span><br><span class="line"><span class="keyword">for</span> tshirt <span class="keyword">in</span> tshirts:</span><br><span class="line">    print(tshirt)</span><br></pre></td></tr></table></figure><pre><code>black Sblack Mblack Lwhite Swhite Mwhite L</code></pre><h3 id="9-2-2-条件表达式"><a href="#9-2-2-条件表达式" class="headerlink" title="9.2.2 条件表达式"></a>9.2.2 条件表达式</h3><figure class="highlight plain"><figcaption><span>if condition else expr2```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">【例】将变量n的绝对值赋值给变量x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">n &#x3D; -10</span><br><span class="line">if n &gt;&#x3D; 0:</span><br><span class="line">    x &#x3D; n</span><br><span class="line">else:</span><br><span class="line">    x &#x3D; -n</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>10</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">-10</span></span><br><span class="line">x = n <span class="keyword">if</span> n&gt;= <span class="number">0</span> <span class="keyword">else</span> -n</span><br><span class="line">x</span><br></pre></td></tr></table></figure><pre><code>10</code></pre><p><strong>条件表达式和解析语法简单实用、运行速度相对更快一些，相信大家会慢慢的爱上它们</strong></p><h2 id="9-3-三大神器"><a href="#9-3-三大神器" class="headerlink" title="9.3 三大神器"></a>9.3 三大神器</h2><h3 id="9-3-1-生成器"><a href="#9-3-1-生成器" class="headerlink" title="9.3.1 生成器"></a>9.3.1 生成器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1000001</span>)]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ls:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>缺点：占用大量内存</p><p><strong>生成器</strong>  </p><p>  （1）采用惰性计算的方式   </p><p>  （2）无需一次性存储海量数据  </p><p>  （3）一边执行一边计算，只计算每次需要的值</p><p>  （4）实际上一直在执行next()操作，直到无值可取</p><p><strong>1、生成器表达式</strong></p><ul><li>海量数据，不需存储</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">squares = (i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> squares:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>求0~100的和</li></ul><p>无需显示存储全部数据，节省内存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum((i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">101</span>)))</span><br></pre></td></tr></table></figure><pre><code>5050</code></pre><p><strong>2、生成器函数——yield</strong></p><ul><li>生产斐波那契数列</li></ul><p>数列前两个元素为1,1 之后的元素为其前两个元素之和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></span><br><span class="line">    ls = []</span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        ls.append(a)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fib(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><pre><code>[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</code></pre><p>中间尝试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        print(a)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fib(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><pre><code>11235813213455</code></pre><p>构造生成器函数</p><p>在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">fib(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;generator object fib at 0x00000282D42FBCA8&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fib(<span class="number">10</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>11235813213455</code></pre><h3 id="9-3-2-迭代器"><a href="#9-3-2-迭代器" class="headerlink" title="9.3.2 迭代器"></a>9.3.2 迭代器</h3><p><strong>1、可迭代对象</strong></p><p>可直接作用于for循环的对象统称为可迭代对象：Iterable</p><p><strong>（1）列表、元组、字符串、字典、集合、文件</strong></p><p>可以使用isinstance()判断一个对象是否是Iterable对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line">isinstance([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], Iterable)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isinstance(&#123;<span class="string">"name"</span>: <span class="string">"Sarah"</span>&#125;, Iterable)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isinstance(<span class="string">'Python'</span>, Iterable)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><p><strong>（2）生成器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = (i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line">isinstance(squares, Iterable)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><p>生成器不但可以用于for循环，还可以被next()函数调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(next(squares))</span><br><span class="line">print(next(squares))</span><br><span class="line">print(next(squares))</span><br><span class="line">print(next(squares))</span><br><span class="line">print(next(squares))</span><br></pre></td></tr></table></figure><pre><code>014916</code></pre><p>直到没有数据可取，抛出StopIteration</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(next(squares))</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------StopIteration                             Traceback (most recent call last)&lt;ipython-input-54-f5163ac9e49b&gt; in &lt;module&gt;()----&gt; 1 print(next(squares))StopIteration: </code></pre><p><strong>可以被next()函数调用并不断返回下一个值，直至没有数据可取的对象称为迭代器：Iterator</strong></p><p><strong>2、迭代器</strong></p><p>可以使用isinstance()判断一个对象是否是Iterator对象</p><p><strong>（1） 生成器都是迭代器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line"></span><br><span class="line">squares = (i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line">isinstance(squares, Iterator)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><p><strong>（2） 列表、元组、字符串、字典、集合不是迭代器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isinstance([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], Iterator)</span><br></pre></td></tr></table></figure><pre><code>False</code></pre><p>可以通过iter(Iterable)创建迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isinstance(iter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]), Iterator)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><p>for item in Iterable 等价于：</p><pre><code>先通过iter()函数获取可迭代对象Iterable的迭代器然后对获取到的迭代器不断调用next()方法来获取下一个值并将其赋值给item当遇到StopIteration的异常后循环结束</code></pre><p><strong>（3）zip enumerate 等itertools里的函数是迭代器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">y = [<span class="string">"a"</span>, <span class="string">"b"</span>]</span><br><span class="line">zip(x, y)</span><br></pre></td></tr></table></figure><pre><code>&lt;zip at 0x282d6ac49c8&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> zip(x, y):</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line">isinstance(zip(x, y), Iterator)</span><br></pre></td></tr></table></figure><pre><code>(1, &#39;a&#39;)(2, &#39;b&#39;)True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">enumerate(numbers)</span><br></pre></td></tr></table></figure><pre><code>&lt;enumerate at 0x282d430ad80&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enumerate(numbers):</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line">isinstance(enumerate(numbers), Iterator)</span><br></pre></td></tr></table></figure><pre><code>(0, 1)(1, 2)(2, 3)(3, 4)(4, 5)True</code></pre><p><strong>(4) 文件是迭代器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../测试文件.txt"</span>, <span class="string">"r"</span>, encoding = <span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(isinstance(f, Iterator))</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><p><strong>（5）迭代器是可耗尽的</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">squares = (i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> square <span class="keyword">in</span> squares:</span><br><span class="line">    print(square)</span><br></pre></td></tr></table></figure><pre><code>014916</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> square <span class="keyword">in</span> squares:</span><br><span class="line">    print(square)</span><br></pre></td></tr></table></figure><p><strong>（6）range()不是迭代器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = range(<span class="number">10</span>)</span><br><span class="line">isinstance(numbers, Iterator)</span><br></pre></td></tr></table></figure><pre><code>False</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(len(numbers))   <span class="comment"># 有长度</span></span><br><span class="line">print(numbers[<span class="number">0</span>])     <span class="comment"># 可索引</span></span><br><span class="line">print(<span class="number">9</span> <span class="keyword">in</span> numbers)   <span class="comment"># 可存在计算</span></span><br><span class="line">next(numbers)         <span class="comment"># 不可被next()调用</span></span><br></pre></td></tr></table></figure><pre><code>100True---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&lt;ipython-input-66-7c59bf859258&gt; in &lt;module&gt;()      2 print(numbers[0])     # 可索引      3 print(9 in numbers)   # 可存在计算----&gt; 4 next(numbers)         # 不可被next()调用TypeError: &#39;range&#39; object is not an iterator</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    print(number)</span><br></pre></td></tr></table></figure><pre><code>0123456789</code></pre><p>不会被耗尽</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    print(number)</span><br></pre></td></tr></table></figure><pre><code>0123456789</code></pre><p>可以称range()为懒序列  </p><pre><code>它是一种序列但并不包含任何内存中的内容而是通过计算来回答问题</code></pre><h3 id="9-3-3-装饰器"><a href="#9-3-3-装饰器" class="headerlink" title="9.3.3 装饰器"></a>9.3.3 装饰器</h3><p><strong>1、需求的提出</strong></p><p>（1）需要对已开发上线的程序添加某些功能</p><p>（2）不能对程序中函数的源代码进行修改</p><p>（3）不能改变程序中函数的调用方式</p><p><strong>比如说，要统计每个函数的运行时间</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">f2()</span><br><span class="line">f3()</span><br></pre></td></tr></table></figure><p><strong>没问题，我们有装饰器！！！</strong></p><p><strong>2、函数对象</strong></p><p>函数是Python中的第一类对象</p><p>（1）可以把函数赋值给变量  </p><p>（2）对该变量进行调用，可实现原函数的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(type(square))      <span class="comment"># square 是function类的一个实例</span></span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;function&#39;&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pow_2 = square          <span class="comment"># 可以理解成给这个函数起了个别名pow_2</span></span><br><span class="line">print(pow_2(<span class="number">5</span>))</span><br><span class="line">print(square(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><pre><code>2525</code></pre><p>可以将函数作为参数进行传递</p><p><strong>3、高阶函数</strong></p><p>（1）接收函数作为参数  </p><p>（2）或者返回一个函数  </p><p>   <strong>满足上述条件之一的函数称之为高阶函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow_2</span><span class="params">(fun)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> fun</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = pow_2(square)</span><br><span class="line">f(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><pre><code>64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(f == square)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><p><strong>4、 嵌套函数</strong></p><p><strong>在函数内部定义一个函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"outer is running"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"inner is running"</span>)</span><br><span class="line">        </span><br><span class="line">    inner()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">outer()</span><br></pre></td></tr></table></figure><pre><code>outer is runninginner is running</code></pre><p><strong>5、闭包</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    z = <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        y = x+<span class="number">100</span></span><br><span class="line">        <span class="keyword">return</span> y, z</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = outer()                <span class="comment"># 实际上f包含了inner函数本身+outer函数的环境</span></span><br><span class="line">print(f)</span><br></pre></td></tr></table></figure><pre><code>&lt;function outer.&lt;locals&gt;.inner at 0x00000282D42E9A60&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(f.__closure__)         <span class="comment"># __closure__属性中包含了来自外部函数的信息</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f.__closure__:</span><br><span class="line">    print(i.cell_contents)</span><br></pre></td></tr></table></figure><pre><code>(&lt;cell at 0x00000282D430C288: int object at 0x0000000070786C40&gt;, &lt;cell at 0x00000282D430CE88: int object at 0x0000000070786D60&gt;)110</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = f()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><pre><code>(101, 10)</code></pre><p><strong>闭包：延伸了作用域的函数</strong>  </p><p><strong>如果一个函数定义在另一个函数的作用域内，并且引用了外层函数的变量，则该函数称为闭包</strong></p><p><strong>闭包是由函数及其相关的引用环境组合而成的实体(即：闭包=函数+引用环境)</strong></p><ul><li>一旦在内层函数重新定义了相同名字的变量，则变量成为局部变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        x = x+<span class="number">100</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = outer()             </span><br><span class="line">f()</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------UnboundLocalError                         Traceback (most recent call last)&lt;ipython-input-78-d2da1048af8b&gt; in &lt;module&gt;()     10      11 f = outer()---&gt; 12 f()&lt;ipython-input-78-d2da1048af8b&gt; in inner()      3       4     def inner():----&gt; 5         x = x+100      6         return x      7 UnboundLocalError: local variable &#39;x&#39; referenced before assignment</code></pre><p>nonlocal允许内嵌的函数来修改闭包变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> x</span><br><span class="line">        x = x+<span class="number">100</span></span><br><span class="line">        <span class="keyword">return</span> x  </span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = outer()             </span><br><span class="line">f()</span><br></pre></td></tr></table></figure><pre><code>101</code></pre><p><strong>6、一个简单的装饰器</strong></p><p><strong>嵌套函数实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"inner run"</span>)</span><br><span class="line">        start = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">"&#123;&#125; 函数运行用时&#123;:.2f&#125;秒"</span>.format(func.__name__, (end-start)))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"f1 run"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1 = timer(f1)             <span class="comment"># 包含inner()和timer的环境，如传递过来的参数func</span></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><pre><code>inner runf1 runf1 函数运行用时1.00秒</code></pre><p><strong>语法糖</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"inner run"</span>)</span><br><span class="line">        start = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">"&#123;&#125; 函数运行用时&#123;:.2f&#125;秒"</span>.format(func.__name__, (end-start)))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer                      # 相当于实现了f1 = timer(f1)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"f1 run"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><pre><code>inner runf1 runf1 函数运行用时1.00秒</code></pre><p><strong>7、装饰有参函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"inner run"</span>)</span><br><span class="line">        start = time.time()</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">"&#123;&#125; 函数运行用时&#123;:.2f&#125;秒"</span>.format(func.__name__, (end-start)))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timer                # 相当于实现了f1 = timer(f1)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">"f1 run"</span>)</span><br><span class="line">    time.sleep(n)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">f1(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>inner runf1 runf1 函数运行用时2.00秒</code></pre><p>被装饰函数有返回值的情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"inner run"</span>)</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">"&#123;&#125; 函数运行用时&#123;:.2f&#125;秒"</span>.format(func.__name__, (end-start)))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timer                   # 相当于实现了f1 = timer(f1)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">"f1 run"</span>)</span><br><span class="line">    time.sleep(n)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"wake up"</span></span><br><span class="line">    </span><br><span class="line">res = f1(<span class="number">2</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><pre><code>inner runf1 runf1 函数运行用时2.00秒wake up</code></pre><p><strong>8、带参数的装饰器</strong></p><p>装饰器本身要传递一些额外参数</p><ul><li>需求：有时需要统计绝对时间，有时需要统计绝对时间的2倍</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(method)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(func)</span>:</span></span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">"inner run"</span>)</span><br><span class="line">            <span class="keyword">if</span> method == <span class="string">"origin"</span>:</span><br><span class="line">                print(<span class="string">"origin_inner run"</span>)</span><br><span class="line">                start = time.time()</span><br><span class="line">                res = func(*args, **kwargs)</span><br><span class="line">                end = time.time()</span><br><span class="line">                print(<span class="string">"&#123;&#125; 函数运行用时&#123;:.2f&#125;秒"</span>.format(func.__name__, (end-start)))</span><br><span class="line">            <span class="keyword">elif</span> method == <span class="string">"double"</span>:</span><br><span class="line">                print(<span class="string">"double_inner run"</span>)</span><br><span class="line">                start = time.time()</span><br><span class="line">                res = func(*args, **kwargs)</span><br><span class="line">                end = time.time()</span><br><span class="line">                print(<span class="string">"&#123;&#125; 函数运行双倍用时&#123;:.2f&#125;秒"</span>.format(func.__name__, <span class="number">2</span>*(end-start)))</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> outer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timer(method="origin")  # 相当于timer = timer(method = "origin")   f1 = timer(f1)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"f1 run"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="meta">@timer(method="double")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"f2 run"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">print()</span><br><span class="line">f2()</span><br></pre></td></tr></table></figure><pre><code>inner runorigin_inner runf1 runf1 函数运行用时1.00秒inner rundouble_inner runf2 runf2 函数运行双倍用时2.00秒</code></pre><p><strong>理解闭包是关键！！！</strong></p><p><strong>9、何时执行装饰器</strong></p><ul><li>一装饰就执行，不必等调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">func_names=[]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_function</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">"run"</span>)</span><br><span class="line">    func_names.append(func)</span><br><span class="line">    <span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@find_function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"f1 run"</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="meta">@find_function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"f2 run"</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="meta">@find_function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"f3 run"</span>)</span><br></pre></td></tr></table></figure><pre><code>runrunrun</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> func <span class="keyword">in</span> func_names:</span><br><span class="line">    print(func.__name__)</span><br><span class="line">    func()</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><pre><code>f1f1 runf2f2 runf3f3 run</code></pre><p><strong>10、回归本源</strong></p><ul><li>原函数的属性被掩盖了</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"inner run"</span>)</span><br><span class="line">        start = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">"&#123;&#125; 函数运行用时&#123;:.2f&#125;秒"</span>.format(func.__name__, (end-start)))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer                # 相当于实现了f1 = timer(f1)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"f1 run"</span>)</span><br><span class="line"></span><br><span class="line">print(f1.__name__)</span><br></pre></td></tr></table></figure><pre><code>inner</code></pre><ul><li>回来</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"inner run"</span>)</span><br><span class="line">        start = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">"&#123;&#125; 函数运行用时&#123;:.2f&#125;秒"</span>.format(func.__name__, (end-start)))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer                # 相当于实现了f1 = timer(f1)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"f1 run"</span>)</span><br><span class="line"></span><br><span class="line">print(f1.__name__) </span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><pre><code>f1inner runf1 runf1 函数运行用时1.00秒</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础8(文件、异常和模块)</title>
      <link href="/2020/08/13/deepshare_python%E5%9F%BA%E7%A1%808/"/>
      <url>/2020/08/13/deepshare_python%E5%9F%BA%E7%A1%808/</url>
      
        <content type="html"><![CDATA[<h1 id="第八章-文件、异常和模块"><a href="#第八章-文件、异常和模块" class="headerlink" title="第八章 文件、异常和模块"></a>第八章 文件、异常和模块</h1><p><strong>实际应用中，我们绝大多数的数据都是通过文件的交互完成的</strong></p><h2 id="8-1-文件的读写"><a href="#8-1-文件的读写" class="headerlink" title="8.1 文件的读写"></a>8.1 文件的读写</h2><h3 id="8-1-1-文件的打开"><a href="#8-1-1-文件的打开" class="headerlink" title="8.1.1 文件的打开"></a>8.1.1 文件的打开</h3><ul><li>文件的打开通用格式</li></ul><p><strong>使用with 块的好处：执行完毕后，自动对文件进行close操作。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"文件路径"</span>, <span class="string">"打开模式"</span>, encoding = <span class="string">"操作文件的字符编码"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="string">"对文件进行相应的读写操作"</span></span><br></pre></td></tr></table></figure><p>【例1】一个简单的文件读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">r"D:\object detection\deepshare_paperVIP\03代码及数据资料合集\03代码及数据资料合集\课程代码及数据\测试文件.txt"</span>, <span class="string">"r"</span>, encoding = <span class="string">"gbk"</span>) <span class="keyword">as</span> f:     <span class="comment"># 第一步：打开文件</span></span><br><span class="line">    text = f.read()                                                   <span class="comment"># 第二步：读取文件</span></span><br><span class="line">    print(text)</span><br></pre></td></tr></table></figure><pre><code>我是一个测试文件</code></pre><p><strong>1、文件路径</strong></p><ul><li><p>完整路径，如上例所示</p></li><li><p>程序与文件在同一文件夹，可简化成文件名</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../测试文件.txt"</span>, <span class="string">"r"</span>, encoding = <span class="string">"gbk"</span>) <span class="keyword">as</span> f:     <span class="comment"># 第一步：打开文件</span></span><br><span class="line">    text = f.read()                                        <span class="comment"># 第二步：读取文件</span></span><br><span class="line">    print(text)</span><br></pre></td></tr></table></figure><pre><code>我是一个测试文件</code></pre><p><strong>2、打开模式</strong></p><ul><li><p>“r” &ensp;只读模式，如文件不存在，报错</p></li><li><p>“w”&ensp;覆盖写模式，如文件不存在，则创建；如文件存在，则完全覆盖原文件</p></li><li><p>“x”&ensp;创建写模式，如文件不存在，则创建；如文件存在，报错</p></li><li><p>“a” &ensp;追加写模式，如文件不存在，则创建；如文件存在，则在原文件后追加内容</p></li><li><p>“b” 二进制文件模式，不能单独使用，需要配合使用如”rb”，”wb”，”ab”，<strong>该模式不需指定encoding</strong></p></li><li><p>“t” 文本文件模式，默认值，需配合使用 如”rt”，”wt”，”at”，一般省略，简写成如”r”，”w”，”a”</p></li><li><p>“+”，与”r”,”w”,”x”,”a”配合使用，在原功能基础上，增加读写功能</p></li><li><p><strong>打开模式缺省，默认为只读模式</strong></p></li></ul><p><strong>3、字符编码</strong></p><ul><li><strong>万国码 utf-8</strong></li></ul><p>包含全世界所有国家需要用到的字符</p><ul><li><strong>中文编码 gbk</strong></li></ul><p>专门解决中文编码问题</p><ul><li><p><strong>windows系统下，如果缺省，则默认为gbk（所在区域的编码）</strong></p></li><li><p>为清楚起见，除了处理二进制文件，<strong>建议不要缺省encoding</strong></p></li></ul><h3 id="8-1-2-文件的读取"><a href="#8-1-2-文件的读取" class="headerlink" title="8.1.2 文件的读取"></a>8.1.2 文件的读取</h3><p>1、<strong>读取整个内容——f.read()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../三国演义片头曲_utf.txt"</span>, <span class="string">"r"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:       <span class="comment"># 第一步：打开文件</span></span><br><span class="line">    text = f.read()                                                    <span class="comment"># 第二步：读取文件</span></span><br><span class="line">    print(text)</span><br></pre></td></tr></table></figure><pre><code>临江仙·滚滚长江东逝水滚滚长江东逝水，浪花淘尽英雄。是非成败转头空。青山依旧在，几度夕阳红。白发渔樵江渚上，惯看秋月春风。一壶浊酒喜相逢。古今多少事，都付笑谈中。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../三国演义片头曲_utf.txt"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:     <span class="comment"># "r"，可缺省，为清晰起见，最好写上</span></span><br><span class="line">    text = f.read()                                                   </span><br><span class="line">    print(text)</span><br></pre></td></tr></table></figure><pre><code>临江仙·滚滚长江东逝水滚滚长江东逝水，浪花淘尽英雄。是非成败转头空。青山依旧在，几度夕阳红。白发渔樵江渚上，惯看秋月春风。一壶浊酒喜相逢。古今多少事，都付笑谈中。</code></pre><ul><li>解码模式不匹配</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../三国演义片头曲_utf.txt"</span>, <span class="string">"r"</span>, encoding=<span class="string">"gbk"</span>) <span class="keyword">as</span> f:     </span><br><span class="line">    text = f.read()                                                    </span><br><span class="line">    print(text)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------UnicodeDecodeError                        Traceback (most recent call last)&lt;ipython-input-5-53c0e22ea276&gt; in &lt;module&gt;()      1 with open(&quot;../三国演义片头曲_utf.txt&quot;, &quot;r&quot;, encoding=&quot;gbk&quot;) as f:----&gt; 2     text = f.read()      3     print(text)UnicodeDecodeError: &#39;gbk&#39; codec can&#39;t decode byte 0x80 in position 50: illegal multibyte sequence</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../三国演义片头曲_utf.txt"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:     <span class="comment"># encoding缺省，windows系统默认为"gbk"</span></span><br><span class="line">    text = f.read()                                                    </span><br><span class="line">    print(text)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------UnicodeDecodeError                        Traceback (most recent call last)&lt;ipython-input-6-9c2dabc90f4c&gt; in &lt;module&gt;()      1 with open(&quot;../三国演义片头曲_utf.txt&quot;, &quot;r&quot;) as f:     # encoding缺省，windows系统默认为&quot;gbk&quot;----&gt; 2     text = f.read()      3     print(text)UnicodeDecodeError: &#39;gbk&#39; codec can&#39;t decode byte 0x80 in position 50: illegal multibyte sequence</code></pre><p>2、<strong>逐行进行读取——f.readline()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../三国演义片头曲_gbk.txt"</span>, <span class="string">"r"</span>, encoding=<span class="string">"gbk"</span>) <span class="keyword">as</span> f:     </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        text = f.readline()                                                   <span class="comment"># 每次只读取一行</span></span><br><span class="line">        print(text)</span><br></pre></td></tr></table></figure><pre><code>临江仙·滚滚长江东逝水滚滚长江东逝水，浪花淘尽英雄。是非成败转头空。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../三国演义片头曲_gbk.txt"</span>, <span class="string">"r"</span>, encoding=<span class="string">"gbk"</span>) <span class="keyword">as</span> f:     </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        text = f.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">            <span class="comment"># print(text is "")</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># print(text == "\n")</span></span><br><span class="line">            print(text, end=<span class="string">""</span>)      <span class="comment"># 保留原文的换行，使print()的换行不起作用</span></span><br></pre></td></tr></table></figure><pre><code>临江仙·滚滚长江东逝水滚滚长江东逝水，浪花淘尽英雄。是非成败转头空。青山依旧在，几度夕阳红。白发渔樵江渚上，惯看秋月春风。一壶浊酒喜相逢。古今多少事，都付笑谈中。</code></pre><p>3、<strong>读入所有行，以每行为元素形成一个列表——f.readlines()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../三国演义片头曲_gbk.txt"</span>, <span class="string">"r"</span>, encoding=<span class="string">"gbk"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    text = f.readlines()              <span class="comment"># 注意每行末尾有换行符</span></span><br><span class="line">    print(text)</span><br></pre></td></tr></table></figure><pre><code>[&#39;临江仙·滚滚长江东逝水\n&#39;, &#39;滚滚长江东逝水，浪花淘尽英雄。\n&#39;, &#39;是非成败转头空。\n&#39;, &#39;\n&#39;, &#39;青山依旧在，几度夕阳红。\n&#39;, &#39;白发渔樵江渚上，惯看秋月春风。\n&#39;, &#39;一壶浊酒喜相逢。\n&#39;, &#39;古今多少事，都付笑谈中。\n&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../三国演义片头曲_gbk.txt"</span>, <span class="string">"r"</span>, encoding=<span class="string">"gbk"</span>) <span class="keyword">as</span> f:     </span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> f.readlines():                                                   </span><br><span class="line">        print(text)                <span class="comment"># 不想换行则用print(text, end="")</span></span><br></pre></td></tr></table></figure><pre><code>临江仙·滚滚长江东逝水滚滚长江东逝水，浪花淘尽英雄。是非成败转头空。青山依旧在，几度夕阳红。白发渔樵江渚上，惯看秋月春风。一壶浊酒喜相逢。古今多少事，都付笑谈中。</code></pre><p>4、<strong>文本文件读取小结</strong></p><p>文件比较大时，read()和readlines()占用内存过大，不建议使用</p><p>readline用起来又不太方便</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../三国演义片头曲_gbk.txt"</span>, <span class="string">"r"</span>, encoding=<span class="string">"gbk"</span>) <span class="keyword">as</span> f:     </span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> f:         <span class="comment"># f本身就是一个可迭代对象，每次迭代读取一行内容 </span></span><br><span class="line">        print(text, end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><pre><code>临江仙·滚滚长江东逝水滚滚长江东逝水，浪花淘尽英雄。是非成败转头空。青山依旧在，几度夕阳红。白发渔樵江渚上，惯看秋月春风。一壶浊酒喜相逢。古今多少事，都付笑谈中。</code></pre><p>5、<strong>二进制文件</strong></p><p>图片：二进制文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../test.jpg"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> f:     </span><br><span class="line">        print(len(f.readlines()))</span><br></pre></td></tr></table></figure><pre><code>69</code></pre><h3 id="8-1-3-文件的写入"><a href="#8-1-3-文件的写入" class="headerlink" title="8.1.3 文件的写入"></a>8.1.3 文件的写入</h3><p>1、<strong>向文件写入一个字符串或字节流（二进制）——f.write()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../恋曲1980.txt"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:                      </span><br><span class="line">        f.write(<span class="string">"你曾经对我说\n"</span>)        <span class="comment"># 文件不存在则立刻创建一个</span></span><br><span class="line">        f.write(<span class="string">"你永远爱着我\n"</span>)        <span class="comment"># 如需换行，末尾加换行符\n</span></span><br><span class="line">        f.write(<span class="string">"爱情这东西我明白\n"</span>)</span><br><span class="line">        f.write(<span class="string">"但永远是什么\n"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../恋曲1980.txt"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:                      </span><br><span class="line">        f.write(<span class="string">"姑娘你别哭泣\n"</span>)        <span class="comment"># 如果文件存在，新写入内容会覆盖掉原内容，一定要注意！！！</span></span><br><span class="line">        f.write(<span class="string">"我俩还在一起\n"</span>)        </span><br><span class="line">        f.write(<span class="string">"今天的欢乐\n"</span>)</span><br><span class="line">        f.write(<span class="string">"将是明天创痛的回忆\n"</span>)</span><br></pre></td></tr></table></figure><p>2、<strong>追加模式——“a”</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../恋曲1980.txt"</span>, <span class="string">"a"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:                      </span><br><span class="line">        f.write(<span class="string">"姑娘你别哭泣\n"</span>)        <span class="comment"># 如果文件存在，则在原文件后追加内容</span></span><br><span class="line">        f.write(<span class="string">"我俩还在一起\n"</span>)        </span><br><span class="line">        f.write(<span class="string">"今天的欢乐\n"</span>)</span><br><span class="line">        f.write(<span class="string">"将是明天创痛的回忆\n"</span>)</span><br></pre></td></tr></table></figure><p>3、<strong>将一个元素为字符串的列表整体写入文件——f.writelines()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="string">"春天刮着风"</span>, <span class="string">"秋天下着雨"</span>, <span class="string">"春风秋雨多少海誓山盟随风远去"</span>]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"../恋曲1980.txt"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(ls)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="string">"春天刮着风\n"</span>, <span class="string">"秋天下着雨\n"</span>, <span class="string">"春风秋雨多少海誓山盟随风远去\n"</span>]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"../恋曲1980.txt"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(ls)</span><br></pre></td></tr></table></figure><h3 id="8-1-4-既读又写"><a href="#8-1-4-既读又写" class="headerlink" title="8.1.4 既读又写"></a>8.1.4 既读又写</h3><p>1、<strong>“r+”</strong>  </p><ul><li>如果文件名不存在，则报错</li><li>指针在开始</li><li>要把指针移到末尾才能开始写，否则会覆盖前面内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../浪淘沙_北戴河.txt"</span>, <span class="string">"r+"</span>, encoding=<span class="string">"gbk"</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="comment">#     for line in f:</span></span><br><span class="line"><span class="comment">#         print(line)   # 全部读一遍后，指针到达结尾</span></span><br><span class="line">    f.seek(<span class="number">0</span>,<span class="number">2</span>)         <span class="comment"># 或者可以将指针移到末尾f.seek(偏移字节数,位置（0：开始；1：当前位置；2：结尾）)</span></span><br><span class="line">    text = [<span class="string">"萧瑟秋风今又是，\n"</span>, <span class="string">"换了人间。\n"</span>]</span><br><span class="line">    f.writelines(text)</span><br></pre></td></tr></table></figure><p>2、<strong>“w+”</strong></p><ul><li>若文件不存在，则创建</li><li>若文件存在，会立刻清空原内容！！！</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../浪淘沙_北戴河.txt"</span>, <span class="string">"w+"</span>, encoding=<span class="string">"gbk"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../浪淘沙_北戴河.txt"</span>, <span class="string">"w+"</span>, encoding=<span class="string">"gbk"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    text = [<span class="string">"萧瑟秋风今又是，\n"</span>, <span class="string">"换了人间。\n"</span>]  <span class="comment"># 清空原内容</span></span><br><span class="line">    f.writelines(text)                             <span class="comment"># 写入新内容，指针在最后</span></span><br><span class="line">    f.seek(<span class="number">0</span>,<span class="number">0</span>)            <span class="comment"># 指针移到开始</span></span><br><span class="line">    print(f.read())        <span class="comment"># 读取内容</span></span><br></pre></td></tr></table></figure><pre><code>萧瑟秋风今又是，换了人间。</code></pre><p>3、<strong>“a+”</strong></p><ul><li>若文件不存在，则创建</li><li>指针在末尾，添加新内容，不会清空原内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../浪淘沙_北戴河.txt"</span>, <span class="string">"a+"</span>, encoding=<span class="string">"gbk"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">0</span>,<span class="number">0</span>)            <span class="comment"># 指针移到开始</span></span><br><span class="line">    print(f.read())        <span class="comment"># 读取内容</span></span><br></pre></td></tr></table></figure><pre><code>萧瑟秋风今又是，换了人间。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../浪淘沙_北戴河.txt"</span>, <span class="string">"a+"</span>, encoding=<span class="string">"gbk"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    text = [<span class="string">"萧瑟秋风今又是，\n"</span>, <span class="string">"换了人间。\n"</span>]  </span><br><span class="line">    f.writelines(text)                             <span class="comment"># 指针在最后,追加新内容， </span></span><br><span class="line">    f.seek(<span class="number">0</span>,<span class="number">0</span>)            <span class="comment"># 指针移到开始</span></span><br><span class="line">    print(f.read())        <span class="comment"># 读取内容</span></span><br></pre></td></tr></table></figure><pre><code>萧瑟秋风今又是，换了人间。萧瑟秋风今又是，换了人间。</code></pre><h3 id="8-1-5-数据的存储与读取"><a href="#8-1-5-数据的存储与读取" class="headerlink" title="8.1.5 数据的存储与读取"></a>8.1.5 数据的存储与读取</h3><p><strong>通用的数据格式，可以在不同语言中加载和存储</strong>  </p><p><strong>本节简单了解两种数据存储结构csv和json</strong></p><p>1、<strong>csv格式</strong></p><p>由逗号将数据分开的字符序列，可以由excel打开</p><ul><li><strong>读取</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../成绩.csv"</span>, <span class="string">"r"</span>, encoding=<span class="string">"gbk"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ls = [] </span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:                              <span class="comment"># 逐行读取</span></span><br><span class="line">        ls.append(line.strip(<span class="string">"\n"</span>).split(<span class="string">","</span>))  <span class="comment"># 去掉每行的换行符，然后用“,”进行分割</span></span><br><span class="line">    print(ls)</span><br><span class="line"><span class="keyword">for</span> res <span class="keyword">in</span> ls:</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure><pre><code>[[&#39;编号&#39;, &#39;数学成绩&#39;, &#39;语文成绩&#39;], [&#39;1&#39;, &#39;100&#39;, &#39;98&#39;], [&#39;2&#39;, &#39;96&#39;, &#39;99&#39;], [&#39;3&#39;, &#39;97&#39;, &#39;95&#39;]][&#39;编号&#39;, &#39;数学成绩&#39;, &#39;语文成绩&#39;][&#39;1&#39;, &#39;100&#39;, &#39;98&#39;][&#39;2&#39;, &#39;96&#39;, &#39;99&#39;][&#39;3&#39;, &#39;97&#39;, &#39;95&#39;]</code></pre><ul><li><strong>写入</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls = [[<span class="string">'编号'</span>, <span class="string">'数学成绩'</span>, <span class="string">'语文成绩'</span>], [<span class="string">'1'</span>, <span class="string">'100'</span>, <span class="string">'98'</span>], [<span class="string">'2'</span>, <span class="string">'96'</span>, <span class="string">'99'</span>], [<span class="string">'3'</span>, <span class="string">'97'</span>, <span class="string">'95'</span>]]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"../score.csv"</span>, <span class="string">"w"</span>, encoding=<span class="string">"gbk"</span>) <span class="keyword">as</span> f:   <span class="comment"># encoding="utf-8"中文出现乱码</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> ls:                                  <span class="comment"># 逐行写入</span></span><br><span class="line">        f.write(<span class="string">","</span>.join(row)+<span class="string">"\n"</span>)                 <span class="comment"># 用逗号组合成字符串形式，末尾加换行符</span></span><br></pre></td></tr></table></figure><p><strong>也可以借助csv模块完成上述操作</strong></p><p>2、<strong>json格式</strong> </p><p>常被用来存储字典类型</p><ul><li><strong>写入——dump()</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">scores = &#123;<span class="string">"Petter"</span>:&#123;<span class="string">"math"</span>:<span class="number">96</span> , <span class="string">"physics"</span>: <span class="number">98</span>&#125;,</span><br><span class="line">        <span class="string">"Paul"</span>:&#123;<span class="string">"math"</span>:<span class="number">92</span> , <span class="string">"physics"</span>: <span class="number">99</span>&#125;,</span><br><span class="line">        <span class="string">"Mary"</span>:&#123;<span class="string">"math"</span>:<span class="number">98</span> , <span class="string">"physics"</span>: <span class="number">97</span>&#125;&#125;</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"../score.json"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:             <span class="comment"># 写入整个对象 </span></span><br><span class="line">        <span class="comment"># indent 表示字符串换行+缩进 ensure_ascii=False 显示中文</span></span><br><span class="line">        json.dump(scores, f, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>读取——load()</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"../score.json"</span>, <span class="string">"r"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:                                         </span><br><span class="line">        scores = json.load(f)           <span class="comment"># 加载整个对象</span></span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> scores.items():</span><br><span class="line">            print(k,v)</span><br></pre></td></tr></table></figure><pre><code>Petter {&#39;math&#39;: 96, &#39;physics&#39;: 98}Paul {&#39;math&#39;: 92, &#39;physics&#39;: 99}Mary {&#39;math&#39;: 98, &#39;physics&#39;: 97}</code></pre><h2 id="8-2-异常处理"><a href="#8-2-异常处理" class="headerlink" title="8.2 异常处理"></a>8.2 异常处理</h2><h3 id="8-2-1-常见异常的产生"><a href="#8-2-1-常见异常的产生" class="headerlink" title="8.2.1 常见异常的产生"></a>8.2.1 常见异常的产生</h3><p>1、<strong>除0运算——ZeroDivisionError</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>/<span class="number">0</span></span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------ZeroDivisionError                         Traceback (most recent call last)&lt;ipython-input-27-9e1622b385b6&gt; in &lt;module&gt;()----&gt; 1 1/0ZeroDivisionError: division by zero</code></pre><p>2、<strong>找不到可读文件——FileNotFoundError</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"nobody.csv"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------FileNotFoundError                         Traceback (most recent call last)&lt;ipython-input-28-f2e8c7d0ac60&gt; in &lt;module&gt;()----&gt; 1 with open(&quot;nobody.csv&quot;) as f:      2     passFileNotFoundError: [Errno 2] No such file or directory: &#39;nobody.csv&#39;</code></pre><p>3、<strong>值错误——ValueError</strong></p><p>传入一个调用者不期望的值，即使这个值的类型是正确的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"1.3"</span></span><br><span class="line">n = int(s)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)&lt;ipython-input-29-69942d9db3c0&gt; in &lt;module&gt;()      1 s = &quot;1.3&quot;----&gt; 2 n = int(s)ValueError: invalid literal for int() with base 10: &#39;1.3&#39;</code></pre><p>4、<strong>索引错误——IndexError</strong></p><p>下标超出序列边界</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">ls[<span class="number">5</span>]</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------IndexError                                Traceback (most recent call last)&lt;ipython-input-30-acf459124b52&gt; in &lt;module&gt;()      1 ls = [1, 2, 3]----&gt; 2 ls[5]IndexError: list index out of range</code></pre><p>5、<strong>类型错误——TypeError</strong></p><p>传入对象类型与要求不符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="string">"3"</span></span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&lt;ipython-input-31-ee505dc42f75&gt; in &lt;module&gt;()----&gt; 1 1 + &quot;3&quot;TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;</code></pre><p>6、<strong>其他常见的异常类型</strong></p><p>NameError 使用一个未被定义的变量<br>KeyError 试图访问字典里不存在的键<br>。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(a)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)&lt;ipython-input-32-bca0e2660b9f&gt; in &lt;module&gt;()----&gt; 1 print(a)NameError: name &#39;a&#39; is not defined</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#125;</span><br><span class="line">d[<span class="string">"1"</span>]</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------KeyError                                  Traceback (most recent call last)&lt;ipython-input-33-e629d551aca0&gt; in &lt;module&gt;()      1 d = {}----&gt; 2 d[&quot;1&quot;]KeyError: &#39;1&#39;</code></pre><p><strong>当异常发生的时候，如果不预先设定处理方法，程序就会中断</strong></p><h3 id="8-2-2-异常的处理"><a href="#8-2-2-异常的处理" class="headerlink" title="8.2.2 异常的处理"></a>8.2.2 异常的处理</h3><p><strong>提高程序的稳定性和可靠性</strong></p><p>1、<strong>try_except</strong></p><ul><li>如果try内代码块顺利执行，except不被触发</li><li><p>如果try内代码块发生错误，触发except,执行except内代码块</p></li><li><p>单分支</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">y = <span class="number">0</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    z = x/y</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:                  <span class="comment"># 一般来说会预判到出现什么错误</span></span><br><span class="line">    <span class="comment"># z = x/(y+1e-7)</span></span><br><span class="line">    <span class="comment"># print(z)</span></span><br><span class="line">    print(<span class="string">"0不可以被除！"</span>)</span><br></pre></td></tr></table></figure><pre><code>0不可以被除！</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">y = <span class="number">0</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    z = x/y</span><br><span class="line"><span class="keyword">except</span> NameError:                  <span class="comment"># 一般来说会预判到出现什么错误</span></span><br><span class="line">    <span class="comment"># z = x/(y+1e-7)</span></span><br><span class="line">    <span class="comment"># print(z)</span></span><br><span class="line">    print(<span class="string">"0不可以被除！"</span>)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------ZeroDivisionError                         Traceback (most recent call last)&lt;ipython-input-35-aea58863ad72&gt; in &lt;module&gt;()      2 y = 0      3 try:----&gt; 4     z = x/y      5 except NameError:                  # 一般来说会预判到出现什么错误      6     # z = x/(y+1e-7)ZeroDivisionError: division by zero</code></pre><ul><li>多分支</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ls = []</span><br><span class="line">d = &#123;<span class="string">"name"</span>: <span class="string">"大杰仔"</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    y = m</span><br><span class="line">    <span class="comment"># ls[3]</span></span><br><span class="line">    <span class="comment"># d["age"]</span></span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    print(<span class="string">"变量名不存在"</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    print(<span class="string">"索引超出界限"</span>)</span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">    print(<span class="string">"键不存在"</span>)</span><br></pre></td></tr></table></figure><pre><code>变量名不存在</code></pre><ul><li>万能异常 Exception （所有错误的老祖宗）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ls = []</span><br><span class="line">d = &#123;<span class="string">"name"</span>: <span class="string">"大杰仔"</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># y = m</span></span><br><span class="line">    ls[<span class="number">3</span>]</span><br><span class="line">    <span class="comment"># d["age"]</span></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"出错啦"</span>)</span><br></pre></td></tr></table></figure><pre><code>出错啦</code></pre><ul><li>捕获异常的值 as</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ls = []</span><br><span class="line">d = &#123;<span class="string">"name"</span>: <span class="string">"大杰仔"</span>&#125;</span><br><span class="line"><span class="comment"># y = x</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    y = m</span><br><span class="line">    <span class="comment"># ls[3]</span></span><br><span class="line">    <span class="comment"># d["age"]</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:    <span class="comment"># 虽不能获得错误具体类型，但可以获得错误的值</span></span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure><pre><code>name &#39;m&#39; is not defined</code></pre><p>2、<strong>try_except_else</strong></p><ul><li>如果try 模块执行，则else模块也执行  </li></ul><p>可以将else 看做try成功的额外奖赏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"../浪淘沙_北戴河.txt"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        text = f.read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    print(<span class="string">"找不到该文件，ta是不是用了美颜？"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> [<span class="string">"\n"</span>, <span class="string">"，"</span>, <span class="string">"。"</span>, <span class="string">"？"</span>]:         <span class="comment"># 去掉换行符和标点符号</span></span><br><span class="line">        text = text.replace(s, <span class="string">""</span>)</span><br><span class="line">    print(<span class="string">"毛主席的名作《浪淘沙_北戴河》共由&#123;&#125;个字组成。"</span>.format(len(text)))</span><br></pre></td></tr></table></figure><pre><code>毛主席的名作《浪淘沙_北戴河》共由22个字组成。</code></pre><p>3、<strong>try_except_finally</strong></p><ul><li>不论try模块是否执行，finally最后都执行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ls = []</span><br><span class="line">d = &#123;<span class="string">"name"</span>: <span class="string">"大杰仔"</span>&#125;</span><br><span class="line"><span class="comment"># y = x</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    y = m</span><br><span class="line">    <span class="comment"># ls[3]</span></span><br><span class="line">    <span class="comment"># d["age"]</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:    <span class="comment"># 虽不能获得错误具体类型，但可以获得错误的值</span></span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"不论触不触发异常，都将执行"</span>)</span><br></pre></td></tr></table></figure><pre><code>name &#39;m&#39; is not defined不论触不触发异常，都将执行</code></pre><h2 id="8-3-模块简介"><a href="#8-3-模块简介" class="headerlink" title="8.3 模块简介"></a>8.3 模块简介</h2><p>已经被封装好  </p><p>无需自己再“造轮子”  </p><p>声明导入后，拿来即用</p><h3 id="8-3-1-广义模块分类"><a href="#8-3-1-广义模块分类" class="headerlink" title="8.3.1 广义模块分类"></a>8.3.1 广义模块分类</h3><p><strong>1、Python 内置</strong></p><p>&emsp;时间库time\ &ensp;随机库random\ &ensp;容器数据类型collection\ &ensp;迭代器函数itertools</p><p><strong>2、第三方库</strong></p><p>&emsp;数据分析numpy、pandas\ &ensp;数据可视化matplotlib\ &ensp;机器学习scikit-learn\ &ensp;深度学习Tensorflow</p><p><strong>3、自定义文件</strong></p><ul><li><p>单独py文件</p></li><li><p>包——多个py文件</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件夹内多个py文件，再加一个__init__.py文件（内容可为空）</span></span><br></pre></td></tr></table></figure><h3 id="8-3-2-模块的导入"><a href="#8-3-2-模块的导入" class="headerlink" title="8.3.2 模块的导入"></a>8.3.2 模块的导入</h3><p><strong>1、导入整个模块——import&emsp;模块名</strong></p><ul><li><strong>调用方式：</strong>模块名.函数名或类名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()      <span class="comment"># 调用time模块中的time()</span></span><br><span class="line">time.sleep(<span class="number">3</span>)            <span class="comment"># 调用time模块中的sleep()  休息3秒钟</span></span><br><span class="line">end = time.time()       </span><br><span class="line">print(<span class="string">"程序运行用时：&#123;:.2f&#125;秒"</span>.format(end-start))</span><br></pre></td></tr></table></figure><pre><code>程序运行用时：3.00秒</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun1</span><br><span class="line"></span><br><span class="line">fun1.f1()</span><br></pre></td></tr></table></figure><pre><code>导入fun1成功</code></pre><p><strong>2、从模块中导入类或函数——from 模块 import 类名或函数名</strong></p><ul><li><strong>调用方式：</strong>函数名或类名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product   </span><br><span class="line"></span><br><span class="line">ls = list(product(<span class="string">"AB"</span>, <span class="string">"123"</span>))</span><br><span class="line">print(ls)</span><br></pre></td></tr></table></figure><pre><code>[(&#39;A&#39;, &#39;1&#39;), (&#39;A&#39;, &#39;2&#39;), (&#39;A&#39;, &#39;3&#39;), (&#39;B&#39;, &#39;1&#39;), (&#39;B&#39;, &#39;2&#39;), (&#39;B&#39;, &#39;3&#39;)]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> function.fun1 <span class="keyword">import</span> f1         <span class="comment"># 注意这种用法</span></span><br><span class="line"></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><pre><code>导入fun1成功</code></pre><p><strong>一次导入多个</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> function <span class="keyword">import</span> fun1, fun2</span><br><span class="line"></span><br><span class="line">fun1.f1()</span><br><span class="line">fun2.f2()</span><br></pre></td></tr></table></figure><pre><code>导入fun1成功导入fun2成功</code></pre><p><strong>3、导入模块中所有的类和函数</strong>——from 模块 import *</p><ul><li><strong>调用方式：</strong>函数名或类名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">print(randint(<span class="number">1</span>,<span class="number">100</span>))       <span class="comment"># 产生一个[1,100]之间的随机整数</span></span><br><span class="line">print(random())             <span class="comment"># 产生一个[0,1)之间的随机小数</span></span><br></pre></td></tr></table></figure><pre><code>350.2548480458081518</code></pre><h3 id="8-3-3-模块的查找路径"><a href="#8-3-3-模块的查找路径" class="headerlink" title="8.3.3 模块的查找路径"></a>8.3.3 模块的查找路径</h3><p><strong>模块搜索查找顺序：</strong></p><ul><li>1、内存中已经加载的模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fun1</span><br><span class="line"></span><br><span class="line">fun1.f1()</span><br></pre></td></tr></table></figure><pre><code>导入fun1成功</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除硬盘上的fun1 文件</span></span><br><span class="line"><span class="keyword">import</span> fun1</span><br><span class="line"></span><br><span class="line">fun1.f1()</span><br></pre></td></tr></table></figure><pre><code>导入fun1成功</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改硬盘上的fun1 文件</span></span><br><span class="line"><span class="keyword">import</span> fun1</span><br><span class="line"></span><br><span class="line">fun1.f1()</span><br><span class="line"><span class="comment"># 居然没变，说明是优先从内存中读取的</span></span><br></pre></td></tr></table></figure><pre><code>导入fun1成功</code></pre><ul><li>2、内置模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 启动时，解释器会默认加载一些 modules 存放在sys.modules中</span></span><br><span class="line"><span class="comment"># sys.modules 变量包含一个由当前载入(完整且成功导入)到解释器的模块组成的字典, 模块名作为键, 它们的位置作为值</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(len(sys.modules))</span><br><span class="line">print(<span class="string">"math"</span> <span class="keyword">in</span> sys.modules)</span><br><span class="line">print(<span class="string">"numpy"</span> <span class="keyword">in</span> sys.modules)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> list(sys.modules.items())[:<span class="number">20</span>]:</span><br><span class="line">    print(k, <span class="string">":"</span>, v)</span><br></pre></td></tr></table></figure><pre><code>686TrueFalsebuiltins : &lt;module &#39;builtins&#39; (built-in)&gt;sys : &lt;module &#39;sys&#39; (built-in)&gt;_frozen_importlib : &lt;module &#39;importlib._bootstrap&#39; (frozen)&gt;_imp : &lt;module &#39;_imp&#39; (built-in)&gt;_warnings : &lt;module &#39;_warnings&#39; (built-in)&gt;_thread : &lt;module &#39;_thread&#39; (built-in)&gt;_weakref : &lt;module &#39;_weakref&#39; (built-in)&gt;_frozen_importlib_external : &lt;module &#39;importlib._bootstrap_external&#39; (frozen)&gt;_io : &lt;module &#39;io&#39; (built-in)&gt;marshal : &lt;module &#39;marshal&#39; (built-in)&gt;nt : &lt;module &#39;nt&#39; (built-in)&gt;winreg : &lt;module &#39;winreg&#39; (built-in)&gt;zipimport : &lt;module &#39;zipimport&#39; (built-in)&gt;encodings : &lt;module &#39;encodings&#39; from &#39;D:\\python\\Anaconda3\\lib\\encodings\\__init__.py&#39;&gt;codecs : &lt;module &#39;codecs&#39; from &#39;D:\\python\\Anaconda3\\lib\\codecs.py&#39;&gt;_codecs : &lt;module &#39;_codecs&#39; (built-in)&gt;encodings.aliases : &lt;module &#39;encodings.aliases&#39; from &#39;D:\\python\\Anaconda3\\lib\\encodings\\aliases.py&#39;&gt;encodings.utf_8 : &lt;module &#39;encodings.utf_8&#39; from &#39;D:\\python\\Anaconda3\\lib\\encodings\\utf_8.py&#39;&gt;_signal : &lt;module &#39;_signal&#39; (built-in)&gt;__main__ : &lt;module &#39;__main__&#39;&gt;</code></pre><ul><li>3、sys.path路径中包含的模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.path</span><br></pre></td></tr></table></figure><pre><code>[&#39;&#39;, &#39;D:\\python\\Anaconda3\\python36.zip&#39;, &#39;D:\\python\\Anaconda3\\DLLs&#39;, &#39;D:\\python\\Anaconda3\\lib&#39;, &#39;D:\\python\\Anaconda3&#39;, &#39;D:\\python\\Anaconda3\\lib\\site-packages&#39;, &#39;D:\\python\\Anaconda3\\lib\\site-packages\\win32&#39;, &#39;D:\\python\\Anaconda3\\lib\\site-packages\\win32\\lib&#39;, &#39;D:\\python\\Anaconda3\\lib\\site-packages\\Pythonwin&#39;, &#39;D:\\python\\Anaconda3\\lib\\site-packages\\IPython\\extensions&#39;, &#39;C:\\Users\\30369\\.ipython&#39;]</code></pre><ul><li>sys.path的第一个路径是当前执行文件所在的文件夹</li><li>若需将不在该文件夹内的模块导入，需要将模块的路径添加到sys.path</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import fun3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="string">r"D:\object detection\deepshare_paperVIP\03代码及数据资料合集\03代码及数据资料合集\课程代码及数据"</span>)    <span class="comment"># 注意是双斜杠</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fun3</span><br><span class="line"></span><br><span class="line">fun3.f3()</span><br></pre></td></tr></table></figure><pre><code>导入fun3成功</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础7(类——面向对象的编程)</title>
      <link href="/2020/08/12/deepshare_python%E5%9F%BA%E7%A1%807/"/>
      <url>/2020/08/12/deepshare_python%E5%9F%BA%E7%A1%807/</url>
      
        <content type="html"><![CDATA[<h1 id="第七章-类——面向对象的编程"><a href="#第七章-类——面向对象的编程" class="headerlink" title="第七章 类——面向对象的编程"></a>第七章 类——面向对象的编程</h1><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p><strong>Why：面向对象更符合人类对客观世界的抽象和理解</strong></p><ul><li><p><strong>一切皆对象</strong><br>一只小狗，一把椅子，一张信用卡，一条巧克力。。。</p></li><li><p><strong>一切对象，都有自己内在的属性</strong><br>狗狗的品种、椅子的质地、信用卡的额度、巧克力的口味。。。</p></li><li><p><strong>一切行为，皆是对象的行为</strong><br>狗狗蹲下、椅子移动位置、刷信用卡、巧克力融化了。。。</p></li></ul><p><strong>How：类是对象的载体</strong></p><p>不同年龄、肤色、品质的猫，每一只都是一个对象  </p><p>他们有一个共同的特征：都是猫  </p><p>我们可以把一类对象的公共特征抽象出来，创建通用的类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""模拟猫"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="string">"""初始化属性"""</span></span><br><span class="line">        self.name = name</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jump</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""模拟猫跳跃"""</span></span><br><span class="line">        print(self.name + <span class="string">" is jumping"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用类创建实例</span></span><br><span class="line">my_cat = Cat(<span class="string">"Loser"</span>)</span><br><span class="line">your_cat = Cat(<span class="string">"Lucky"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用属性</span></span><br><span class="line">print(my_cat.name)</span><br><span class="line">print(your_cat.name)</span><br></pre></td></tr></table></figure><pre><code>LoserLucky</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用方法</span></span><br><span class="line">my_cat.jump()</span><br><span class="line">your_cat.jump()</span><br></pre></td></tr></table></figure><pre><code>Loser is jumpingLucky is jumping</code></pre><h2 id="7-1-类的定义"><a href="#7-1-类的定义" class="headerlink" title="7.1 类的定义"></a>7.1 类的定义</h2><p><strong>三要素：类名、属性、方法</strong></p><h3 id="7-1-1-类的命名"><a href="#7-1-1-类的命名" class="headerlink" title="7.1.1 类的命名"></a>7.1.1 类的命名</h3><ul><li><p>要有实际意义</p></li><li><p>驼峰命名法——组成的单词首字母大写<br>Dog、   CreditCard、   ElectricCar</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># class 类名：</span></span><br><span class="line"><span class="string">"""类前空两行"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""对该类的简单介绍"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""类后空两行"""</span></span><br></pre></td></tr></table></figure><pre><code>&#39;类后空两行&#39;</code></pre><h3 id="7-1-2-类的属性"><a href="#7-1-2-类的属性" class="headerlink" title="7.1.2 类的属性"></a>7.1.2 类的属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># def __init__(self,要传递的参数)  初始化类的属性</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""模拟汽车"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, brand, model, year)</span>:</span></span><br><span class="line">        <span class="string">"""初始化汽车属性"""</span>               <span class="comment"># 相当于类内部的变量</span></span><br><span class="line">        self.brand = brand                 <span class="comment"># 汽车的品牌</span></span><br><span class="line">        self.model = model                 <span class="comment"># 汽车的型号</span></span><br><span class="line">        self.year = year                   <span class="comment"># 汽车出厂年份</span></span><br><span class="line">        self.mileage = <span class="number">0</span>                   <span class="comment"># 新车总里程初始化为0</span></span><br></pre></td></tr></table></figure><h3 id="7-1-3-类的方法"><a href="#7-1-3-类的方法" class="headerlink" title="7.1.3 类的方法"></a>7.1.3 类的方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 相对于类内部定义的函数</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""模拟汽车"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, brand, model, year)</span>:</span></span><br><span class="line">        <span class="string">"""初始化汽车属性"""</span>               <span class="comment"># 相当于类内部的变量</span></span><br><span class="line">        self.brand = brand                 <span class="comment"># 汽车的品牌</span></span><br><span class="line">        self.model = model                 <span class="comment"># 汽车的型号</span></span><br><span class="line">        self.year = year                   <span class="comment"># 汽车出厂年份</span></span><br><span class="line">        self.mileage = <span class="number">0</span>                   <span class="comment"># 新车总里程初始化为0  </span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_main_information</span><span class="params">(self)</span>:</span>        <span class="comment"># self不能省</span></span><br><span class="line">        <span class="string">"""获取汽车主要信息"""</span></span><br><span class="line">        print(<span class="string">"品牌：&#123;&#125;   型号：&#123;&#125;   出厂年份：&#123;&#125;"</span>.format(self.brand, self.model, self.year))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_mileage</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""获取总里程"""</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"行车总里程：&#123;&#125;公里"</span>.format(self.mileage)</span><br></pre></td></tr></table></figure><h2 id="7-2-创建实例"><a href="#7-2-创建实例" class="headerlink" title="7.2 创建实例"></a>7.2 创建实例</h2><h3 id="7-2-1-实例的创建"><a href="#7-2-1-实例的创建" class="headerlink" title="7.2.1 实例的创建"></a>7.2.1 实例的创建</h3><p>将实例赋值给对象，实例化过程中，传入相应的参数<br>v = 类名（必要的初始化参数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_new_car = Car(<span class="string">"Audi"</span>, <span class="string">"A6"</span>, <span class="number">2018</span>)</span><br></pre></td></tr></table></figure><h3 id="7-2-2-访问属性"><a href="#7-2-2-访问属性" class="headerlink" title="7.2.2 访问属性"></a>7.2.2 访问属性</h3><p>实例名.属性名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(my_new_car.brand)</span><br><span class="line">print(my_new_car.model)</span><br><span class="line">print(my_new_car.year)</span><br></pre></td></tr></table></figure><pre><code>AudiA62018</code></pre><h3 id="7-2-3-调用方法"><a href="#7-2-3-调用方法" class="headerlink" title="7.2.3 调用方法"></a>7.2.3 调用方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""模拟汽车"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, brand, model, year)</span>:</span></span><br><span class="line">        <span class="string">"""初始化汽车属性"""</span>               <span class="comment"># 相当于类内部的变量</span></span><br><span class="line">        self.brand = brand                 <span class="comment"># 汽车的品牌</span></span><br><span class="line">        self.model = model                 <span class="comment"># 汽车的型号</span></span><br><span class="line">        self.year = year                   <span class="comment"># 汽车出厂年份</span></span><br><span class="line">        self.mileage = <span class="number">0</span>                   <span class="comment"># 新车总里程初始化为0  </span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_main_information</span><span class="params">(self)</span>:</span>        <span class="comment"># self不能省</span></span><br><span class="line">        <span class="string">"""获取汽车主要信息"""</span></span><br><span class="line">        print(<span class="string">"品牌：&#123;&#125;   型号：&#123;&#125;   出厂年份：&#123;&#125;"</span>.format(self.brand, self.model, self.year))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_mileage</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""获取总里程数"""</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"行车总里程：&#123;&#125;公里"</span>.format(self.mileage)</span><br></pre></td></tr></table></figure><p>实例名.方法名(必要的参数)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_new_car = Car(<span class="string">"Audi"</span>, <span class="string">"A6"</span>, <span class="number">2018</span>)</span><br><span class="line">my_new_car.get_main_information()</span><br></pre></td></tr></table></figure><pre><code>品牌：Audi   型号：A6   出厂年份：2018</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mileage = my_new_car.get_mileage()</span><br><span class="line">print(mileage)</span><br></pre></td></tr></table></figure><pre><code>行车总里程：0公里</code></pre><h3 id="7-2-4-修改属性"><a href="#7-2-4-修改属性" class="headerlink" title="7.2.4 修改属性"></a>7.2.4 修改属性</h3><p><strong>1、直接修改</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_old_car = Car(<span class="string">"BYD"</span>, <span class="string">"宋"</span>, <span class="number">2016</span>)</span><br></pre></td></tr></table></figure><p>先访问，后修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(my_old_car.mileage)</span><br><span class="line">my_old_car.mileage = <span class="number">12000</span></span><br><span class="line">print(my_old_car.mileage)</span><br></pre></td></tr></table></figure><pre><code>012000</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(my_old_car.get_mileage())</span><br></pre></td></tr></table></figure><pre><code>行车总里程：12000公里</code></pre><p><strong>2、通过方法修改属性</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""模拟汽车"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, brand, model, year)</span>:</span></span><br><span class="line">        <span class="string">"""初始化汽车属性"""</span>               <span class="comment"># 相当于类内部的变量</span></span><br><span class="line">        self.brand = brand                 <span class="comment"># 汽车的品牌</span></span><br><span class="line">        self.model = model                 <span class="comment"># 汽车的型号</span></span><br><span class="line">        self.year = year                   <span class="comment"># 汽车出厂年份</span></span><br><span class="line">        self.mileage = <span class="number">0</span>                   <span class="comment"># 新车总里程初始化为0  </span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_main_information</span><span class="params">(self)</span>:</span>        <span class="comment"># self不能省</span></span><br><span class="line">        <span class="string">"""获取汽车主要信息"""</span></span><br><span class="line">        print(<span class="string">"品牌：&#123;&#125;   型号：&#123;&#125;   出厂年份：&#123;&#125;"</span>.format(self.brand, self.model, self.year))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_mileage</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""获取总里程数"""</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"行车总里程：&#123;&#125;公里"</span>.format(self.mileage)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_mileage</span><span class="params">(self, distance)</span>:</span></span><br><span class="line">        <span class="string">"""设置总里程数"""</span></span><br><span class="line">        self.mileage = distance</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_old_car = Car(<span class="string">"BYD"</span>, <span class="string">"宋"</span>, <span class="number">2016</span>)</span><br><span class="line">print(my_old_car.get_mileage())</span><br><span class="line">my_old_car.set_mileage(<span class="number">8000</span>)</span><br><span class="line">print(my_old_car.get_mileage())</span><br></pre></td></tr></table></figure><pre><code>行车总里程：0公里行车总里程：8000公里</code></pre><p><strong>3、继续拓展</strong></p><ul><li>禁止设置负里程  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""模拟汽车"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, brand, model, year)</span>:</span></span><br><span class="line">        <span class="string">"""初始化汽车属性"""</span>               <span class="comment"># 相当于类内部的变量</span></span><br><span class="line">        self.brand = brand                 <span class="comment"># 汽车的品牌</span></span><br><span class="line">        self.model = model                 <span class="comment"># 汽车的型号</span></span><br><span class="line">        self.year = year                   <span class="comment"># 汽车出厂年份</span></span><br><span class="line">        self.mileage = <span class="number">0</span>                   <span class="comment"># 新车总里程初始化为0  </span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_main_information</span><span class="params">(self)</span>:</span>        <span class="comment"># self不能省</span></span><br><span class="line">        <span class="string">"""获取汽车主要信息"""</span></span><br><span class="line">        print(<span class="string">"品牌：&#123;&#125;   型号：&#123;&#125;   出厂年份：&#123;&#125;"</span>.format(self.brand, self.model, self.year))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_mileage</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""获取总里程数"""</span></span><br><span class="line">        print(<span class="string">"行车总里程：&#123;&#125;公里"</span>.format(self.mileage)) </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_mileage</span><span class="params">(self, distance)</span>:</span></span><br><span class="line">        <span class="string">"""设置总里程数"""</span></span><br><span class="line">        <span class="keyword">if</span> distance &gt;= <span class="number">0</span>:</span><br><span class="line">            self.mileage = distance</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"里程数不能为负！"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_mileage</span><span class="params">(self, distance)</span>:</span></span><br><span class="line">        <span class="string">"""总里程数累计"""</span></span><br><span class="line">        <span class="keyword">if</span> distance &gt;= <span class="number">0</span>:</span><br><span class="line">            self.mileage += distance</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"新增里程数不能为负！"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_old_car = Car(<span class="string">"BYD"</span>, <span class="string">"宋"</span>, <span class="number">2016</span>)</span><br><span class="line">my_old_car.get_mileage()</span><br><span class="line">my_old_car.set_mileage(<span class="number">-8000</span>)</span><br><span class="line">my_old_car.get_mileage()</span><br></pre></td></tr></table></figure><pre><code>行车总里程：0公里里程数不能为负！行车总里程：0公里</code></pre><ul><li>将每次的里程数累加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_old_car.get_mileage()</span><br><span class="line">my_old_car.set_mileage(<span class="number">8000</span>)</span><br><span class="line">my_old_car.get_mileage()</span><br><span class="line">my_old_car.increment_mileage(<span class="number">500</span>)</span><br><span class="line">my_old_car.get_mileage()</span><br></pre></td></tr></table></figure><pre><code>行车总里程：0公里行车总里程：8000公里行车总里程：8500公里</code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_new_car = Car(<span class="string">"Audi"</span>, <span class="string">"A6"</span>, <span class="number">2018</span>)</span><br><span class="line">my_cars = [my_new_car, my_old_car]</span><br></pre></td></tr></table></figure><ul><li>包含的信息量可以是极大的，可以创建无穷多的实例</li><li>高度的拟人（物）化，符合人类对客观世界的抽象和理解</li></ul><h2 id="7-3-类的继承"><a href="#7-3-类的继承" class="headerlink" title="7.3 类的继承"></a>7.3 类的继承</h2><h3 id="引子-1"><a href="#引子-1" class="headerlink" title="引子"></a>引子</h3><p><strong>看一下人在生物界的分支链</strong></p><p>生物——动物界——脊索动物门——哺乳动物纲——灵长目——人科——人属——智人种</p><p><strong>公共特征逐渐增加的过程</strong></p><p><strong>【问题】</strong>  </p><p>假设二元系统：  人属 = {A人种， B人种， C人种。。。。}<br>为每一个人种构造一个类</p><p><strong>方案一：</strong><br>各自独立，分别构造各自人种的类</p><p><strong>方案二：</strong><br>1、将各人种<strong>公共特征提取出来</strong>，建立人属的类；<br>2、各人种<strong>继承上一级（人属）的公共特征，然后添加自身特殊特征</strong>，构建各自人种的类。</p><p>通常，我们选择方案二，因为它避免了过多的重复劳动</p><p><strong>所谓继承，就是低层抽象继承高层抽象的过程</strong></p><h3 id="7-3-1-简单的继承"><a href="#7-3-1-简单的继承" class="headerlink" title="7.3.1 简单的继承"></a>7.3.1 简单的继承</h3><p><strong>父类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""模拟汽车"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, brand, model, year)</span>:</span></span><br><span class="line">        <span class="string">"""初始化汽车属性"""</span>               <span class="comment"># 相当于类内部的变量</span></span><br><span class="line">        self.brand = brand                 <span class="comment"># 汽车的品牌</span></span><br><span class="line">        self.model = model                 <span class="comment"># 汽车的型号</span></span><br><span class="line">        self.year = year                   <span class="comment"># 汽车出厂年份</span></span><br><span class="line">        self.mileage = <span class="number">0</span>                   <span class="comment"># 新车总里程初始化为0</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_main_information</span><span class="params">(self)</span>:</span>        <span class="comment"># self不能省</span></span><br><span class="line">        <span class="string">"""获取汽车主要信息"""</span></span><br><span class="line">        print(<span class="string">"品牌：&#123;&#125;   型号：&#123;&#125;   出厂年份：&#123;&#125;"</span>.format(self.brand, self.model, self.year))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_mileage</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""获取总里程数"""</span></span><br><span class="line">        print(<span class="string">"行车总里程：&#123;&#125;公里"</span>.format(self.mileage)) </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_mileage</span><span class="params">(self, distance)</span>:</span></span><br><span class="line">        <span class="string">"""设置总里程数"""</span></span><br><span class="line">        <span class="keyword">if</span> distance &gt;= <span class="number">0</span>:</span><br><span class="line">            self.mileage = distance</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"里程数不能为负！"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_mileage</span><span class="params">(self, distance)</span>:</span></span><br><span class="line">        <span class="string">"""总里程数累计"""</span></span><br><span class="line">        <span class="keyword">if</span> distance &gt;= <span class="number">0</span>:</span><br><span class="line">            self.mileage += distance</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"新增里程数不能为负！"</span>)</span><br></pre></td></tr></table></figure><p><strong>子类</strong>  </p><p>class 子类名（父类名）：</p><ul><li>新建一个电动汽车的类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="string">"""模拟电动汽车"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, brand, model, year)</span>:</span></span><br><span class="line">        <span class="string">"""初始化电动汽车属性"""</span></span><br><span class="line">        super().__init__(brand, model, year)  <span class="comment"># 声明继承父类的属性</span></span><br></pre></td></tr></table></figure><ul><li>自动继承父类的所有方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_electric_car = ElectricCar(<span class="string">"NextWeek"</span>, <span class="string">"FF91"</span>, <span class="number">2046</span>)</span><br><span class="line">my_electric_car.get_main_information()</span><br></pre></td></tr></table></figure><pre><code>品牌：NextWeek   型号：FF91   出厂年份：2046</code></pre><h3 id="7-3-2-给子类添加属性和方法"><a href="#7-3-2-给子类添加属性和方法" class="headerlink" title="7.3.2 给子类添加属性和方法"></a>7.3.2 给子类添加属性和方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="string">"""模拟电动汽车"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, brand, model, year, battery_size)</span>:</span></span><br><span class="line">        <span class="string">"""初始化电动汽车属性"""</span></span><br><span class="line">        super().__init__(brand, model, year)    <span class="comment"># 声明继承父类的属性</span></span><br><span class="line">        self.battery_size = battery_size        <span class="comment"># 电池容量</span></span><br><span class="line">        self.electric_quantity = battery_size   <span class="comment"># 电池剩余电量</span></span><br><span class="line">        self.electric2distance_ratio = <span class="number">5</span>        <span class="comment"># 电量距离换算系数 5公里/kW.h</span></span><br><span class="line">        self.remainder_range = self.electric_quantity*self.electric2distance_ratio <span class="comment"># 剩余可行驶里程</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_electric_quantit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""查看当前电池电量"""</span></span><br><span class="line">        print(<span class="string">"当前电池剩余电量：&#123;&#125; kW.h"</span>.format(self.electric_quantity))</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_electric_quantity</span><span class="params">(self, electric_quantity)</span>:</span></span><br><span class="line">        <span class="string">"""设置电池剩余电量，重新计算电量可支撑行驶里程"""</span></span><br><span class="line">        <span class="keyword">if</span> electric_quantity &gt;= <span class="number">0</span> <span class="keyword">and</span> electric_quantity &lt;= self.battery_size:</span><br><span class="line">            self.electric_quantity = electric_quantity</span><br><span class="line">            self.remainder_range = self.electric_quantity*self.electric2distance_ratio</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"电量未设置在合理范围！"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_remainder_range</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""查看剩余可行驶里程"""</span></span><br><span class="line">        print(<span class="string">"当前电量还可以继续驾驶 &#123;&#125; 公里"</span>.format(self.remainder_range))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_electric_car = ElectricCar(<span class="string">"NextWeek"</span>, <span class="string">"FF91"</span>, <span class="number">2046</span>, <span class="number">70</span>)</span><br><span class="line">my_electric_car.get_electric_quantit()            <span class="comment"># 获取当前电池电量</span></span><br><span class="line">my_electric_car.get_remainder_range()             <span class="comment"># 获取当前剩余可行驶里程</span></span><br></pre></td></tr></table></figure><pre><code>当前电池剩余电量：70 kW.h当前电量还可以继续驾驶 350 公里</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_electric_car.set_electric_quantity(<span class="number">50</span>)         <span class="comment"># 重设电池电量</span></span><br><span class="line">my_electric_car.get_electric_quantit()            <span class="comment"># 获取当前电池电量</span></span><br><span class="line">my_electric_car.get_remainder_range()             <span class="comment"># 获取当前剩余可行驶里程</span></span><br></pre></td></tr></table></figure><pre><code>当前电池剩余电量：50 kW.h当前电量还可以继续驾驶 250 公里</code></pre><h3 id="7-3-3-重写父类的方法——多态"><a href="#7-3-3-重写父类的方法——多态" class="headerlink" title="7.3.3 重写父类的方法——多态"></a>7.3.3 重写父类的方法——多态</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="string">"""模拟电动汽车"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, brand, model, year, battery_size)</span>:</span></span><br><span class="line">        <span class="string">"""初始化电动汽车属性"""</span></span><br><span class="line">        super().__init__(brand, model, year)    <span class="comment"># 声明继承父类的属性</span></span><br><span class="line">        self.battery_size = battery_size        <span class="comment"># 电池容量</span></span><br><span class="line">        self.electric_quantity = battery_size   <span class="comment"># 电池剩余电量</span></span><br><span class="line">        self.electric2distance_ratio = <span class="number">5</span>        <span class="comment"># 电量距离换算系数 5公里/kW.h</span></span><br><span class="line">        self.remainder_range = self.electric_quantity*self.electric2distance_ratio <span class="comment"># 剩余可行驶里程</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_main_information</span><span class="params">(self)</span>:</span>        <span class="comment"># 重写父类方法</span></span><br><span class="line">        <span class="string">"""获取汽车主要信息"""</span></span><br><span class="line">        print(<span class="string">"品牌：&#123;&#125;   型号：&#123;&#125;   出厂年份：&#123;&#125;   续航里程：&#123;&#125; 公里"</span></span><br><span class="line">              .format(self.brand, self.model, self.year, self.battery_size*self.electric2distance_ratio))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_electric_quantit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""查看当前电池电量，重新计算电量可支撑行驶里程"""</span></span><br><span class="line">        print(<span class="string">"当前电池剩余电量：&#123;&#125; kW.h"</span>.format(self.electric_quantity))</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_electric_quantity</span><span class="params">(self, electric_quantity)</span>:</span></span><br><span class="line">        <span class="string">"""设置电池剩余电量"""</span></span><br><span class="line">        <span class="keyword">if</span> electric_quantity &gt;= <span class="number">0</span> <span class="keyword">and</span> electric_quantity &lt;= self.battery_size:</span><br><span class="line">            self.electric_quantity = electric_quantity</span><br><span class="line">            self.remainder_range = self.electric_quantity*self.electric2distance_ratio</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"电量未设置在合理范围！"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_remainder_range</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""查看剩余可行驶里程"""</span></span><br><span class="line">        print(<span class="string">"当前电量还可以继续驾驶 &#123;&#125; 公里"</span>.format(self.remainder_range))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_electric_car = ElectricCar(<span class="string">"NextWeek"</span>, <span class="string">"FF91"</span>, <span class="number">2046</span>, <span class="number">70</span>)</span><br><span class="line">my_electric_car.get_main_information()</span><br></pre></td></tr></table></figure><pre><code>品牌：NextWeek   型号：FF91   出厂年份：2046   续航里程：350 公里</code></pre><h3 id="7-3-4-用在类中的实例"><a href="#7-3-4-用在类中的实例" class="headerlink" title="7.3.4 用在类中的实例"></a>7.3.4 用在类中的实例</h3><p>把电池抽象成一个对象<br>逻辑更加清晰</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Battery</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""模拟电动汽车的电池"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, battery_size = <span class="number">70</span>)</span>:</span></span><br><span class="line">        self.battery_size = battery_size        <span class="comment"># 电池容量</span></span><br><span class="line">        self.electric_quantity = battery_size   <span class="comment"># 电池剩余电量</span></span><br><span class="line">        self.electric2distance_ratio = <span class="number">5</span>        <span class="comment"># 电量距离换算系数 5公里/kW.h</span></span><br><span class="line">        self.remainder_range = self.electric_quantity*self.electric2distance_ratio <span class="comment"># 剩余可行驶里程</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_electric_quantit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""查看当前电池电量"""</span></span><br><span class="line">        print(<span class="string">"当前电池剩余电量：&#123;&#125; kW.h"</span>.format(self.electric_quantity))</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_electric_quantity</span><span class="params">(self, electric_quantity)</span>:</span></span><br><span class="line">        <span class="string">"""设置电池剩余电量，计重新算电量可支撑行驶里程"""</span></span><br><span class="line">        <span class="keyword">if</span> electric_quantity &gt;= <span class="number">0</span> <span class="keyword">and</span> electric_quantity &lt;= self.battery_size:</span><br><span class="line">            self.electric_quantity = electric_quantity</span><br><span class="line">            self.remainder_range = self.electric_quantity*self.electric2distance_ratio</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"电量未设置在合理范围！"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_remainder_range</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""查看剩余可行驶里程"""</span></span><br><span class="line">        print(<span class="string">"当前电量还可以继续驾驶 &#123;&#125; 公里"</span>.format(self.remainder_range))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="string">"""模拟电动汽车"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, brand, model, year, battery_size)</span>:</span></span><br><span class="line">        <span class="string">"""初始化电动汽车属性"""</span></span><br><span class="line">        super().__init__(brand, model, year)    <span class="comment"># 声明继承父类的属性</span></span><br><span class="line">        self.battery = Battery(battery_size)    <span class="comment"># 电池</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_main_information</span><span class="params">(self)</span>:</span>        <span class="comment"># 重写父类方法</span></span><br><span class="line">        <span class="string">"""获取汽车主要信息"""</span></span><br><span class="line">        print(<span class="string">"品牌：&#123;&#125;   型号：&#123;&#125;   出厂年份：&#123;&#125;   续航里程：&#123;&#125; 公里"</span></span><br><span class="line">              .format(self.brand, self.model, self.year, </span><br><span class="line">              self.battery.battery_size*self.battery.electric2distance_ratio))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_electric_car = ElectricCar(<span class="string">"NextWeek"</span>, <span class="string">"FF91"</span>, <span class="number">2046</span>, <span class="number">70</span>)</span><br><span class="line">my_electric_car.get_main_information()                  <span class="comment"># 获取车辆主要信息</span></span><br></pre></td></tr></table></figure><pre><code>品牌：NextWeek   型号：FF91   出厂年份：2046   续航里程：350 公里</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_electric_car.battery.get_electric_quantit()          <span class="comment"># 获取当前电池电量</span></span><br></pre></td></tr></table></figure><pre><code>当前电池剩余电量：70 kW.h</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_electric_car.battery.set_electric_quantity(<span class="number">50</span>)       <span class="comment"># 重设电池电量</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_electric_car.battery.get_electric_quantit()          <span class="comment"># 获取当前电池电量</span></span><br></pre></td></tr></table></figure><pre><code>当前电池剩余电量：50 kW.h</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_electric_car.battery.get_remainder_range()           <span class="comment"># 获取当前剩余可行驶里程</span></span><br></pre></td></tr></table></figure><pre><code>当前电量还可以继续驾驶 250 公里</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础6(函数)</title>
      <link href="/2020/08/12/deepshare_python%E5%9F%BA%E7%A1%806/"/>
      <url>/2020/08/12/deepshare_python%E5%9F%BA%E7%A1%806/</url>
      
        <content type="html"><![CDATA[<h1 id="第六章-函数"><a href="#第六章-函数" class="headerlink" title="第六章 函数"></a>第六章 函数</h1><h2 id="4-1-函数的定义及调用"><a href="#4-1-函数的定义及调用" class="headerlink" title="4.1 函数的定义及调用"></a>4.1 函数的定义及调用</h2><h3 id="4-1-1-为什么要用函数"><a href="#4-1-1-为什么要用函数" class="headerlink" title="4.1.1 为什么要用函数"></a>4.1.1 为什么要用函数</h3><p>1、提高代码复用性——抽象出来，封装为函数   </p><p>2、将复杂的大问题分解成一系列小问题，分而治之——模块化设计的思想  </p><p>3、利于代码的维护和管理</p><p><strong>顺序式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5的阶乘</span></span><br><span class="line">n = <span class="number">5</span></span><br><span class="line">res = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    res *= i</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 20的阶乘</span></span><br><span class="line">n = <span class="number">20</span></span><br><span class="line">res = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    res *= i</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><pre><code>1202432902008176640000</code></pre><p><strong>抽象成函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factoria</span><span class="params">(n)</span>:</span></span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        res *= i</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(factoria(<span class="number">5</span>))</span><br><span class="line">print(factoria(<span class="number">20</span>))</span><br></pre></td></tr></table></figure><pre><code>1202432902008176640000</code></pre><h3 id="4-1-2-函数的定义及调用"><a href="#4-1-2-函数的定义及调用" class="headerlink" title="4.1.2 函数的定义及调用"></a>4.1.2 函数的定义及调用</h3><p><strong>白箱子：输入——处理——输出</strong>   </p><p><strong>三要素：参数、函数体、返回值</strong></p><p><strong>1、定义</strong> </p><p>def&nbsp; 函数名（参数）：</p><p>&emsp;  函数体  </p><p>&emsp;  return 返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求正方形的面积</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_of_square</span><span class="params">(length_of_side)</span>:</span></span><br><span class="line">    square_area = pow(length_of_side, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> square_area</span><br></pre></td></tr></table></figure><p><strong>2、调用</strong>  </p><p>函数名（参数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">area = area_of_square(<span class="number">5</span>)</span><br><span class="line">area</span><br></pre></td></tr></table></figure><pre><code>25</code></pre><h3 id="4-1-3-参数传递"><a href="#4-1-3-参数传递" class="headerlink" title="4.1.3 参数传递"></a>4.1.3 参数传递</h3><p><strong>0、形参与实参</strong></p><ul><li><p>形参（形式参数）：函数定义时的参数，实际上就是变量名</p></li><li><p>实参（实际参数）：函数调用时的参数，实际上就是变量的值</p></li></ul><p><strong>1、位置参数</strong></p><ul><li><p>严格按照位置顺序，用实参对形参进行赋值(关联）  </p></li><li><p>一般用在参数比较少的时候</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(x, y, z)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">function(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)    <span class="comment"># x = 1; y = 2; z = 3</span></span><br></pre></td></tr></table></figure><pre><code>1 2 3</code></pre><ul><li>实参与形参个数必须一一对应，一个不能多，一个不能少</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&lt;ipython-input-6-2a7da6ff9675&gt; in &lt;module&gt;()----&gt; 1 function(1, 2)TypeError: function() missing 1 required positional argument: &#39;z&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&lt;ipython-input-7-748d3d0335e6&gt; in &lt;module&gt;()----&gt; 1 function(1, 2, 3, 4)TypeError: function() takes 3 positional arguments but 4 were given</code></pre><p><strong>2、关键字参数</strong></p><ul><li><p>打破位置限制，直呼其名的进行值的传递（形参=实参）</p></li><li><p>必须遵守实参与形参数量上一一对应</p></li><li><p>多用在参数比较多的场合</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(x, y, z)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">function(y=<span class="number">1</span>, z=<span class="number">2</span>, x=<span class="number">3</span>)    <span class="comment"># x = 1; y = 2; z = 3</span></span><br></pre></td></tr></table></figure><pre><code>3 1 2</code></pre><ul><li><p>位置参数可以与关键字参数混合使用</p></li><li><p>但是，位置参数必须放在关键字参数前面</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function(<span class="number">1</span>, z=<span class="number">2</span>, y=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>1 3 2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function(<span class="number">1</span>, <span class="number">2</span>, z=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>1 2 3</code></pre><ul><li>不能为同一个形参重复传值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    print(x, y, z)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function(<span class="number">1</span>, z=<span class="number">2</span>, x=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&lt;ipython-input-11-f385272db011&gt; in &lt;module&gt;()      3       4 ----&gt; 5 function(1, z=2, x=3)TypeError: function() got multiple values for argument &#39;x&#39;</code></pre><p><strong>3、默认参数</strong></p><ul><li><p>在定义阶段就给形参赋值——该形参的常用值</p></li><li><p><strong>默认参数必须放在非默认参数后面</strong></p></li><li><p><strong>调用函数时，可以不对该形参传值</strong></p></li><li><p>机器学习库中类的方法里非常常见</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(name, age, sex=<span class="string">"male"</span>)</span>:</span></span><br><span class="line">    print(name, age, sex)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">register(<span class="string">"大杰仔"</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><pre><code>大杰仔 18 male</code></pre><ul><li>也可以按正常的形参进行传值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">register(<span class="string">"林志玲"</span>, <span class="number">38</span>, <span class="string">"female"</span>)</span><br></pre></td></tr></table></figure><pre><code>林志玲 38 female</code></pre><ul><li>默认参数应该设置为不可变类型（数字、字符串、元组）</li></ul><ul><li><code>id([object])</code>返回对象的内存地址</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(ls=[])</span>:</span></span><br><span class="line">    print(id(ls))</span><br><span class="line">    ls.append(<span class="number">1</span>)</span><br><span class="line">    print(id(ls))</span><br><span class="line">    print(ls)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function()</span><br></pre></td></tr></table></figure><pre><code>26990809165522699080916552[1]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function()</span><br></pre></td></tr></table></figure><pre><code>26990809165522699080916552[1, 1]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function()</span><br></pre></td></tr></table></figure><pre><code>26990809165522699080916552[1, 1, 1]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(ls=<span class="string">"Python"</span>)</span>:</span></span><br><span class="line">    print(id(ls))</span><br><span class="line">    ls += <span class="string">"3.7"</span></span><br><span class="line">    print(id(ls))</span><br><span class="line">    print(ls)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">function()</span><br></pre></td></tr></table></figure><pre><code>26990124778722699081641904Python3.7</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function()</span><br></pre></td></tr></table></figure><pre><code>26990124778722699081666672Python3.7</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function()</span><br></pre></td></tr></table></figure><pre><code>26990124778722699081667120Python3.7</code></pre><ul><li><strong>让参数变成可选的</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(first_name, last_name, middle_name=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> middle_name:</span><br><span class="line">        <span class="keyword">return</span> first_name+middle_name+last_name</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> first_name+last_name</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">print(name(<span class="string">"大"</span>,<span class="string">"仔"</span>))</span><br><span class="line">print(name(<span class="string">"大"</span>, <span class="string">"仔"</span>, <span class="string">"杰"</span>))</span><br></pre></td></tr></table></figure><pre><code>大仔大杰仔</code></pre><p><strong>4、可变长参数&emsp;*args</strong></p><ul><li><p>不知道会传过来多少参数  *args  </p></li><li><p>该形参必须放在参数列表的最后</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z, *args)</span>:</span></span><br><span class="line">    print(x, y ,z)</span><br><span class="line">    print(args)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)    <span class="comment"># 多余的参数，打包传递给args</span></span><br></pre></td></tr></table></figure><pre><code>1 2 3(4, 5, 6)</code></pre><ul><li>实参打散</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z, *args)</span>:</span></span><br><span class="line">    print(x, y ,z)</span><br><span class="line">    print(args)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br></pre></td></tr></table></figure><pre><code>1 2 3([4, 5, 6],)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, *[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])   <span class="comment"># 打散的是列表、字符串、元组或集合</span></span><br></pre></td></tr></table></figure><pre><code>1 2 3(4, 5, 6)</code></pre><p><strong>5、可变长参数&emsp;**</strong>kwargs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z, **kwargs)</span>:</span></span><br><span class="line">    print(x, y ,z)</span><br><span class="line">    print(kwargs)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, a=<span class="number">4</span>, b=<span class="number">5</span>, c=<span class="number">6</span>)    <span class="comment">#  多余的参数，以字典的形式打包传递给kwargs</span></span><br></pre></td></tr></table></figure><pre><code>1 2 3{&#39;a&#39;: 4, &#39;b&#39;: 5, &#39;c&#39;: 6}</code></pre><ul><li>字典实参打散</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y, z, **kwargs)</span>:</span></span><br><span class="line">    print(x, y ,z)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, **&#123;<span class="string">"a"</span>: <span class="number">4</span>, <span class="string">"b"</span>: <span class="number">5</span>, <span class="string">"c"</span>:<span class="number">6</span>&#125;)</span><br></pre></td></tr></table></figure><pre><code>1 2 3{&#39;a&#39;: 4, &#39;b&#39;: 5, &#39;c&#39;: 6}</code></pre><ul><li><strong>可变长参数的组合使用</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, a=<span class="number">4</span>, b=<span class="number">5</span>, c=<span class="number">6</span>)</span><br></pre></td></tr></table></figure><pre><code>(1, 2, 3){&#39;a&#39;: 4, &#39;b&#39;: 5, &#39;c&#39;: 6}</code></pre><h3 id="4-1-4-函数体与变量作用域"><a href="#4-1-4-函数体与变量作用域" class="headerlink" title="4.1.4 函数体与变量作用域"></a>4.1.4 函数体与变量作用域</h3><ul><li><p>函数体就是一段只在函数被调用时，才会执行的代码，代码构成与其他代码并无不同  </p></li><li><p><strong>局部变量</strong>——仅在函数体内定义和发挥作用</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multipy</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    z = x*y</span><br><span class="line">    <span class="keyword">return</span> z   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">multipy(<span class="number">2</span>, <span class="number">9</span>)</span><br><span class="line">print(z)            <span class="comment"># 函数执行完毕，局部变量z已经被释放掉了</span></span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)&lt;ipython-input-27-9a7fd4c4c0a9&gt; in &lt;module&gt;()      5       6 multipy(2, 9)----&gt; 7 print(z)            # 函数执行完毕，局部变量z已经被释放掉了NameError: name &#39;z&#39; is not defined</code></pre><ul><li><p><strong>全局变量</strong>——外部定义的都是全局变量</p></li><li><p>全局变量可以在函数体内直接被使用</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">3</span></span><br><span class="line">ls = [<span class="number">0</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multipy</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    z = n*x*y</span><br><span class="line">    ls.append(z)</span><br><span class="line">    <span class="keyword">return</span> z   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(multipy(<span class="number">2</span>, <span class="number">9</span>))</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><pre><code>54[0, 54]</code></pre><ul><li>通过global 在函数体内定义全局变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multipy</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> z</span><br><span class="line">    z = x*y</span><br><span class="line">    <span class="keyword">return</span> z </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(multipy(<span class="number">2</span>, <span class="number">9</span>))</span><br><span class="line">print(z)</span><br></pre></td></tr></table></figure><pre><code>1818</code></pre><h3 id="4-1-5-返回值"><a href="#4-1-5-返回值" class="headerlink" title="4.1.5 返回值"></a>4.1.5 返回值</h3><p><strong>1、单个返回值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = foo(<span class="number">10</span>)</span><br><span class="line">res</span><br></pre></td></tr></table></figure><pre><code>100</code></pre><p><strong>2、多个返回值</strong>——以元组的形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, x, x**<span class="number">2</span>, x**<span class="number">3</span>    <span class="comment"># 逗号分开，打包返回</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(foo(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>(1, 3, 9, 27)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a, b , c, d = foo(<span class="number">3</span>)       <span class="comment"># 解包赋值</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure><pre><code>13927</code></pre><p><strong>3、可以有多个return 语句，一旦其中一个执行，代表了函数运行的结束</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_holiday</span><span class="params">(day)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> day <span class="keyword">in</span> [<span class="string">"Sunday"</span>, <span class="string">"Saturday"</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Is holiday"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Not holiday"</span></span><br><span class="line">    print(<span class="string">"啦啦啦德玛西亚，啦啦啦啦"</span>)       <span class="comment"># 你丫根本没机会运行。。。</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">print(is_holiday(<span class="string">"Sunday"</span>))</span><br><span class="line">print(is_holiday(<span class="string">"Monday"</span>))</span><br></pre></td></tr></table></figure><pre><code>Is holidayNot holiday</code></pre><p><strong>4、没有return语句，返回值为None</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"我是孙悟空"</span>)</span><br><span class="line"></span><br><span class="line">res = foo()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><pre><code>我是孙悟空None</code></pre><h3 id="4-1-6-几点建议"><a href="#4-1-6-几点建议" class="headerlink" title="4.1.6 几点建议"></a>4.1.6 几点建议</h3><p><strong>1、函数及其参数的命名参照变量的命名</strong></p><ul><li><p>字母小写及下划线组合</p></li><li><p>有实际意义</p></li></ul><p><strong>2、应包含简要阐述函数功能的注释，注释紧跟函数定义后面</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 这个函数的作用是为了给大家瞅一瞅，你瞅啥，瞅你咋地。。。。</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>3、函数定义前后各空两行</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">                 <span class="comment"># 空出两行，以示清白</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(x=<span class="number">3</span>)</span>:</span>    <span class="comment"># 默认参数赋值等号两侧不需加空格</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p><strong>4、默认参数赋值等号两侧不需加空格</strong></p><h2 id="4-2-函数式编程实例"><a href="#4-2-函数式编程实例" class="headerlink" title="4.2 函数式编程实例"></a>4.2 函数式编程实例</h2><p><strong>模块化编程思想</strong></p><ul><li>自顶向下，分而治之</li></ul><p><strong>【问题描述】</strong>  </p><ul><li><p>小丹和小伟羽毛球打的都不错，水平也在伯仲之间，小丹略胜一筹，基本上，打100个球，小丹能赢55次，小伟能赢45次。 </p></li><li><p>但是每次大型比赛（1局定胜负，谁先赢到21分，谁就获胜），小丹赢的概率远远大于小伟，小伟很是不服气。</p></li><li><p><strong>亲爱的小伙伴，你能通过模拟实验，来揭示其中的奥妙吗？</strong></p></li></ul><p><strong>【问题抽象】</strong>  </p><p>1、在小丹Vs小伟的二元比赛系统中，小丹每球获胜概率55%，小伟每球获胜概率45%；  </p><p>2、每局比赛，先赢21球（21分）者获胜；  </p><p>3、假设进行n = 10000局独立的比赛，小丹会获胜多少局？（n 较大的时候，实验结果≈真实期望）</p><p><strong>【问题分解】</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 主要逻辑</span></span><br><span class="line">    prob_A, prob_B, number_of_games = get_inputs()                        <span class="comment"># 获取原始数据</span></span><br><span class="line">    win_A, win_B = sim_n_games(prob_A, prob_B, number_of_games)           <span class="comment"># 获取模拟结果</span></span><br><span class="line">    print_summary(win_A, win_B, number_of_games)                          <span class="comment"># 结果汇总输出</span></span><br></pre></td></tr></table></figure><p><strong>1、输入原始数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_inputs</span><span class="params">()</span>:</span>  </span><br><span class="line">    <span class="comment"># 输入原始数据</span></span><br><span class="line">    prob_A = eval(input(<span class="string">"请输入运动员A的每球获胜概率(0~1)："</span>))</span><br><span class="line">    prob_B = round(<span class="number">1</span>-prob_A, <span class="number">2</span>)</span><br><span class="line">    number_of_games = eval(input(<span class="string">"请输入模拟的场次（正整数）："</span>))</span><br><span class="line">    print(<span class="string">"模拟比赛总次数："</span>, number_of_games)</span><br><span class="line">    print(<span class="string">"A 选手每球获胜概率："</span>, prob_A)</span><br><span class="line">    print(<span class="string">"B 选手每球获胜概率："</span>, prob_B)</span><br><span class="line">    <span class="keyword">return</span> prob_A, prob_B, number_of_games</span><br></pre></td></tr></table></figure><p><strong>&emsp;&emsp;单元测试</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prob_A, prob_B, number_of_games = get_inputs()</span><br><span class="line">print(prob_A, prob_B, number_of_games)</span><br></pre></td></tr></table></figure><pre><code>请输入运动员A的每球获胜概率(0~1)：0.55请输入模拟的场次（正整数）：10000模拟比赛总次数： 10000A 选手每球获胜概率： 0.55B 选手每球获胜概率： 0.450.55 0.45 10000</code></pre><p><strong>2、多场比赛模拟</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sim_n_games</span><span class="params">(prob_A, prob_B, number_of_games)</span>:</span></span><br><span class="line">    <span class="comment"># 模拟多场比赛的结果</span></span><br><span class="line">    win_A, win_B = <span class="number">0</span>, <span class="number">0</span>                <span class="comment"># 初始化A、B获胜的场次</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(number_of_games):   <span class="comment"># 迭代number_of_games次</span></span><br><span class="line">        score_A, score_B = sim_one_game(prob_A, prob_B)  <span class="comment"># 获得模拟依次比赛的比分</span></span><br><span class="line">        <span class="keyword">if</span> score_A &gt; score_B:</span><br><span class="line">            win_A += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            win_B += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> win_A, win_B</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sim_one_game</span><span class="params">(prob_A, prob_B)</span>:</span></span><br><span class="line">    <span class="comment"># 模拟一场比赛的结果</span></span><br><span class="line">    score_A, score_B = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> game_over(score_A, score_B):</span><br><span class="line">        <span class="keyword">if</span> random.random() &lt; prob_A:                <span class="comment"># random.random() 生产[0,1)之间的随机小数,均匀分布</span></span><br><span class="line">            score_A += <span class="number">1</span>                 </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            score_B += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> score_A, score_B</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">game_over</span><span class="params">(score_A, score_B)</span>:</span></span><br><span class="line">    <span class="comment"># 单场模拟结束条件，一方先达到21分，比赛结束</span></span><br><span class="line">    <span class="keyword">return</span> score_A == <span class="number">21</span> <span class="keyword">or</span> score_B == <span class="number">21</span></span><br></pre></td></tr></table></figure><p><strong>&emsp;&emsp;单元测试 用assert——断言</strong></p><ul><li><p>assert expression</p></li><li><p>表达式结果为 false 的时候触发异常</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> game_over(<span class="number">21</span>, <span class="number">8</span>) == <span class="literal">True</span>   </span><br><span class="line"><span class="keyword">assert</span> game_over(<span class="number">9</span>, <span class="number">21</span>) == <span class="literal">True</span></span><br><span class="line"><span class="keyword">assert</span> game_over(<span class="number">11</span>, <span class="number">8</span>) == <span class="literal">False</span></span><br><span class="line"><span class="keyword">assert</span> game_over(<span class="number">21</span>, <span class="number">8</span>) == <span class="literal">False</span></span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------AssertionError                            Traceback (most recent call last)&lt;ipython-input-43-88b651626036&gt; in &lt;module&gt;()      2 assert game_over(9, 21) == True      3 assert game_over(11, 8) == False----&gt; 4 assert game_over(21, 8) == FalseAssertionError: </code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(sim_one_game(<span class="number">0.55</span>, <span class="number">0.45</span>))</span><br><span class="line">print(sim_one_game(<span class="number">0.7</span>, <span class="number">0.3</span>))</span><br><span class="line">print(sim_one_game(<span class="number">0.2</span>, <span class="number">0.8</span>))</span><br></pre></td></tr></table></figure><pre><code>(21, 17)(21, 6)(2, 21)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(sim_n_games(<span class="number">0.55</span>, <span class="number">0.45</span>, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure><pre><code>(741, 259)</code></pre><p><strong>3、结果汇总输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_summary</span><span class="params">(win_A, win_B, number_of_games)</span>:</span></span><br><span class="line">    <span class="comment"># 结果汇总输出</span></span><br><span class="line">    print(<span class="string">"共模拟了&#123;&#125;场比赛"</span>.format(number_of_games))</span><br><span class="line">    print(<span class="string">"选手A获胜&#123;0&#125;场，占比&#123;1:.1%&#125;"</span>.format(win_A, win_A/number_of_games))</span><br><span class="line">    print(<span class="string">"选手B获胜&#123;0&#125;场，占比&#123;1:.1%&#125;"</span>.format(win_B, win_B/number_of_games))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_summary(<span class="number">749</span>, <span class="number">251</span>, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><pre><code>共模拟了1000场比赛选手A获胜749场，占比74.9%选手B获胜251场，占比25.1%</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_inputs</span><span class="params">()</span>:</span>  </span><br><span class="line">    <span class="comment"># 输入原始数据</span></span><br><span class="line">    prob_A = eval(input(<span class="string">"请输入运动员A的每球获胜概率(0~1)："</span>))</span><br><span class="line">    prob_B = round(<span class="number">1</span>-prob_A, <span class="number">2</span>)</span><br><span class="line">    number_of_games = eval(input(<span class="string">"请输入模拟的场次（正整数）："</span>))</span><br><span class="line">    print(<span class="string">"模拟比赛总次数："</span>, number_of_games)</span><br><span class="line">    print(<span class="string">"A 选手每球获胜概率："</span>, prob_A)</span><br><span class="line">    print(<span class="string">"B 选手每球获胜概率："</span>, prob_B)</span><br><span class="line">    <span class="keyword">return</span> prob_A, prob_B, number_of_games</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">game_over</span><span class="params">(score_A, score_B)</span>:</span></span><br><span class="line">    <span class="comment"># 单场模拟结束条件，一方先达到21分，比赛结束    </span></span><br><span class="line">    <span class="keyword">return</span> score_A == <span class="number">21</span> <span class="keyword">or</span> score_B == <span class="number">21</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sim_one_game</span><span class="params">(prob_A, prob_B)</span>:</span></span><br><span class="line">    <span class="comment"># 模拟一场比赛的结果</span></span><br><span class="line">    score_A, score_B = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> game_over(score_A, score_B):</span><br><span class="line">        <span class="keyword">if</span> random.random() &lt; prob_A:                <span class="comment"># random.random() 生产[0,1)之间的随机小数,均匀分布</span></span><br><span class="line">            score_A += <span class="number">1</span>                 </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            score_B += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> score_A, score_B</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sim_n_games</span><span class="params">(prob_A, prob_B, number_of_games)</span>:</span></span><br><span class="line">    <span class="comment"># 模拟多场比赛的结果</span></span><br><span class="line">    win_A, win_B = <span class="number">0</span>, <span class="number">0</span>                <span class="comment"># 初始化A、B获胜的场次</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(number_of_games):   <span class="comment"># 迭代number_of_games次</span></span><br><span class="line">        score_A, score_B = sim_one_game(prob_A, prob_B)  <span class="comment"># 获得模拟依次比赛的比分</span></span><br><span class="line">        <span class="keyword">if</span> score_A &gt; score_B:</span><br><span class="line">            win_A += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            win_B += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> win_A, win_B</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_summary</span><span class="params">(win_A, win_B, number_of_games)</span>:</span></span><br><span class="line">    <span class="comment"># 结果汇总输出</span></span><br><span class="line">    print(<span class="string">"共模拟了&#123;&#125;场比赛"</span>.format(number_of_games))</span><br><span class="line">    print(<span class="string">"\033[31m选手A获胜&#123;0&#125;场，占比&#123;1:.1%&#125;"</span>.format(win_A, win_A/number_of_games))</span><br><span class="line">    print(<span class="string">"选手B获胜&#123;0&#125;场，占比&#123;1:.1%&#125;"</span>.format(win_B, win_B/number_of_games))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 主要逻辑</span></span><br><span class="line">    prob_A, prob_B, number_of_games = get_inputs()                        <span class="comment"># 获取原始数据</span></span><br><span class="line">    win_A, win_B = sim_n_games(prob_A, prob_B, number_of_games)           <span class="comment"># 获取模拟结果</span></span><br><span class="line">    print_summary(win_A, win_B, number_of_games)                          <span class="comment"># 结果汇总输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><pre><code>请输入运动员A的每球获胜概率(0~1)：0.55请输入模拟的场次（正整数）：10000模拟比赛总次数： 10000A 选手每球获胜概率： 0.55B 选手每球获胜概率： 0.45共模拟了10000场比赛[31m选手A获胜7334场，占比73.3%选手B获胜2666场，占比26.7%</code></pre><p>经统计，小丹跟小伟14年职业生涯，共交手40次，小丹以28:12遥遥领先。 </p><p>其中，两人共交战整整100局：  </p><p>小丹获胜61局，占比61%；  </p><p>小伟获胜39局，占比39%。</p><h2 id="你以为你跟别人的差距只是一点点，实际上，差距老大了"><a href="#你以为你跟别人的差距只是一点点，实际上，差距老大了" class="headerlink" title="你以为你跟别人的差距只是一点点，实际上，差距老大了"></a>你以为你跟别人的差距只是一点点，实际上，差距老大了</h2><h2 id="4-3-匿名函数"><a href="#4-3-匿名函数" class="headerlink" title="4.3 匿名函数"></a>4.3 匿名函数</h2><p><strong>1、基本形式</strong></p><p>lambda 变量: 函数体</p><p><strong>2、常用用法</strong>  </p><p>在参数列表中最适合使用匿名函数，尤其是与key = 搭配</p><ul><li>排序sort()  sorted()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls = [(<span class="number">93</span>, <span class="number">88</span>), (<span class="number">79</span>, <span class="number">100</span>), (<span class="number">86</span>, <span class="number">71</span>), (<span class="number">85</span>, <span class="number">85</span>), (<span class="number">76</span>, <span class="number">94</span>)]</span><br><span class="line">ls.sort()</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><pre><code>[(76, 94), (79, 100), (85, 85), (86, 71), (93, 88)]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls.sort(key = <span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><pre><code>[(86, 71), (85, 85), (93, 88), (76, 94), (79, 100)]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls = [(<span class="number">93</span>, <span class="number">88</span>), (<span class="number">79</span>, <span class="number">100</span>), (<span class="number">86</span>, <span class="number">71</span>), (<span class="number">85</span>, <span class="number">85</span>), (<span class="number">76</span>, <span class="number">94</span>)]</span><br><span class="line">temp = sorted(ls, key = <span class="keyword">lambda</span> x: x[<span class="number">0</span>]+x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">temp</span><br></pre></td></tr></table></figure><pre><code>[(93, 88), (79, 100), (85, 85), (76, 94), (86, 71)]</code></pre><ul><li>max() min()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls = [(<span class="number">93</span>, <span class="number">88</span>), (<span class="number">79</span>, <span class="number">100</span>), (<span class="number">86</span>, <span class="number">71</span>), (<span class="number">85</span>, <span class="number">85</span>), (<span class="number">76</span>, <span class="number">94</span>)]</span><br><span class="line">n = max(ls, key = <span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">n</span><br></pre></td></tr></table></figure><pre><code>(79, 100)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = min(ls, key = <span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">n</span><br></pre></td></tr></table></figure><pre><code>(86, 71)</code></pre><h2 id="4-4-面向过程和面向对象"><a href="#4-4-面向过程和面向对象" class="headerlink" title="4.4 面向过程和面向对象"></a>4.4 面向过程和面向对象</h2><p><strong>面向过程</strong>——以过程为中心的编程思想，以“什么正在发生”为主要目标进行编程。&emsp;<strong>冰冷的，程序化的</strong></p><p><strong>面向对象</strong>——将现实世界的事物抽象成对象，更关注“谁在受影响”，更加贴近现实。 &ensp;<strong>有血有肉，拟人（物）化的</strong> </p><ul><li><strong>以公共汽车为例</strong></li></ul><p><strong>“面向过程”</strong>：汽车启动是一个事件，汽车到站是另一个事件。。。。</p><p>在编程序的时候我们关心的是某一个事件，而不是汽车本身。 </p><p>我们分别对启动和到站编写程序。</p><p><strong>“面向对象”</strong>：构造“汽车”这个对象。  </p><p>对象包含动力、服役时间、生产厂家等等一系列的“属性”；  </p><p>也包含加油、启动、加速、刹车、拐弯、鸣喇叭、到站、维修等一系列的“方法”。  </p><p>通过对象的行为表达相应的事件</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础5(程序控制结构)</title>
      <link href="/2020/08/12/deepshare_python%E5%9F%BA%E7%A1%805/"/>
      <url>/2020/08/12/deepshare_python%E5%9F%BA%E7%A1%805/</url>
      
        <content type="html"><![CDATA[<h1 id="第五章-程序控制结构"><a href="#第五章-程序控制结构" class="headerlink" title="第五章 程序控制结构"></a>第五章 程序控制结构</h1><p>非顺序式的程序控制，往往需要根据一定的条件，决定程序运行的路线。因此，我们首先来认识一下什么叫条件测试。</p><h2 id="第一部分-条件测试"><a href="#第一部分-条件测试" class="headerlink" title="第一部分 条件测试"></a>第一部分 条件测试</h2><h3 id="1、比较运算"><a href="#1、比较运算" class="headerlink" title="1、比较运算"></a>1、比较运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">8</span></span><br><span class="line">print(a &gt; b)     <span class="comment"># 大于</span></span><br><span class="line">print(a &lt; b)     <span class="comment"># 小于</span></span><br><span class="line">print(a &gt;= b)    <span class="comment"># 大于等于</span></span><br><span class="line">print(a &lt;= b)    <span class="comment"># 小于等于</span></span><br><span class="line">print(a == b)    <span class="comment"># 等于</span></span><br><span class="line">print(a != b)    <span class="comment"># 不等于</span></span><br></pre></td></tr></table></figure><pre><code>TrueFalseTrueFalseFalseTrue</code></pre><ul><li>非空</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> ls:            <span class="comment"># 数据结构不为空、变量不为0、None、False 则条件成立</span></span><br><span class="line">    print(<span class="string">"非空"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"空的"</span>)</span><br></pre></td></tr></table></figure><pre><code>非空</code></pre><h3 id="2、逻辑运算"><a href="#2、逻辑运算" class="headerlink" title="2、逻辑运算"></a>2、逻辑运算</h3><ul><li>与、或、非</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">8</span></span><br><span class="line">c = <span class="number">12</span></span><br><span class="line">print((a &gt; b) <span class="keyword">and</span> (b &gt; c))    <span class="comment"># 与</span></span><br><span class="line">print((a &gt; b) <span class="keyword">or</span> (b &gt; c))     <span class="comment"># 或</span></span><br><span class="line">print(<span class="keyword">not</span>(a &gt; b))             <span class="comment"># 非</span></span><br></pre></td></tr></table></figure><pre><code>FalseTrueFalse</code></pre><ul><li>复合逻辑运算的优先级<br>非 &gt; 与 &gt; 或</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="literal">True</span> <span class="keyword">or</span> <span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print((<span class="literal">True</span> <span class="keyword">or</span> <span class="literal">True</span>) <span class="keyword">and</span> <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><pre><code>False</code></pre><h3 id="3、存在运算"><a href="#3、存在运算" class="headerlink" title="3、存在运算"></a>3、存在运算</h3><p>元素 in 列表/字符串   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">"BYD"</span>, <span class="string">"BMW"</span>, <span class="string">"AUDI"</span>, <span class="string">"TOYOTA"</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"BMW"</span> <span class="keyword">in</span> cars)</span><br><span class="line">print(<span class="string">"BENZ"</span> <span class="keyword">in</span> cars)</span><br></pre></td></tr></table></figure><pre><code>TrueFalse</code></pre><p>元素 not in 列表/字符串   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"BMW"</span> <span class="keyword">not</span> <span class="keyword">in</span> cars)</span><br><span class="line">print(<span class="string">"BENZ"</span> <span class="keyword">not</span> <span class="keyword">in</span> cars)</span><br></pre></td></tr></table></figure><pre><code>FalseTrue</code></pre><h2 id="第二部分-分支结构——if语句"><a href="#第二部分-分支结构——if语句" class="headerlink" title="第二部分 分支结构——if语句"></a>第二部分 分支结构——if语句</h2><h3 id="1、单分支"><a href="#1、单分支" class="headerlink" title="1、单分支"></a>1、单分支</h3><p><strong>模板</strong>  </p><p>if 条件：<br>&emsp;&ensp;缩进的代码块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">8</span></span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">7</span>:</span><br><span class="line">    print(<span class="string">"孩子，你该上学啦！"</span>)</span><br></pre></td></tr></table></figure><pre><code>孩子，你该上学啦！</code></pre><h3 id="2、二分支"><a href="#2、二分支" class="headerlink" title="2、二分支"></a>2、二分支</h3><p><strong>模板</strong>  </p><p>if 条件：<br>&emsp;&ensp;缩进的代码块<br>else：<br>&emsp;&ensp;缩进的代码块  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">6</span></span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">7</span>:</span><br><span class="line">    print(<span class="string">"孩子，你该上学啦！"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"再玩两年泥巴！"</span>)</span><br></pre></td></tr></table></figure><pre><code>再玩两年泥巴！</code></pre><h3 id="3、-多分支"><a href="#3、-多分支" class="headerlink" title="3、 多分支"></a>3、 多分支</h3><p><strong>模板</strong>  </p><p>if 条件：<br>&emsp;&ensp;缩进的代码块<br>elif 条件：<br>&emsp;&ensp;缩进的代码块<br>elif 条件：<br>&emsp;&ensp;缩进的代码块<br>…<br>else：<br>&emsp;&ensp;缩进的代码块  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">38</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">7</span>:</span><br><span class="line">    print(<span class="string">"再玩两年泥巴"</span>)</span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">13</span>:</span><br><span class="line">    print(<span class="string">"孩子，你该上小学啦"</span>)</span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">16</span>:</span><br><span class="line">    print(<span class="string">"孩子，你该上初中了"</span>)</span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">19</span>:</span><br><span class="line">    print(<span class="string">"孩子，你该上高中了"</span>)</span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">23</span>:</span><br><span class="line">    print(<span class="string">"大学生活快乐"</span>)</span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">"辛苦了，各行各业的工作者们"</span>)</span><br><span class="line"><span class="keyword">else</span>:     <span class="comment"># 有时为了清楚，也可以写成elif age &gt;= 60:</span></span><br><span class="line">    print(<span class="string">"享受退休生活吧"</span>)</span><br></pre></td></tr></table></figure><pre><code>辛苦了，各行各业的工作者们</code></pre><p><strong>不管多少分支，最后只执行一个分支</strong></p><h3 id="4、嵌套语句"><a href="#4、嵌套语句" class="headerlink" title="4、嵌套语句"></a>4、嵌套语句</h3><p><strong>题目：年满18周岁，在非公共场合方可抽烟，判断某种情形下是否可以抽烟</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">age = eval(input(<span class="string">"请输入年龄"</span>))</span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">18</span>:</span><br><span class="line">    is_public_place = bool(eval(input(<span class="string">"公共场合请输入1，非公共场合请输入0"</span>)))</span><br><span class="line">    print(is_public_place)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_public_place:</span><br><span class="line">        print(<span class="string">"可以抽烟"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"禁止抽烟"</span>)        </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"禁止抽烟"</span>)</span><br></pre></td></tr></table></figure><pre><code>请输入年龄18禁止抽烟</code></pre><h2 id="第三部分-遍历循环——for-循环"><a href="#第三部分-遍历循环——for-循环" class="headerlink" title="第三部分 遍历循环——for 循环"></a>第三部分 遍历循环——for 循环</h2><h3 id="主要形式："><a href="#主要形式：" class="headerlink" title="主要形式："></a>主要形式：</h3><ul><li><strong>for</strong> 元素 <strong>in</strong> 可迭代对象：<br>&emsp;&emsp;执行语句</li></ul><h3 id="执行过程："><a href="#执行过程：" class="headerlink" title="执行过程："></a>执行过程：</h3><ul><li>从可迭代对象中，依次取出每一个元素，并进行相应的操作</li></ul><p>1、直接迭代——列表[ ]、元组( )、集合{ }、字符串” “</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graduates = (<span class="string">"李雷"</span>, <span class="string">"韩梅梅"</span>, <span class="string">"Jim"</span>)</span><br><span class="line"><span class="keyword">for</span> graduate <span class="keyword">in</span> graduates:</span><br><span class="line">    print(<span class="string">"Congratulations, "</span>+graduate)</span><br></pre></td></tr></table></figure><pre><code>Congratulations, 李雷Congratulations, 韩梅梅Congratulations, Jim</code></pre><p>2、变换迭代——字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">students = &#123;<span class="number">201901</span>: <span class="string">'小明'</span>, <span class="number">201902</span>: <span class="string">'小红'</span>, <span class="number">201903</span>: <span class="string">'小强'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> students.items():</span><br><span class="line">    print(k, v)</span><br><span class="line"><span class="keyword">for</span> student <span class="keyword">in</span> students.keys():</span><br><span class="line">    print(student)</span><br></pre></td></tr></table></figure><pre><code>201901 小明201902 小红201903 小强201901201902201903</code></pre><p>3、range()对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">    res.append(i**<span class="number">2</span>)</span><br><span class="line">print(res[:<span class="number">5</span>])</span><br><span class="line">print(res[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><pre><code>[0, 1, 4, 9, 16]99980001</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>):</span><br><span class="line">    res.append(i**<span class="number">2</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><pre><code>[1, 9, 25, 49, 81]</code></pre><h3 id="循环控制：break-和-continue"><a href="#循环控制：break-和-continue" class="headerlink" title="循环控制：break 和 continue"></a>循环控制：break 和 continue</h3><ul><li>break 结束整个循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">product_scores = [<span class="number">89</span>, <span class="number">90</span>, <span class="number">99</span>, <span class="number">70</span>, <span class="number">67</span>, <span class="number">78</span>, <span class="number">85</span>, <span class="number">92</span>, <span class="number">77</span>, <span class="number">82</span>] <span class="comment"># 1组10个产品的性能评分</span></span><br><span class="line"> <span class="comment"># 如果低于75分的超过1个，则该组产品不合格</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> score <span class="keyword">in</span> product_scores:</span><br><span class="line">    <span class="keyword">if</span> score &lt; <span class="number">75</span>:</span><br><span class="line">        i += <span class="number">1</span> </span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line">        print(<span class="string">"产品抽检不合格"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><pre><code>产品抽检不合格</code></pre><ul><li>continue 结束本次循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">product_scores = [<span class="number">89</span>, <span class="number">90</span>, <span class="number">99</span>, <span class="number">70</span>, <span class="number">67</span>, <span class="number">78</span>, <span class="number">85</span>, <span class="number">92</span>, <span class="number">77</span>, <span class="number">82</span>] <span class="comment"># 1组10个产品的性能评分</span></span><br><span class="line"> <span class="comment"># 如果低于75分,输出警示</span></span><br><span class="line">print(len(product_scores))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(product_scores)):</span><br><span class="line">    <span class="keyword">if</span> product_scores[i] &gt;= <span class="number">75</span>:</span><br><span class="line">        <span class="keyword">continue</span> </span><br><span class="line">    print(<span class="string">"第&#123;0&#125;个产品，分数为&#123;1&#125;，不合格"</span>.format(i, product_scores[i]))</span><br></pre></td></tr></table></figure><pre><code>10第3个产品，分数为70，不合格第4个产品，分数为67，不合格</code></pre><h3 id="for-与-else的配合"><a href="#for-与-else的配合" class="headerlink" title="for 与 else的配合"></a>for 与 else的配合</h3><p>如果for 循环全部执行完毕，没有被break中止，则运行else块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">product_scores = [<span class="number">89</span>, <span class="number">90</span>, <span class="number">99</span>, <span class="number">70</span>, <span class="number">67</span>, <span class="number">78</span>, <span class="number">85</span>, <span class="number">92</span>, <span class="number">77</span>, <span class="number">82</span>] <span class="comment"># 1组10个产品的性能评分</span></span><br><span class="line"> <span class="comment"># 如果低于75分的超过1个，则该组产品不合格</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> score <span class="keyword">in</span> product_scores:</span><br><span class="line">    <span class="keyword">if</span> score &lt; <span class="number">75</span>:</span><br><span class="line">        i+=<span class="number">1</span> </span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line">        print(<span class="string">"产品抽检不合格"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"产品抽检合格"</span>)</span><br></pre></td></tr></table></figure><pre><code>产品抽检不合格</code></pre><h2 id="第四部分-无限循环——while-循环"><a href="#第四部分-无限循环——while-循环" class="headerlink" title="第四部分 无限循环——while 循环"></a>第四部分 无限循环——while 循环</h2><h3 id="4-1-为什么要用while-循环"><a href="#4-1-为什么要用while-循环" class="headerlink" title="4.1 为什么要用while 循环"></a>4.1 为什么要用while 循环</h3><ul><li>经典题目：猜数字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">albert_age = <span class="number">18</span></span><br><span class="line"><span class="comment">#第1次</span></span><br><span class="line">guess = int(input(<span class="string">"&gt;&gt;:"</span>))</span><br><span class="line"><span class="keyword">if</span> guess &gt; albert_age :</span><br><span class="line">    print(<span class="string">"猜的太大了，往小里试试..."</span>)</span><br><span class="line"><span class="keyword">elif</span> guess &lt; albert_age :</span><br><span class="line">    print(<span class="string">"猜的太小了，往大里试试..."</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"恭喜你，猜对了..."</span>)</span><br><span class="line"><span class="comment">#第2次</span></span><br><span class="line">guess = int(input(<span class="string">"&gt;&gt;:"</span>))</span><br><span class="line"><span class="keyword">if</span> guess &gt; albert_age :</span><br><span class="line">    print(<span class="string">"猜的太大了，往小里试试..."</span>)</span><br><span class="line"><span class="keyword">elif</span> guess &lt; albert_age :</span><br><span class="line">    print(<span class="string">"猜的太小了，往大里试试..."</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"恭喜你，猜对了..."</span>)</span><br></pre></td></tr></table></figure><pre><code>&gt;&gt;:18恭喜你，猜对了...&gt;&gt;:18恭喜你，猜对了...</code></pre><p><strong>代码可能需要重复执行，可是又不知道具体要执行多少次</strong></p><h3 id="4-2-while循环的一般形式"><a href="#4-2-while循环的一般形式" class="headerlink" title="4.2 while循环的一般形式"></a>4.2 while循环的一般形式</h3><h3 id="主要形式：-1"><a href="#主要形式：-1" class="headerlink" title="主要形式："></a>主要形式：</h3><ul><li><strong>while</strong> 判断条件：<br>&emsp;&emsp;执行语句<br><strong>条件为真，执行语句</strong><br><strong>条件为假，while 循环结束</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">albert_age = <span class="number">18</span> </span><br><span class="line">guess = int(input(<span class="string">"&gt;&gt;:"</span>))</span><br><span class="line"><span class="keyword">while</span> guess != albert_age: </span><br><span class="line">    <span class="keyword">if</span> guess &gt; albert_age :</span><br><span class="line">        print(<span class="string">"猜的太大了，往小里试试..."</span>)</span><br><span class="line">    <span class="keyword">elif</span> guess &lt; albert_age :</span><br><span class="line">        print(<span class="string">"猜的太小了，往大里试试..."</span>)</span><br><span class="line">    guess = int(input(<span class="string">"&gt;&gt;:"</span>))</span><br><span class="line">print(<span class="string">"恭喜你，猜对了..."</span>)</span><br></pre></td></tr></table></figure><pre><code>&gt;&gt;:18恭喜你，猜对了...</code></pre><h3 id="4-3-while与风向标"><a href="#4-3-while与风向标" class="headerlink" title="4.3 while与风向标"></a>4.3 while与风向标</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">albert_age = <span class="number">18</span> </span><br><span class="line">flag = <span class="literal">True</span>     <span class="comment"># 布尔类型</span></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    guess = int(input(<span class="string">"&gt;&gt;:"</span>))</span><br><span class="line">    <span class="keyword">if</span> guess &gt; albert_age :</span><br><span class="line">        print(<span class="string">"猜的太大了，往小里试试..."</span>)</span><br><span class="line">    <span class="keyword">elif</span> guess &lt; albert_age :</span><br><span class="line">        print(<span class="string">"猜的太小了，往大里试试..."</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"恭喜你，猜对了..."</span>)</span><br><span class="line">        flag = <span class="literal">False</span>    <span class="comment"># 当诉求得到满足，就让风向变一下</span></span><br></pre></td></tr></table></figure><pre><code>&gt;&gt;:18恭喜你，猜对了...</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="literal">True</span>  </span><br><span class="line"><span class="keyword">while</span> flag:  </span><br><span class="line">    <span class="keyword">pass</span>  </span><br><span class="line">    <span class="keyword">while</span> flag:  </span><br><span class="line">        <span class="keyword">pass</span>  </span><br><span class="line">        <span class="keyword">while</span> flag:     </span><br><span class="line">            flag=<span class="literal">False</span>     <span class="comment"># 循环逐层判断，当flag为false时，循环会逐层退出</span></span><br></pre></td></tr></table></figure><h3 id="4-4-while-与循环控制-break、continue"><a href="#4-4-while-与循环控制-break、continue" class="headerlink" title="4.4 while 与循环控制 break、continue"></a>4.4 while 与循环控制 break、continue</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">albert_age = <span class="number">18</span> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    guess = int(input(<span class="string">"&gt;&gt;:"</span>))</span><br><span class="line">    <span class="keyword">if</span> guess &gt; albert_age :</span><br><span class="line">        print(<span class="string">"猜的太大了，往小里试试..."</span>)</span><br><span class="line">    <span class="keyword">elif</span> guess &lt; albert_age :</span><br><span class="line">        print(<span class="string">"猜的太小了，往大里试试..."</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"恭喜你，猜对了..."</span>)</span><br><span class="line">        <span class="keyword">break</span>    <span class="comment"># 当诉求得到满足，就跳出循环</span></span><br></pre></td></tr></table></figure><pre><code>&gt;&gt;:18恭喜你，猜对了...</code></pre><p>输出10以内的奇数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span>       <span class="comment"># 跳出本次循环，进入下一次循环</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>13579</code></pre><h3 id="4-5-while与else"><a href="#4-5-while与else" class="headerlink" title="4.5 while与else"></a>4.5 while与else</h3><p>如果while 循环全部执行完毕，没有被break中止，则运行else块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">5</span> :</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"Loop"</span>,count)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"循环正常执行完啦"</span>)</span><br></pre></td></tr></table></figure><pre><code>Loop 1Loop 2Loop 3Loop 4Loop 5Loop 6循环正常执行完啦</code></pre><h3 id="4-6-再看两个例子"><a href="#4-6-再看两个例子" class="headerlink" title="4.6 再看两个例子"></a>4.6 再看两个例子</h3><p>【小例子】删除列表中的特定值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pets = [<span class="string">"dog"</span>, <span class="string">"cat"</span>, <span class="string">"dog"</span>, <span class="string">"pig"</span>, <span class="string">"goldfish"</span>, <span class="string">"rabbit"</span>, <span class="string">"cat"</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="string">"cat"</span> <span class="keyword">in</span> pets:</span><br><span class="line">    pets.remove(<span class="string">"cat"</span>)</span><br><span class="line">pets</span><br></pre></td></tr></table></figure><pre><code>[&#39;dog&#39;, &#39;dog&#39;, &#39;pig&#39;, &#39;goldfish&#39;, &#39;rabbit&#39;]</code></pre><p>【小例子】将未读书籍列表中书名分别输出后，存入已读书籍列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">not_read = [<span class="string">"红楼梦"</span>, <span class="string">"水浒传"</span>, <span class="string">"三国演义"</span>, <span class="string">"西游记"</span>]</span><br><span class="line">have_read = []</span><br><span class="line"><span class="keyword">while</span> not_read:     <span class="comment"># not_read非空，循环继续，否则中止</span></span><br><span class="line">    book = not_read.pop()</span><br><span class="line">    have_read.append(book)</span><br><span class="line">    print(<span class="string">"我已经读过《&#123;&#125;》了"</span>.format(book))</span><br><span class="line">print(not_read)</span><br><span class="line">print(have_read)</span><br></pre></td></tr></table></figure><pre><code>我已经读过《西游记》了我已经读过《三国演义》了我已经读过《水浒传》了我已经读过《红楼梦》了[][&#39;西游记&#39;, &#39;三国演义&#39;, &#39;水浒传&#39;, &#39;红楼梦&#39;]</code></pre><h1 id="第五部分-控制语句注意问题"><a href="#第五部分-控制语句注意问题" class="headerlink" title="第五部分 控制语句注意问题"></a>第五部分 控制语句注意问题</h1><h3 id="5-1-尽可能减少多层嵌套"><a href="#5-1-尽可能减少多层嵌套" class="headerlink" title="5.1 尽可能减少多层嵌套"></a>5.1 尽可能减少多层嵌套</h3><ul><li>可读性差，容易把人搞疯掉</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    执行语句</span><br><span class="line">    <span class="keyword">if</span> 条件：</span><br><span class="line">        执行语句</span><br><span class="line">        <span class="keyword">if</span>...</span><br></pre></td></tr></table></figure><h3 id="5-2-避免死循环"><a href="#5-2-避免死循环" class="headerlink" title="5.2 避免死循环"></a>5.2 避免死循环</h3><p>条件一直成立，循环永无止境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># while True:</span></span><br><span class="line">    <span class="comment"># print("天地之渺渺，时间之无限")</span></span><br></pre></td></tr></table></figure><h3 id="5-3-封装过于复杂的判断条件"><a href="#5-3-封装过于复杂的判断条件" class="headerlink" title="5.3 封装过于复杂的判断条件"></a>5.3 封装过于复杂的判断条件</h3><p>如果条件判断里的表达式过于复杂   </p><p>出现了太多的 not/and/or等   </p><p>导致可读性大打折扣</p><p><strong>考虑将条件封装为函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a, b, c, d, e = <span class="number">10</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; b) <span class="keyword">and</span> (c &gt;d) <span class="keyword">and</span> (<span class="keyword">not</span> e):</span><br><span class="line">    print(<span class="string">"我已经晕鸟"</span>)</span><br></pre></td></tr></table></figure><pre><code>我已经晕鸟</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">numbers = (<span class="number">10</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(num)</span>:</span></span><br><span class="line">    a, b, c, d, e = num</span><br><span class="line">    x = a &gt; b</span><br><span class="line">    y = c &gt; d</span><br><span class="line">    z = <span class="keyword">not</span> e</span><br><span class="line">    <span class="keyword">return</span> x <span class="keyword">and</span> y <span class="keyword">and</span> z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> judge(numbers):</span><br><span class="line">    print(<span class="string">"就是这个feel，biu倍儿爽"</span>)</span><br></pre></td></tr></table></figure><pre><code>就是这个feel，biu倍儿爽</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础4(组合数据类型)</title>
      <link href="/2020/08/11/deepshare_python%E5%9F%BA%E7%A1%804/"/>
      <url>/2020/08/11/deepshare_python%E5%9F%BA%E7%A1%804/</url>
      
        <content type="html"><![CDATA[<h1 id="第四章-组合数据类型"><a href="#第四章-组合数据类型" class="headerlink" title="第四章 组合数据类型"></a>第四章 组合数据类型</h1><h2 id="4-1-列表"><a href="#4-1-列表" class="headerlink" title="4.1 列表"></a>4.1 列表</h2><h3 id="4-1-1-列表的表达"><a href="#4-1-1-列表的表达" class="headerlink" title="4.1.1 列表的表达"></a>4.1.1 列表的表达</h3><ul><li>序列类型：内部元素有位置关系，能通过位置序号访问其中元素</li><li>列表是一个可以使用多种类型元素，支持元素的增、删、查、改操作的序列类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="string">"Python"</span>, <span class="number">1989</span>, <span class="literal">True</span>, &#123;<span class="string">"version"</span>: <span class="number">3.7</span>&#125;]</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><pre><code>[&#39;Python&#39;, 1989, True, {&#39;version&#39;: 3.7}]</code></pre><ul><li>另一种产生方式：list(可迭代对象)</li><li>可迭代对象包括：字符串、元组、集合、range()等</li></ul><p><strong>字符串转列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(<span class="string">"人工智能是未来的趋势"</span>)</span><br></pre></td></tr></table></figure><pre><code>[&#39;人&#39;, &#39;工&#39;, &#39;智&#39;, &#39;能&#39;, &#39;是&#39;, &#39;未&#39;, &#39;来&#39;, &#39;的&#39;, &#39;趋&#39;, &#39;势&#39;]</code></pre><p><strong>元组转列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list((<span class="string">"我"</span>, <span class="string">"们"</span>, <span class="string">"很"</span>, <span class="string">"像"</span>))</span><br></pre></td></tr></table></figure><pre><code>[&#39;我&#39;, &#39;们&#39;, &#39;很&#39;, &#39;像&#39;]</code></pre><p><strong>集合转列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(&#123;<span class="string">"李雷"</span>, <span class="string">"韩梅梅"</span>, <span class="string">"Jim"</span>, <span class="string">"Green"</span>&#125;)</span><br></pre></td></tr></table></figure><pre><code>[&#39;Jim&#39;, &#39;Green&#39;, &#39;韩梅梅&#39;, &#39;李雷&#39;]</code></pre><p><strong>特殊的range()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>012345</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>012345</code></pre><ul><li>range(start,end,interval)</li></ul><p><strong>如果起始数字缺省，默认为0</strong></p><p><strong>必须包含终止数字</strong></p><p><strong>数字间隔缺省，默认为1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>13579</code></pre><ul><li>range()转列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(range(<span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><pre><code>[1, 3, 5, 7, 9]</code></pre><h3 id="4-1-2-列表的性质"><a href="#4-1-2-列表的性质" class="headerlink" title="4.1.2 列表的性质"></a>4.1.2 列表的性质</h3><ul><li>列表的长度——<code>len(列表)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">len(ls)</span><br></pre></td></tr></table></figure><pre><code>5</code></pre><ul><li>列表的索引——与同为序列类型的字符串完全相同</li></ul><p><strong>变量名[位置编号]</strong></p><ul><li>正向索引从0开始</li><li>反向索引从-1开始</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">"BYD"</span>, <span class="string">"BMW"</span>, <span class="string">"AUDI"</span>, <span class="string">"TOYOTA"</span>]</span><br><span class="line">print(cars[<span class="number">0</span>])</span><br><span class="line">print(cars[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><pre><code>BYDTOYOTA</code></pre><ul><li>列表的切片</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">cars &#x3D; [&quot;BYD&quot;, &quot;BMW&quot;, &quot;AUDI&quot;, &quot;TOYOTA&quot;]</span><br></pre></td></tr></table></figure><ul><li>正向切片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(cars[:<span class="number">3</span>]) <span class="comment"># 前三个元素，开始位置缺省，默认为0；切片间隔缺省，默认为1</span></span><br></pre></td></tr></table></figure><pre><code>[&#39;BYD&#39;, &#39;BMW&#39;, &#39;AUDI&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(cars[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>])</span><br></pre></td></tr></table></figure><pre><code>[&#39;BMW&#39;, &#39;TOYOTA&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(cars[:])</span><br></pre></td></tr></table></figure><pre><code>[&#39;BYD&#39;, &#39;BMW&#39;, &#39;AUDI&#39;, &#39;TOYOTA&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(cars[<span class="number">-4</span>:<span class="number">-2</span>])</span><br></pre></td></tr></table></figure><pre><code>[&#39;BYD&#39;, &#39;BMW&#39;]</code></pre><ul><li>反向切片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(cars[:<span class="number">-4</span>:<span class="number">-1</span>])</span><br><span class="line">print(cars[::<span class="number">-1</span>]) <span class="comment"># 获得反向列表</span></span><br></pre></td></tr></table></figure><pre><code>[&#39;TOYOTA&#39;, &#39;AUDI&#39;, &#39;BMW&#39;][&#39;TOYOTA&#39;, &#39;AUDI&#39;, &#39;BMW&#39;, &#39;BYD&#39;]</code></pre><h3 id="4-1-3-列表的操作符"><a href="#4-1-3-列表的操作符" class="headerlink" title="4.1.3 列表的操作符"></a>4.1.3 列表的操作符</h3><ul><li>用list1+list2的形式实现列表的拼接</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">a + b</span><br></pre></td></tr></table></figure><pre><code>[1, 2, 3, 4]</code></pre><ul><li>用<code>n*list</code>或<code>list*n</code>实现列表的成倍复制</li></ul><p><strong>初始化列表的一种方式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>]*<span class="number">10</span></span><br></pre></td></tr></table></figure><pre><code>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</code></pre><h3 id="4-1-4-列表的操作方法"><a href="#4-1-4-列表的操作方法" class="headerlink" title="4.1.4 列表的操作方法"></a>4.1.4 列表的操作方法</h3><ol><li>增加元素<ul><li>在末尾增加元素——<code>list.append(待增加元素)</code></li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">languages = [<span class="string">"Python"</span>, <span class="string">"C++"</span>, <span class="string">"R"</span>]</span><br><span class="line">languages.append(<span class="string">"Java"</span>)</span><br><span class="line">languages</span><br></pre></td></tr></table></figure><pre><code>[&#39;Python&#39;, &#39;C++&#39;, &#39;R&#39;, &#39;Java&#39;]</code></pre><ul><li>在任意位置插入元素——<code>list.insert(位置编号,待增加元素)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">languages.insert(<span class="number">1</span>, <span class="string">"C"</span>)</span><br><span class="line">languages</span><br></pre></td></tr></table></figure><pre><code>[&#39;Python&#39;, &#39;C&#39;, &#39;C++&#39;, &#39;R&#39;, &#39;Java&#39;]</code></pre><ul><li>在末尾整体并入另一个列表——<code>list1.extend(list2)</code></li></ul><p>append将list2整体作为一个元素添加到list1中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">languages.append([<span class="string">"Ruby"</span>, <span class="string">"PHP"</span>])</span><br><span class="line">languages</span><br></pre></td></tr></table></figure><pre><code>[&#39;Python&#39;, &#39;C&#39;, &#39;C++&#39;, &#39;R&#39;, &#39;Java&#39;, [&#39;Ruby&#39;, &#39;PHP&#39;]]</code></pre><p>extend将list2内的元素逐个添加到list1中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">languages = [<span class="string">"Python"</span>, <span class="string">"C"</span>, <span class="string">"C++"</span>, <span class="string">"R"</span>, <span class="string">"Java"</span>]</span><br><span class="line">languages.extend([<span class="string">"Ruby"</span>, <span class="string">"PHP"</span>])</span><br><span class="line">languages</span><br></pre></td></tr></table></figure><pre><code>[&#39;Python&#39;, &#39;C&#39;, &#39;C++&#39;, &#39;R&#39;, &#39;Java&#39;, &#39;Ruby&#39;, &#39;PHP&#39;]</code></pre><ol><li>删除元素<ul><li>删除列表i位置的元素<code>list.pop(i)</code></li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(languages)</span><br><span class="line">languages.pop(<span class="number">1</span>)</span><br><span class="line">print(languages)</span><br></pre></td></tr></table></figure><pre><code>[&#39;Python&#39;, &#39;C&#39;, &#39;C++&#39;, &#39;R&#39;, &#39;Java&#39;, &#39;Ruby&#39;, &#39;PHP&#39;][&#39;Python&#39;, &#39;C++&#39;, &#39;R&#39;, &#39;Java&#39;, &#39;Ruby&#39;, &#39;PHP&#39;]</code></pre><ul><li>不写位置信息则默认删除最后一个元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">languages.pop()</span><br><span class="line">print(languages)</span><br></pre></td></tr></table></figure><pre><code>[&#39;Python&#39;, &#39;C++&#39;, &#39;R&#39;, &#39;Java&#39;, &#39;Ruby&#39;]</code></pre><ul><li>删除列表中第一次出现的待删元素<code>list.remove(待删元素)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">languages = [<span class="string">'Python'</span>, <span class="string">'C'</span>, <span class="string">'R'</span>, <span class="string">'C'</span>, <span class="string">'Java'</span>]</span><br><span class="line">languages.remove(<span class="string">"C"</span>)</span><br><span class="line">languages</span><br></pre></td></tr></table></figure><pre><code>[&#39;Python&#39;, &#39;R&#39;, &#39;C&#39;, &#39;Java&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">languages = [<span class="string">'Python'</span>, <span class="string">'C'</span>, <span class="string">'R'</span>, <span class="string">'C'</span>, <span class="string">'Java'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="string">"C"</span> <span class="keyword">in</span> languages:</span><br><span class="line">    languages.remove(<span class="string">"C"</span>)</span><br><span class="line">languages</span><br></pre></td></tr></table></figure><pre><code>[&#39;Python&#39;, &#39;R&#39;, &#39;Java&#39;]</code></pre><ol><li>查找元素<ul><li>返回列表中第一次出现待查元素的位置<code>list.index(待查元素)</code></li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">languages = [<span class="string">'Python'</span>, <span class="string">'C'</span>, <span class="string">'R'</span>, <span class="string">'C'</span>, <span class="string">'Java'</span>]</span><br><span class="line">idx = languages.index(<span class="string">"C"</span>)</span><br><span class="line">idx</span><br></pre></td></tr></table></figure><pre><code>1</code></pre><ol><li>修改元素<ul><li>通过“先索引后赋值”的方式，对元素进行修改<code>list[index]=value</code></li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(languages)</span><br><span class="line">languages[<span class="number">1</span>] = <span class="string">"C++"</span></span><br><span class="line">print(languages)</span><br></pre></td></tr></table></figure><pre><code>[&#39;Python&#39;, &#39;C&#39;, &#39;R&#39;, &#39;C&#39;, &#39;Java&#39;][&#39;Python&#39;, &#39;C++&#39;, &#39;R&#39;, &#39;C&#39;, &#39;Java&#39;]</code></pre><ol><li>列表的复制<ul><li>深拷贝（即内存地址共享）</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">languages = [<span class="string">'Python'</span>, <span class="string">'C'</span>, <span class="string">'R'</span>, <span class="string">'Java'</span>]</span><br><span class="line">languages_2 = languages</span><br><span class="line">print(languages_2)</span><br></pre></td></tr></table></figure><pre><code>[&#39;Python&#39;, &#39;C&#39;, &#39;R&#39;, &#39;Java&#39;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">languages.pop()</span><br><span class="line">print(languages)</span><br><span class="line">print(languages_2)</span><br></pre></td></tr></table></figure><pre><code>[&#39;Python&#39;, &#39;C&#39;, &#39;R&#39;][&#39;Python&#39;, &#39;C&#39;, &#39;R&#39;]</code></pre><ul><li>浅拷贝<ul><li>法一：<code>list.copy()</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(languages)</span><br><span class="line">languages_2 = languages.copy()</span><br><span class="line">languages.pop()</span><br><span class="line">print(languages)</span><br><span class="line">print(languages_2)</span><br></pre></td></tr></table></figure><pre><code>[&#39;Python&#39;, &#39;C&#39;, &#39;R&#39;][&#39;Python&#39;, &#39;C&#39;][&#39;Python&#39;, &#39;C&#39;, &#39;R&#39;]</code></pre><ul><li>法二：<code>list[:]</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">languages = [<span class="string">'Python'</span>, <span class="string">'C'</span>, <span class="string">'R'</span>, <span class="string">'Java'</span>]</span><br><span class="line">languages_3 = languages[:]</span><br><span class="line">languages.pop()</span><br><span class="line">print(languages)</span><br><span class="line">print(languages_3)</span><br></pre></td></tr></table></figure><pre><code>[&#39;Python&#39;, &#39;C&#39;, &#39;R&#39;][&#39;Python&#39;, &#39;C&#39;, &#39;R&#39;, &#39;Java&#39;]</code></pre><ol><li>列表的排序<ul><li>使用<code>list.sort()</code>对列表进行永久排序（升序）</li><li>直接在列表上进行操作，无返回值</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">19</span>, <span class="number">3</span>, <span class="number">7</span>]</span><br><span class="line">ls.sort()</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><pre><code>[2, 2, 3, 5, 7, 8, 19]</code></pre><ul><li>递减排列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><pre><code>[19, 8, 7, 5, 3, 2, 2]</code></pre><ul><li>使用<code>sorted(list)</code>对列表进行临时排序（升序）</li><li>原列表保持不变，返回排序后的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">19</span>, <span class="number">3</span>, <span class="number">7</span>]</span><br><span class="line">ls_2 = sorted(ls)</span><br><span class="line">print(ls)</span><br><span class="line">print(ls_2)</span><br></pre></td></tr></table></figure><pre><code>[2, 5, 2, 8, 19, 3, 7][2, 2, 3, 5, 7, 8, 19]</code></pre><ul><li><code>sorted(list, reverse=True)</code>降序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted(ls, reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>[19, 8, 7, 5, 3, 2, 2]</code></pre><ol><li>列表的翻转<ul><li>使用<code>list.reverse()</code>对列表进行永久翻转</li><li>直接在列表上进行操作，无返回值</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">print(ls[::<span class="number">-1</span>])</span><br><span class="line">print(ls)</span><br></pre></td></tr></table></figure><pre><code>[5, 4, 3, 2, 1][1, 2, 3, 4, 5]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls.reverse()</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><pre><code>[5, 4, 3, 2, 1]</code></pre><ol><li>使用for循环对列表进行遍历</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ls:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>12345</code></pre><h2 id="4-2-元组"><a href="#4-2-元组" class="headerlink" title="4.2 元组"></a>4.2 元组</h2><h3 id="4-2-1-元组的表达"><a href="#4-2-1-元组的表达" class="headerlink" title="4.2.1 元组的表达"></a>4.2.1 元组的表达</h3><ul><li>元组内可以使用多种类型元素，定义后内部元素不支持增、删、改操作的序列类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">names = (<span class="string">"Peter"</span>, <span class="string">"Paul"</span>, <span class="string">"Mary"</span>)</span><br></pre></td></tr></table></figure><h3 id="4-2-2-元组的操作"><a href="#4-2-2-元组的操作" class="headerlink" title="4.2.2 元组的操作"></a>4.2.2 元组的操作</h3><ul><li>不支持元素增、删、改</li><li>其他操作与列表完全一致</li></ul><h3 id="4-2-3-元组的常见用处"><a href="#4-2-3-元组的常见用处" class="headerlink" title="4.2.3 元组的常见用处"></a>4.2.3 元组的常见用处</h3><p><strong>打包与解包</strong></p><ul><li>示例1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(x)</span>:</span>     <span class="comment"># 返回x的平方和立方</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span>, x**<span class="number">3</span>   <span class="comment">#实现打包返回</span></span><br><span class="line"></span><br><span class="line">print(f1(<span class="number">3</span>))</span><br><span class="line">print(type(f1(<span class="number">3</span>)))</span><br></pre></td></tr></table></figure><pre><code>(9, 27)&lt;class &#39;tuple&#39;&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a, b = f1(<span class="number">3</span>)     <span class="comment">#实现解包赋值</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><pre><code>927</code></pre><ul><li>示例2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">201901</span>, <span class="number">201902</span>, <span class="number">201903</span>]</span><br><span class="line">names = [<span class="string">"xiaoming"</span>, <span class="string">"xiaohong"</span>, <span class="string">"xiaoqiang"</span>]</span><br><span class="line">list(zip(numbers, names))</span><br></pre></td></tr></table></figure><pre><code>[(201901, &#39;xiaoming&#39;), (201902, &#39;xiaohong&#39;), (201903, &#39;xiaoqiang&#39;)]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> number, name <span class="keyword">in</span> zip(numbers, names):</span><br><span class="line">    print(number, name)</span><br></pre></td></tr></table></figure><pre><code>201901 xiaoming201902 xiaohong201903 xiaoqiang</code></pre><h2 id="4-3-字典"><a href="#4-3-字典" class="headerlink" title="4.3 字典"></a>4.3 字典</h2><h3 id="4-3-1-字典的表达"><a href="#4-3-1-字典的表达" class="headerlink" title="4.3.1 字典的表达"></a>4.3.1 字典的表达</h3><ul><li>映射类型：通过键值对来实现数据存储和查找</li><li>常规的字典是无序的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">students = &#123;<span class="number">201901</span>:<span class="string">"xiaoming"</span>, <span class="number">201902</span>:<span class="string">"xiaohong"</span>, <span class="number">201903</span>:<span class="string">"xiaoqiang"</span>&#125;</span><br><span class="line">students</span><br></pre></td></tr></table></figure><pre><code>{201901: &#39;xiaoming&#39;, 201902: &#39;xiaohong&#39;, 201903: &#39;xiaoqiang&#39;}</code></pre><p><strong>字典键的要求</strong></p><ul><li>字典的键不能重复</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">students = &#123;<span class="number">201901</span>:<span class="string">"xiaoming"</span>, <span class="number">201901</span>:<span class="string">"xiaohong"</span>, <span class="number">201903</span>:<span class="string">"xiaoqiang"</span>&#125;</span><br><span class="line">students</span><br></pre></td></tr></table></figure><pre><code>{201901: &#39;xiaohong&#39;, 201903: &#39;xiaoqiang&#39;}</code></pre><ul><li>字典的键必须是不可变类型，如果键可变，就找不到对应存储的值<ul><li>不可变类型：数字、字符串、元组，一旦确定，该类型元素无法更改</li><li>可变类型：列表、字典、集合</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d1 = &#123;<span class="number">1</span>:<span class="number">3</span>&#125;</span><br><span class="line">d2 = &#123;<span class="string">"s"</span>:<span class="number">3</span>&#125;</span><br><span class="line">d3 = &#123;(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>):<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;[<span class="number">1</span>, <span class="number">2</span>]:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&lt;ipython-input-48-305543aa9f7a&gt; in &lt;module&gt;----&gt; 1 d = {[1, 2]:3}TypeError: unhashable type: &#39;list&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#123;<span class="number">1</span>:<span class="number">2</span>&#125;:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&lt;ipython-input-49-0b066f326e9d&gt; in &lt;module&gt;----&gt; 1 d = {{1:2}:3}TypeError: unhashable type: &#39;dict&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&lt;ipython-input-50-80480360b4fe&gt; in &lt;module&gt;----&gt; 1 d = {{1,2}:3}TypeError: unhashable type: &#39;set&#39;</code></pre><h3 id="4-3-2-字典的性质"><a href="#4-3-2-字典的性质" class="headerlink" title="4.3.2 字典的性质"></a>4.3.2 字典的性质</h3><ul><li>字典的长度——键值对的个数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">students = &#123;<span class="number">201901</span>:<span class="string">'xiaoming'</span>, <span class="number">201902</span>:<span class="string">'xiaohong'</span>, <span class="number">201903</span>:<span class="string">'xiaoqiang'</span>&#125;</span><br><span class="line">len(students)</span><br></pre></td></tr></table></figure><pre><code>3</code></pre><ul><li>字典的索引<ul><li>通过<code>dict[key]</code>的形式来获取对应的值</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">students = &#123;<span class="number">201901</span>:<span class="string">'xiaoming'</span>, <span class="number">201902</span>:<span class="string">'xiaohong'</span>, <span class="number">201903</span>:<span class="string">'xiaoqiang'</span>&#125;</span><br><span class="line">students[<span class="number">201902</span>]</span><br></pre></td></tr></table></figure><pre><code>&#39;xiaohong&#39;</code></pre><h3 id="4-3-3-字典的操作方法"><a href="#4-3-3-字典的操作方法" class="headerlink" title="4.3.3 字典的操作方法"></a>4.3.3 字典的操作方法</h3><ol><li>增加键值对<ul><li><code>dict[newKey]=newValue</code></li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">students = &#123;<span class="number">201901</span>:<span class="string">'xiaoming'</span>, <span class="number">201902</span>:<span class="string">'xiaohong'</span>, <span class="number">201903</span>:<span class="string">'xiaoqiang'</span>&#125;</span><br><span class="line">students[<span class="number">201904</span>] = <span class="string">'xiaoxue'</span></span><br><span class="line">students</span><br></pre></td></tr></table></figure><pre><code>{201901: &#39;xiaoming&#39;, 201902: &#39;xiaohong&#39;, 201903: &#39;xiaoqiang&#39;, 201904: &#39;xiaoxue&#39;}</code></pre><ol><li>删除键值对<ul><li>通过<code>del dict[key]</code></li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">students = &#123;<span class="number">201901</span>:<span class="string">'xiaoming'</span>, <span class="number">201902</span>:<span class="string">'xiaohong'</span>, <span class="number">201903</span>:<span class="string">'xiaoqiang'</span>&#125;</span><br><span class="line"><span class="keyword">del</span> students[<span class="number">201903</span>]</span><br><span class="line">students</span><br></pre></td></tr></table></figure><pre><code>{201901: &#39;xiaoming&#39;, 201902: &#39;xiaohong&#39;}</code></pre><ul><li>通过<code>dict.pop(key)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">students = &#123;<span class="number">201901</span>:<span class="string">'xiaoming'</span>, <span class="number">201902</span>:<span class="string">'xiaohong'</span>, <span class="number">201903</span>:<span class="string">'xiaoqiang'</span>&#125;</span><br><span class="line">value = students.pop(<span class="number">201903</span>) <span class="comment"># 删除键值对，同时获得删除键值对的值</span></span><br><span class="line">print(value)</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure><pre><code>xiaoqiang{201901: &#39;xiaoming&#39;, 201902: &#39;xiaohong&#39;}</code></pre><ul><li><code>dict.popitem()</code>随机删除一个键值对，并以元组返回删除的键值对</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">students = &#123;<span class="number">201901</span>:<span class="string">'xiaoming'</span>, <span class="number">201902</span>:<span class="string">'xiaohong'</span>, <span class="number">201903</span>:<span class="string">'xiaoqiang'</span>&#125;</span><br><span class="line">key, value = students.popitem()</span><br><span class="line">print(key, value)</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure><pre><code>201903 xiaoqiang{201901: &#39;xiaoming&#39;, 201902: &#39;xiaohong&#39;}</code></pre><ol><li>修改值<ul><li>通过先索引后赋值的方式对相应的值进行修改</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">students = &#123;<span class="number">201901</span>:<span class="string">'xiaoming'</span>, <span class="number">201902</span>:<span class="string">'xiaohong'</span>, <span class="number">201903</span>:<span class="string">'xiaoqiang'</span>&#125;</span><br><span class="line">students[<span class="number">201902</span>] = <span class="string">'xiaoxue'</span></span><br><span class="line">students</span><br></pre></td></tr></table></figure><pre><code>{201901: &#39;xiaoming&#39;, 201902: &#39;xiaoxue&#39;, 201903: &#39;xiaoqiang&#39;}</code></pre><ol><li><code>d.get()</code><ul><li><code>d.get(key,default)</code>从字典d中获取键key对应的值，如果没有这个键，则返回default</li></ul></li></ol><p><strong>示例：统计“牛奶奶找刘奶奶买牛奶”中字符的出现频率</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"牛奶奶找刘奶奶买牛奶"</span></span><br><span class="line">d = &#123;&#125;</span><br><span class="line">print(d)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    d[i] = d.get(i, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    print(d)</span><br></pre></td></tr></table></figure><pre><code>{}{&#39;牛&#39;: 1}{&#39;牛&#39;: 1, &#39;奶&#39;: 1}{&#39;牛&#39;: 1, &#39;奶&#39;: 2}{&#39;牛&#39;: 1, &#39;奶&#39;: 2, &#39;找&#39;: 1}{&#39;牛&#39;: 1, &#39;奶&#39;: 2, &#39;找&#39;: 1, &#39;刘&#39;: 1}{&#39;牛&#39;: 1, &#39;奶&#39;: 3, &#39;找&#39;: 1, &#39;刘&#39;: 1}{&#39;牛&#39;: 1, &#39;奶&#39;: 4, &#39;找&#39;: 1, &#39;刘&#39;: 1}{&#39;牛&#39;: 1, &#39;奶&#39;: 4, &#39;找&#39;: 1, &#39;刘&#39;: 1, &#39;买&#39;: 1}{&#39;牛&#39;: 2, &#39;奶&#39;: 4, &#39;找&#39;: 1, &#39;刘&#39;: 1, &#39;买&#39;: 1}{&#39;牛&#39;: 2, &#39;奶&#39;: 5, &#39;找&#39;: 1, &#39;刘&#39;: 1, &#39;买&#39;: 1}</code></pre><ol><li><code>d.keys()</code>和<code>d.values()</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">students = &#123;<span class="number">201901</span>:<span class="string">'xiaoming'</span>, <span class="number">201902</span>:<span class="string">'xiaohong'</span>, <span class="number">201903</span>:<span class="string">'xiaoqiang'</span>&#125;</span><br><span class="line">print(list(students.keys()))</span><br><span class="line">print(list(students.values()))</span><br></pre></td></tr></table></figure><pre><code>[201901, 201902, 201903][&#39;xiaoming&#39;, &#39;xiaohong&#39;, &#39;xiaoqiang&#39;]</code></pre><ol><li><code>d.items()</code>及字典的遍历</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(list(students.items()))</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> students.items():</span><br><span class="line">    print(k, v)</span><br></pre></td></tr></table></figure><pre><code>[(201901, &#39;xiaoming&#39;), (201902, &#39;xiaohong&#39;), (201903, &#39;xiaoqiang&#39;)]201901 xiaoming201902 xiaohong201903 xiaoqiang</code></pre><h2 id="4-4-集合"><a href="#4-4-集合" class="headerlink" title="4.4 集合"></a>4.4 集合</h2><h3 id="4-4-1-集合的表达"><a href="#4-4-1-集合的表达" class="headerlink" title="4.4.1 集合的表达"></a>4.4.1 集合的表达</h3><ul><li>一系列<strong>互不相等元素的无序集合</strong></li><li>元素必须是不可变类型：数字，字符串或元组，可视作字典的键</li><li>可以看作是没有值，或者值为None的字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">students = &#123;<span class="string">'xiaoming'</span>, <span class="string">'xiaohong'</span>, <span class="string">'xiaoqiang'</span>, <span class="string">'xiaoming'</span>&#125; <span class="comment"># 可用于去重</span></span><br><span class="line">students</span><br></pre></td></tr></table></figure><pre><code>{&#39;xiaohong&#39;, &#39;xiaoming&#39;, &#39;xiaoqiang&#39;}</code></pre><h3 id="4-4-2-集合的运算"><a href="#4-4-2-集合的运算" class="headerlink" title="4.4.2 集合的运算"></a>4.4.2 集合的运算</h3><p><strong>示例：通过集合进行交集并集的运算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Chinese_A = &#123;<span class="string">"刘德华"</span>, <span class="string">"张学友"</span>, <span class="string">"张曼玉"</span>, <span class="string">"钟楚红"</span>, <span class="string">"古天乐"</span>, <span class="string">"林青霞"</span>&#125;</span><br><span class="line">Chinese_A</span><br></pre></td></tr></table></figure><pre><code>{&#39;刘德华&#39;, &#39;古天乐&#39;, &#39;张学友&#39;, &#39;张曼玉&#39;, &#39;林青霞&#39;, &#39;钟楚红&#39;}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math_A = &#123;<span class="string">"林青霞"</span>, <span class="string">"郭富城"</span>, <span class="string">"王祖贤"</span>, <span class="string">"刘德华"</span>, <span class="string">"张曼玉"</span>, <span class="string">"黎明"</span>&#125;</span><br><span class="line">Math_A</span><br></pre></td></tr></table></figure><pre><code>{&#39;刘德华&#39;, &#39;张曼玉&#39;, &#39;林青霞&#39;, &#39;王祖贤&#39;, &#39;郭富城&#39;, &#39;黎明&#39;}</code></pre><ul><li>语文和数学两门均为A的学员</li><li>S &amp; T返回一个新集合，包括同时在集合S和T中的元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Chinese_A &amp; Math_A</span><br></pre></td></tr></table></figure><pre><code>{&#39;刘德华&#39;, &#39;张曼玉&#39;, &#39;林青霞&#39;}</code></pre><ul><li>语文或数学至少一门为A的学员</li><li>S | T返回一个新集合，包括集合S和T中的所有元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Chinese_A | Math_A</span><br></pre></td></tr></table></figure><pre><code>{&#39;刘德华&#39;, &#39;古天乐&#39;, &#39;张学友&#39;, &#39;张曼玉&#39;, &#39;林青霞&#39;, &#39;王祖贤&#39;, &#39;郭富城&#39;, &#39;钟楚红&#39;, &#39;黎明&#39;}</code></pre><ul><li>语文数学只有一门为A的学员</li><li>S ^ T返回一个新集合，包括在集合S和T中的非共同元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Chinese_A ^ Math_A</span><br></pre></td></tr></table></figure><pre><code>{&#39;古天乐&#39;, &#39;张学友&#39;, &#39;王祖贤&#39;, &#39;郭富城&#39;, &#39;钟楚红&#39;, &#39;黎明&#39;}</code></pre><ul><li>语文为A，数学不为A的学员</li><li>S - T返回一个新集合，包括在集合S但不在集合T中的元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Chinese_A - Math_A</span><br></pre></td></tr></table></figure><pre><code>{&#39;古天乐&#39;, &#39;张学友&#39;, &#39;钟楚红&#39;}</code></pre><ul><li>数学为A，语文不为A的学员</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math_A - Chinese_A</span><br></pre></td></tr></table></figure><pre><code>{&#39;王祖贤&#39;, &#39;郭富城&#39;, &#39;黎明&#39;}</code></pre><h3 id="4-4-3-集合的操作方法"><a href="#4-4-3-集合的操作方法" class="headerlink" title="4.4.3 集合的操作方法"></a>4.4.3 集合的操作方法</h3><ul><li>增加元素——<code>set.add(x)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stars = &#123;<span class="string">"liudehua"</span>, <span class="string">"zhangxueyou"</span>, <span class="string">"zhangmanyu"</span>&#125;</span><br><span class="line">stars.add(<span class="string">"wangzuxian"</span>)</span><br><span class="line">stars</span><br></pre></td></tr></table></figure><pre><code>{&#39;liudehua&#39;, &#39;wangzuxian&#39;, &#39;zhangmanyu&#39;, &#39;zhangxueyou&#39;}</code></pre><ul><li>移除元素——<code>set.remove(x)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(stars)</span><br><span class="line">stars.remove(<span class="string">"wangzuxian"</span>)</span><br><span class="line">print(stars)</span><br></pre></td></tr></table></figure><pre><code>{&#39;liudehua&#39;, &#39;zhangmanyu&#39;, &#39;zhangxueyou&#39;, &#39;wangzuxian&#39;}{&#39;liudehua&#39;, &#39;zhangmanyu&#39;, &#39;zhangxueyou&#39;}</code></pre><ul><li>集合的长度——<code>len(set)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len(stars)</span><br></pre></td></tr></table></figure><pre><code>3</code></pre><ul><li>集合的遍历——借助for循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> star <span class="keyword">in</span> stars:</span><br><span class="line">    print(star)</span><br></pre></td></tr></table></figure><pre><code>liudehuazhangmanyuzhangxueyou</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础3(基本数据类型)</title>
      <link href="/2020/08/06/deepshare_python%E5%9F%BA%E7%A1%803/"/>
      <url>/2020/08/06/deepshare_python%E5%9F%BA%E7%A1%803/</url>
      
        <content type="html"><![CDATA[<h1 id="第一部分-数字类型"><a href="#第一部分-数字类型" class="headerlink" title="第一部分 数字类型"></a>第一部分 数字类型</h1><h2 id="1-1-数字类型的组成"><a href="#1-1-数字类型的组成" class="headerlink" title="1.1 数字类型的组成"></a>1.1 数字类型的组成</h2><h3 id="1-1-1-整数——不同进制的转换"><a href="#1-1-1-整数——不同进制的转换" class="headerlink" title="1.1.1 整数——不同进制的转换"></a>1.1.1 整数——不同进制的转换</h3><ul><li>默认输入十进制</li><li>二进制0b、八进制0o、十六进制0x</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span> == <span class="number">0b10000</span> == <span class="number">0o20</span> == <span class="number">0x10</span></span><br></pre></td></tr></table></figure><pre><code>True</code></pre><ul><li>十进制与其他进制的转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = bin(<span class="number">16</span>) <span class="comment"># 转二进制</span></span><br><span class="line">b = oct(<span class="number">16</span>) <span class="comment"># 转八进制</span></span><br><span class="line">c = hex(<span class="number">16</span>) <span class="comment"># 转十六进制</span></span><br><span class="line">print(a, b, c)</span><br></pre></td></tr></table></figure><pre><code>0b10000 0o20 0x10</code></pre><p>==注意：上述转换后的结果为字符串类型==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a == b == c</span><br><span class="line">print(<span class="string">"-------分割线-------"</span>)</span><br><span class="line">print(type(a), type(b), type(c))</span><br><span class="line">print(<span class="string">"-------分割线-------"</span>)</span><br><span class="line">print(eval(a) == eval(b) == eval(c))</span><br><span class="line">print(type(a), type(eval(a)))</span><br></pre></td></tr></table></figure><pre><code>-------分割线-------&lt;class &#39;str&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;str&#39;&gt;-------分割线-------True&lt;class &#39;str&#39;&gt; &lt;class &#39;int&#39;&gt;</code></pre><ul><li>其他进制转十进制</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = int(a, <span class="number">2</span>) <span class="comment"># 二进制转十进制</span></span><br><span class="line">e = int(b, <span class="number">8</span>) <span class="comment"># 八进制转十进制</span></span><br><span class="line">f = int(c, <span class="number">16</span>) <span class="comment"># 十六进制转十进制</span></span><br><span class="line">print(d, e, f)</span><br></pre></td></tr></table></figure><pre><code>16 16 16</code></pre><h3 id="1-1-2-浮点数——不确定性"><a href="#1-1-2-浮点数——不确定性" class="headerlink" title="1.1.2 浮点数——不确定性"></a>1.1.2 浮点数——不确定性</h3><ul><li>不确定小数问题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0.1</span>+<span class="number">0.2</span>) == <span class="number">0.3</span></span><br></pre></td></tr></table></figure><pre><code>False</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span>+<span class="number">0.2</span></span><br></pre></td></tr></table></figure><pre><code>0.30000000000000004</code></pre><p><strong>计算机采用二进制小数来表示浮点数的小数部分</strong></p><ul><li><p>但部分小数不能用二进制小数完全表示</p></li><li><p>四舍五入获得精确解</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3</span> * <span class="number">0.1</span></span><br><span class="line">print(a)</span><br><span class="line">print(<span class="string">"-----------分割线-----------"</span>)</span><br><span class="line">b = round(a, <span class="number">1</span>) <span class="comment"># 1表示保留的小数位数</span></span><br><span class="line">print(b, b == <span class="number">0.3</span>)</span><br></pre></td></tr></table></figure><pre><code>0.30000000000000004-----------分割线-----------0.3 True</code></pre><h3 id="1-1-3-复数——a-bj"><a href="#1-1-3-复数——a-bj" class="headerlink" title="1.1.3 复数——a+bj"></a>1.1.3 复数——a+bj</h3><ul><li>大写J或小写j均可</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(type(<span class="number">3</span>+<span class="number">4j</span>))</span><br><span class="line">print(type(<span class="number">2</span>+<span class="number">5J</span>))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;complex&#39;&gt;&lt;class &#39;complex&#39;&gt;</code></pre><ul><li>虚部系数为1时，需要显式写出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2+j 会报错</span></span><br><span class="line"><span class="number">2</span> + <span class="number">1j</span></span><br></pre></td></tr></table></figure><pre><code>(2+1j)</code></pre><h2 id="1-2-数字运算操作符（a操作符b）"><a href="#1-2-数字运算操作符（a操作符b）" class="headerlink" title="1.2 数字运算操作符（a操作符b）"></a>1.2 数字运算操作符（a操作符b）</h2><ul><li>加减乘除 <code>+ - * /</code></li><li>乘方运算<code>**</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>**<span class="number">3</span></span><br></pre></td></tr></table></figure><pre><code>8</code></pre><ul><li>整数商<code>//</code>和取余数<code>%</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">13</span>//<span class="number">5</span>)</span><br><span class="line">print(<span class="number">13</span>%<span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>23</code></pre><p><strong>几点说明</strong></p><ul><li>整数与浮点数运算结果是浮点数</li><li>除法运算的结果是浮点数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span>/<span class="number">4</span></span><br></pre></td></tr></table></figure><pre><code>2.0</code></pre><h2 id="1-3-数字运算操作函数function-x-…"><a href="#1-3-数字运算操作函数function-x-…" class="headerlink" title="1.3 数字运算操作函数function(x,…)"></a>1.3 数字运算操作函数function(x,…)</h2><ul><li>求绝对值<code>abs()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abs(<span class="number">-5</span>)</span><br></pre></td></tr></table></figure><pre><code>5</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abs(<span class="number">3</span>+<span class="number">4j</span>)</span><br></pre></td></tr></table></figure><pre><code>5.0</code></pre><ul><li>幂次方<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pow(x,n,t) <span class="comment"># x^n % t</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pow(<span class="number">2</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>32</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pow(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>2</code></pre><ul><li>四舍五入<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">round(x,n) <span class="comment"># 参数n表示保留n位小数</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1.618</span></span><br><span class="line">print(round(a)) <span class="comment"># 默认四舍五入为整数</span></span><br><span class="line">print(round(a, <span class="number">2</span>))</span><br><span class="line">print(round(a, <span class="number">5</span>)) <span class="comment"># 位数不足，不会补齐</span></span><br></pre></td></tr></table></figure><pre><code>21.621.618</code></pre><ul><li>整数商和取余<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">divmod(x,y)</span><br></pre></td></tr></table></figure></li><li>等价于返回二元元组(x//y, x%y)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">divmod(<span class="number">13</span>, <span class="number">5</span>) <span class="comment"># 较(x//y, x%y)更快，只执行了一次x/y</span></span><br></pre></td></tr></table></figure><pre><code>(2, 3)</code></pre><ul><li>序列最大/最小值max()，min()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">print(<span class="string">"max:"</span>, max(a))</span><br><span class="line">print(<span class="string">"min:"</span>, min(a))</span><br></pre></td></tr></table></figure><pre><code>max: 9min: 2</code></pre><ul><li>求和sum(x)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure><pre><code>15</code></pre><ul><li>借助科学计算库math\scipy\numpy</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">print(math.exp(<span class="number">1</span>)) <span class="comment"># 指数运算e^x</span></span><br><span class="line">print(math.log2(<span class="number">2</span>)) <span class="comment"># 对数运算</span></span><br><span class="line">print(math.sqrt(<span class="number">4</span>)) <span class="comment"># 开平方运算</span></span><br></pre></td></tr></table></figure><pre><code>2.7182818284590451.02.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">print(np.mean(a)) <span class="comment"># 求均值</span></span><br><span class="line">print(np.median(a)) <span class="comment"># 求中位数</span></span><br><span class="line">print(np.std(a)) <span class="comment"># 求标准差</span></span><br></pre></td></tr></table></figure><pre><code>3.03.01.4142135623730951</code></pre><h1 id="第二部分-字符串类型"><a href="#第二部分-字符串类型" class="headerlink" title="第二部分 字符串类型"></a>第二部分 字符串类型</h1><h2 id="2-1-字符串的表达"><a href="#2-1-字符串的表达" class="headerlink" title="2.1 字符串的表达"></a>2.1 字符串的表达</h2><ul><li>用<code>&quot;&quot;</code>或<code>&#39;&#39;</code>括起来表示字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Python"</span>)</span><br><span class="line">print(<span class="string">'Python'</span>)</span><br></pre></td></tr></table></figure><pre><code>PythonPython</code></pre><ul><li>字符串中有双引号或单引号的情况</li></ul><p><strong>双中有单</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"I'm 18 years old"</span>)</span><br></pre></td></tr></table></figure><pre><code>I&#39;m 18 years old</code></pre><p><strong>单中有双</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'"Python" is good'</span>)</span><br></pre></td></tr></table></figure><pre><code>&quot;Python&quot; is good</code></pre><p><strong>双中有双，单中有单——用转义符\</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"\"Python\" is good"</span>)</span><br></pre></td></tr></table></figure><pre><code>&quot;Python&quot; is good</code></pre><p><strong>转义符可以用来换行输入</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"py\</span></span><br><span class="line"><span class="string">thon"</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><pre><code>python</code></pre><h2 id="2-2-字符串的性质"><a href="#2-2-字符串的性质" class="headerlink" title="2.2 字符串的性质"></a>2.2 字符串的性质</h2><h3 id="2-2-1-字符串的索引"><a href="#2-2-1-字符串的索引" class="headerlink" title="2.2.1 字符串的索引"></a>2.2.1 字符串的索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"My name is Peppa Pig"</span></span><br></pre></td></tr></table></figure><p><strong>变量名[位置编号]</strong></p><ul><li>正向索引——从零开始递增</li><li>位置编号不能超过字符串的长度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(s[<span class="number">0</span>])</span><br><span class="line">print(s[<span class="number">2</span>])</span><br><span class="line">print(s[<span class="number">5</span>])</span><br></pre></td></tr></table></figure><pre><code>Mm</code></pre><ul><li>反向索引——从-1开始递减</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(s[<span class="number">-1</span>])</span><br><span class="line">print(s[<span class="number">-3</span>])</span><br><span class="line">print(s[<span class="number">-5</span>])</span><br></pre></td></tr></table></figure><pre><code>gPa</code></pre><p><strong>索引只能获得一个字符，如何获得多个字符？</strong></p><h3 id="2-2-2-字符串的切片"><a href="#2-2-2-字符串的切片" class="headerlink" title="2.2.2 字符串的切片"></a>2.2.2 字符串的切片</h3><p><strong>变量名[start:end:间隔]</strong></p><ul><li>切片间隔默认为1，可省略</li><li>切片范围不包含end</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Python"</span></span><br><span class="line">print(s[<span class="number">0</span>:<span class="number">3</span>:<span class="number">1</span>])</span><br><span class="line">print(s[<span class="number">0</span>:<span class="number">3</span>:<span class="number">2</span>])</span><br><span class="line">print(s[<span class="number">0</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><pre><code>PytPtPyt</code></pre><ul><li>起始位置是0可以省略</li><li>结束位置省略，代表取到最后一个字符</li><li>可以使用反向索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Python"</span></span><br><span class="line">print(s[<span class="number">0</span>:<span class="number">6</span>])</span><br><span class="line">print(s[:<span class="number">6</span>])</span><br><span class="line">print(s[:])</span><br><span class="line">print(s[<span class="number">-6</span>:])</span><br></pre></td></tr></table></figure><pre><code>PythonPythonPythonPython</code></pre><p><strong>反向切片<code>str[::-1]</code></strong></p><ul><li>起始位置是-1可以省略</li><li>结束位置省略，代表取到第一个字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"123456789"</span></span><br><span class="line">print(s[<span class="number">-3</span>:<span class="number">-10</span>:<span class="number">-1</span>])</span><br><span class="line">print(s)</span><br><span class="line">print(s[<span class="number">-1</span>:<span class="number">-10</span>])</span><br><span class="line">print(s[:<span class="number">-10</span>:<span class="number">-1</span>])</span><br><span class="line">print(s[::<span class="number">-1</span>])</span><br><span class="line">print(s[<span class="number">0</span>:<span class="number">5</span>:<span class="number">-1</span>]) <span class="comment"># 注：start+interval是往end方向才有正常输出</span></span><br><span class="line">print(<span class="string">"-------------"</span>)</span><br></pre></td></tr></table></figure><pre><code>7654321123456789987654321987654321-------------</code></pre><h2 id="2-3-字符串操作符"><a href="#2-3-字符串操作符" class="headerlink" title="2.3 字符串操作符"></a>2.3 字符串操作符</h2><h3 id="2-3-1-字符串的拼接"><a href="#2-3-1-字符串的拼接" class="headerlink" title="2.3.1 字符串的拼接"></a>2.3.1 字符串的拼接</h3><ul><li>字符串1+字符串2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"I love "</span></span><br><span class="line">b = <span class="string">"my girlfriend "</span></span><br><span class="line">a + b</span><br></pre></td></tr></table></figure><pre><code>&#39;I love my girlfriend &#39;</code></pre><h3 id="2-3-2-字符串的成倍复制"><a href="#2-3-2-字符串的成倍复制" class="headerlink" title="2.3.2 字符串的成倍复制"></a>2.3.2 字符串的成倍复制</h3><ul><li><code>字符串*n, n*字符串</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c = a + b</span><br><span class="line">print(c * <span class="number">3</span>)</span><br><span class="line">print(<span class="number">3</span> * c)</span><br></pre></td></tr></table></figure><pre><code>I love my girlfriend I love my girlfriend I love my girlfriend I love my girlfriend I love my girlfriend I love my girlfriend </code></pre><h3 id="2-3-3-成员运算"><a href="#2-3-3-成员运算" class="headerlink" title="2.3.3 成员运算"></a>2.3.3 成员运算</h3><ul><li>子集in全集，判断子集是否在全集中（任何一个连续的切片都是原字符串的子集）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">folk_singers = <span class="string">"Peter, Paul and Mary"</span></span><br><span class="line"><span class="string">"Peter"</span> <span class="keyword">in</span> folk_singers</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><ul><li>遍历字符串字符<code>for 字符 in 字符串</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="string">"Python"</span>:</span><br><span class="line">    print(s)</span><br></pre></td></tr></table></figure><pre><code>Python</code></pre><h2 id="2-4-字符串处理函数"><a href="#2-4-字符串处理函数" class="headerlink" title="2.4 字符串处理函数"></a>2.4 字符串处理函数</h2><h3 id="2-4-1-字符串的长度"><a href="#2-4-1-字符串的长度" class="headerlink" title="2.4.1 字符串的长度"></a>2.4.1 字符串的长度</h3><ul><li>所含字符的个数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"python"</span></span><br><span class="line">len(s)</span><br></pre></td></tr></table></figure><pre><code>6</code></pre><h3 id="2-4-2-字符编码"><a href="#2-4-2-字符编码" class="headerlink" title="2.4.2 字符编码"></a>2.4.2 字符编码</h3><p><strong>将中文字符，英文字母，数字，特殊字符等转化成计算机可识别的二进制数</strong></p><ul><li>每个单一字符对应一个唯一且不重复的二进制编码</li><li>Python中使用的是Unicode编码</li></ul><p><strong>将字符转化为Unicode码——ord(字符)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(ord(<span class="string">"1"</span>))</span><br><span class="line">print(ord(<span class="string">"a"</span>))</span><br><span class="line">print(ord(<span class="string">"*"</span>))</span><br><span class="line">print(ord(<span class="string">"国"</span>))</span><br></pre></td></tr></table></figure><pre><code>49974222269</code></pre><p><strong>将Unicode码转化为字符——chr(Unicode码)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(chr(<span class="number">1010</span>))</span><br><span class="line">print(chr(<span class="number">49</span>))</span><br><span class="line">print(chr(<span class="number">22269</span>))</span><br></pre></td></tr></table></figure><pre><code>ϲ1国</code></pre><h2 id="2-5-字符串的处理方法"><a href="#2-5-字符串的处理方法" class="headerlink" title="2.5 字符串的处理方法"></a>2.5 字符串的处理方法</h2><h3 id="2-5-1-字符串的分割——str-split-分割字符"><a href="#2-5-1-字符串的分割——str-split-分割字符" class="headerlink" title="2.5.1 字符串的分割——str.split(分割字符)"></a>2.5.1 字符串的分割——str.split(分割字符)</h3><ul><li>返回一个列表</li><li>原字符串不变</li></ul><p><strong>上述特性适合以下所有字符串处理方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">languages = <span class="string">"Python C C++ Java PHP R"</span></span><br><span class="line">languages_list = languages.split(<span class="string">" "</span>)</span><br><span class="line">languages_list2 = languages.split(<span class="string">"C"</span>)</span><br><span class="line">print(languages_list)</span><br><span class="line">print(languages_list2)</span><br><span class="line">print(languages)</span><br></pre></td></tr></table></figure><pre><code>[&#39;Python&#39;, &#39;C&#39;, &#39;C++&#39;, &#39;Java&#39;, &#39;PHP&#39;, &#39;R&#39;][&#39;Python &#39;, &#39; &#39;, &#39;++ Java PHP R&#39;]Python C C++ Java PHP R</code></pre><h3 id="2-5-2-字符串的聚合——-quot-聚合字符-quot-join-可迭代数据类型"><a href="#2-5-2-字符串的聚合——-quot-聚合字符-quot-join-可迭代数据类型" class="headerlink" title="2.5.2 字符串的聚合——&quot;聚合字符&quot;.join(可迭代数据类型)"></a>2.5.2 字符串的聚合——<code>&quot;聚合字符&quot;.join(可迭代数据类型)</code></h3><ul><li>可迭代类型如:字符串、列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"12345"</span></span><br><span class="line">s_join = <span class="string">","</span>.join(s)</span><br><span class="line">s_join</span><br></pre></td></tr></table></figure><pre><code>&#39;1,2,3,4,5&#39;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># s = [1,2,3,4,5] 列表中元素必须是字符才可聚合</span></span><br><span class="line">s = [<span class="string">"13"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>]</span><br><span class="line"><span class="string">"*"</span>.join(s)</span><br></pre></td></tr></table></figure><pre><code>&#39;13*2*3*4*5&#39;</code></pre><h3 id="2-5-3-删除两端特定字符——str-strip-要删除的字符"><a href="#2-5-3-删除两端特定字符——str-strip-要删除的字符" class="headerlink" title="2.5.3 删除两端特定字符——str.strip(要删除的字符)"></a>2.5.3 删除两端特定字符——<code>str.strip(要删除的字符)</code></h3><ul><li>strip从两端开始搜索，遇到指定字符执行删除操作，遇到非指定字符则搜索停止</li><li>类似的还有左删除<code>lstrip</code>和右删除<code>rstrip</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"       I have many blands       "</span></span><br><span class="line">print(s.strip(<span class="string">" "</span>))</span><br><span class="line">print(s.lstrip(<span class="string">" "</span>))</span><br><span class="line">print(s.rstrip(<span class="string">" "</span>))</span><br></pre></td></tr></table></figure><pre><code>I have many blandsI have many blands              I have many blands</code></pre><h3 id="2-5-4-字符串的替换——str-replace-quot-被替换-quot-quot-替换成-quot"><a href="#2-5-4-字符串的替换——str-replace-quot-被替换-quot-quot-替换成-quot" class="headerlink" title="2.5.4 字符串的替换——str.replace(&quot;被替换&quot;,&quot;替换成&quot;)"></a>2.5.4 字符串的替换——<code>str.replace(&quot;被替换&quot;,&quot;替换成&quot;)</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Python is coming"</span></span><br><span class="line">s1 = s.replace(<span class="string">"Python"</span>,<span class="string">"Py"</span>)</span><br><span class="line">print(s)</span><br><span class="line">print(s1)</span><br></pre></td></tr></table></figure><pre><code>Python is comingPy is coming</code></pre><h3 id="2-5-5-字符串统计——str-count-quot-待统计字符串-quot"><a href="#2-5-5-字符串统计——str-count-quot-待统计字符串-quot" class="headerlink" title="2.5.5 字符串统计——str.count(&quot;待统计字符串&quot;)"></a>2.5.5 字符串统计——<code>str.count(&quot;待统计字符串&quot;)</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Python is an excellent language"</span></span><br><span class="line">print(<span class="string">"an:"</span>, s.count(<span class="string">"an"</span>))</span><br><span class="line">print(<span class="string">"e:"</span>, s.count(<span class="string">"e"</span>))</span><br></pre></td></tr></table></figure><pre><code>an: 2e: 4</code></pre><h3 id="2-5-6-字符串字母大小写"><a href="#2-5-6-字符串字母大小写" class="headerlink" title="2.5.6 字符串字母大小写"></a>2.5.6 字符串字母大小写</h3><ul><li><code>str.upper()# 字母全部大写</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Python"</span></span><br><span class="line">print(s.upper())</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><pre><code>PYTHONPython</code></pre><ul><li><code>str.lower()# 字母全部小写</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.lower()</span><br></pre></td></tr></table></figure><pre><code>&#39;python&#39;</code></pre><ul><li><code>str.title()# 首字母大写</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"PYTHON"</span></span><br><span class="line">s.title()</span><br></pre></td></tr></table></figure><pre><code>&#39;Python&#39;</code></pre><h1 id="第三部分-布尔类型-True-or-False"><a href="#第三部分-布尔类型-True-or-False" class="headerlink" title="第三部分 布尔类型 True or False"></a>第三部分 布尔类型 True or False</h1><h2 id="3-1-逻辑运算的结果"><a href="#3-1-逻辑运算的结果" class="headerlink" title="3.1 逻辑运算的结果"></a>3.1 逻辑运算的结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span> </span><br><span class="line">print(a &gt; <span class="number">8</span>)</span><br><span class="line">print(a == <span class="number">12</span>)</span><br><span class="line">print(a &lt; <span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>TrueFalseFalse</code></pre><ul><li><code>any(),all()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(any([<span class="literal">False</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="literal">None</span>]))</span><br><span class="line">print(all([<span class="literal">False</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="literal">None</span>]))</span><br></pre></td></tr></table></figure><pre><code>TrueFalse</code></pre><h2 id="3-2-指示条件"><a href="#3-2-指示条件" class="headerlink" title="3.2 指示条件"></a>3.2 指示条件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">2800</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    m = eval(input(<span class="string">"请输入一个正整数："</span>))</span><br><span class="line">    <span class="keyword">if</span> m == n:</span><br><span class="line">        print(<span class="string">"bingo!"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> m &gt; n:</span><br><span class="line">        print(<span class="string">"Too big"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Too small"</span>)</span><br></pre></td></tr></table></figure><pre><code>请输入一个正整数：28Too small请输入一个正整数：5000Too big请输入一个正整数：2800bingo!</code></pre><h2 id="3-3-作为掩码"><a href="#3-3-作为掩码" class="headerlink" title="3.3 作为掩码"></a>3.3 作为掩码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>])</span><br><span class="line">print(x &gt; <span class="number">3</span>)</span><br><span class="line">print(x[x &gt; <span class="number">3</span>])</span><br></pre></td></tr></table></figure><pre><code>[False False False  True  True][5 7]</code></pre><h1 id="第四部分-类型判别及类型转换"><a href="#第四部分-类型判别及类型转换" class="headerlink" title="第四部分 类型判别及类型转换"></a>第四部分 类型判别及类型转换</h1><h2 id="4-1-类型判别"><a href="#4-1-类型判别" class="headerlink" title="4.1 类型判别"></a>4.1 类型判别</h2><ul><li>type(变量)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span> </span><br><span class="line">name = <span class="string">"Ada"</span></span><br><span class="line">print(type(age))</span><br><span class="line">print(type(name))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;int&#39;&gt;&lt;class &#39;str&#39;&gt;</code></pre><ul><li>isinstance(object, class)，<strong>承认继承关系</strong></li><li>变量类型是预判类型的子类型即为真，否则为假</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(isinstance(age, int))</span><br><span class="line">print(isinstance(age, object))</span><br><span class="line">print(isinstance(name, object)) <span class="comment"># object是老祖宗</span></span><br></pre></td></tr></table></figure><pre><code>TrueTrueTrue</code></pre><ul><li>字符串检查方法</li></ul><figure class="highlight plain"><figcaption><span>字符是否只由数字组成```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">age &#x3D; &quot;20&quot;</span><br><span class="line">name &#x3D; &quot;Ada&quot;</span><br><span class="line">print(age.isdigit())</span><br><span class="line">print(name.isdigit())</span><br></pre></td></tr></table></figure><pre><code>TrueFalse</code></pre><figure class="highlight plain"><figcaption><span>字符是否只由字母组成```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">name.isalpha()</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight plain"><figcaption><span>字符是否只由数字和字母组成```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">&quot;Ada20&quot;.isalnum() # 比如可用于判断用户名是否合法</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><h2 id="4-2-类型转换"><a href="#4-2-类型转换" class="headerlink" title="4.2 类型转换"></a>4.2 类型转换</h2><ul><li>数字类型转字符串<code>str(数字类型)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line">print(<span class="string">"My age is "</span> + str(age))</span><br></pre></td></tr></table></figure><pre><code>My age is 20</code></pre><ul><li>仅有数字组成的字符串转数字<code>int(),float(),eval()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">"20"</span></span><br><span class="line">s2 = <span class="string">"10.1"</span></span><br><span class="line">print(int(s1))</span><br><span class="line"><span class="comment">#print(int(s2))</span></span><br><span class="line">print(float(s2))</span><br><span class="line">print(eval(s1))</span><br></pre></td></tr></table></figure><pre><code>2010.120</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础2(基本语法元素)</title>
      <link href="/2020/08/06/deepshare_python%E5%9F%BA%E7%A1%802/"/>
      <url>/2020/08/06/deepshare_python%E5%9F%BA%E7%A1%802/</url>
      
        <content type="html"><![CDATA[<p><strong>高级语言：</strong></p><ul><li>按执行方式：<ul><li>编译型：整个代码一次性进行翻译，执行时是一个整体在执行</li><li>解释型：执行时是一句一句在执行</li></ul></li><li>按类型声明：<ul><li>动态语言：变量可以随时定义随时用，不需要事先声明其是什么类型</li><li>静态语言：需要事先声明该变量是什么类型</li></ul></li></ul><p><strong>python属于解释型、动态语言，所以相比执行起来比较慢</strong></p><h1 id="第一部分-数据类型"><a href="#第一部分-数据类型" class="headerlink" title="第一部分 数据类型"></a>第一部分 数据类型</h1><h2 id="1-基本类型：数字、字符串、布尔"><a href="#1-基本类型：数字、字符串、布尔" class="headerlink" title="1.基本类型：数字、字符串、布尔"></a>1.基本类型：数字、字符串、布尔</h2><h3 id="1-1-数字类型"><a href="#1-1-数字类型" class="headerlink" title="1.1 数字类型"></a>1.1 数字类型</h3><ul><li>int整型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(type(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;int&#39;&gt;</code></pre><ul><li>float浮点型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(type(<span class="number">2.0</span>))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;float&#39;&gt;</code></pre><ul><li>complex复数，a+bj</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(type(<span class="number">3</span>+<span class="number">4j</span>))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;complex&#39;&gt;</code></pre><h3 id="1-2-字符串类型"><a href="#1-2-字符串类型" class="headerlink" title="1.2 字符串类型"></a>1.2 字符串类型</h3><ul><li>str字符串，视作文本</li><li>组成：由数字、字母、空格、其他字符等组合而成</li><li>表达：用””或’’</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(type(<span class="string">"python 123 @#$^&amp;(())"</span>))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;str&#39;&gt;</code></pre><h3 id="1-3-布尔类型"><a href="#1-3-布尔类型" class="headerlink" title="1.3 布尔类型"></a>1.3 布尔类型</h3><ul><li>bool布尔类型</li><li>主要用于逻辑运算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y = <span class="number">2</span> &gt; <span class="number">1</span></span><br><span class="line">print(y,type(y))</span><br></pre></td></tr></table></figure><pre><code>True &lt;class &#39;bool&#39;&gt;</code></pre><p><strong>上述类型均可定义单个数据，如果有一组数据，该如何表示？</strong></p><h2 id="2-组合类型：列表、元组、字典、集合"><a href="#2-组合类型：列表、元组、字典、集合" class="headerlink" title="2.组合类型：列表、元组、字典、集合"></a>2.组合类型：列表、元组、字典、集合</h2><h3 id="2-1-列表"><a href="#2-1-列表" class="headerlink" title="2.1 列表"></a>2.1 列表</h3><ul><li>list列表，<strong>序列类型（即数据有位置顺序）</strong></li><li><p>表示方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">a &#x3D; [1,2,3]</span><br><span class="line">a[0]&#x3D;2 # 列表元素可修改</span><br><span class="line">print(a[0])</span><br><span class="line">print(type(a))</span><br></pre></td></tr></table></figure><p>  2</p>  <class 'list'></li></ul><h3 id="2-2-元组"><a href="#2-2-元组" class="headerlink" title="2.2 元组"></a>2.2 元组</h3><ul><li>tuple元组，序列类型</li><li>表示方式：<code>(data1,data2,...)</code></li><li><strong>元素不支持修改——不可变的列表</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment"># b[0]=2,会报错，因为元组元素不支持修改</span></span><br><span class="line">print(b[<span class="number">0</span>])</span><br><span class="line">print(type(b))</span><br></pre></td></tr></table></figure><pre><code>1&lt;class &#39;tuple&#39;&gt;</code></pre><h3 id="2-3-字典"><a href="#2-3-字典" class="headerlink" title="2.3 字典"></a>2.3 字典</h3><ul><li>dict字典，<strong>映射类型（即通过键值对的映射实现数据存储和查找），字典内部是无序的</strong></li><li>表示方式：<code>{key1:value1,key2:value2,...}</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;<span class="number">201901</span>:<span class="string">"xiaoming"</span>, <span class="number">201902</span>:<span class="string">"xiaohong"</span>, <span class="number">201903</span>:<span class="string">"xiaoqiang"</span>&#125;</span><br><span class="line">print(student[<span class="number">201901</span>])</span><br><span class="line">print(type(student))</span><br></pre></td></tr></table></figure><pre><code>xiaoming&lt;class &#39;dict&#39;&gt;</code></pre><h3 id="2-4-集合"><a href="#2-4-集合" class="headerlink" title="2.4 集合"></a>2.4 集合</h3><ul><li>set集合，<strong>一系列互不相等元素的集合，无序</strong></li><li>表示方式：<code>{data1,data2,...}</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c = &#123;<span class="string">"xiaoming"</span>, <span class="string">"xiaohong"</span>, <span class="string">"xiaoming"</span>&#125;</span><br><span class="line">print(c) <span class="comment"># 集合中同一元素会自动删除</span></span><br><span class="line">print(type(c))</span><br></pre></td></tr></table></figure><pre><code>{&#39;xiaohong&#39;, &#39;xiaoming&#39;}&lt;class &#39;set&#39;&gt;</code></pre><p><strong>在程序中，如何引用数据？</strong></p><ul><li>通俗的处理办法：赋值给一个变量</li></ul><h1 id="第二部分-变量"><a href="#第二部分-变量" class="headerlink" title="第二部分 变量"></a>第二部分 变量</h1><h2 id="1-变量的概念"><a href="#1-变量的概念" class="headerlink" title="1.变量的概念"></a>1.变量的概念</h2><ul><li>“量”：实实在在的对象</li><li>“变”：可变性，增删查改等</li><li>变量定义而要素：变量名、赋值</li></ul><h2 id="2-变量的命名"><a href="#2-变量的命名" class="headerlink" title="2. 变量的命名"></a>2. 变量的命名</h2><h3 id="2-1哪些可以用来做变量名"><a href="#2-1哪些可以用来做变量名" class="headerlink" title="2.1哪些可以用来做变量名"></a>2.1哪些可以用来做变量名</h3><ul><li>大写字母、小写字母、数字、下划线、汉字及其组合</li><li>严格区分大小写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python_is_第<span class="number">1</span>名 = <span class="literal">True</span></span><br></pre></td></tr></table></figure><ul><li>首字符不能是数字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>_fruit = <span class="string">"apple"</span></span><br></pre></td></tr></table></figure><pre><code>  File &quot;&lt;ipython-input-11-e3b1d93d01a0&gt;&quot;, line 1    1_fruit = &quot;apple&quot;     ^SyntaxError: invalid token</code></pre><ul><li>变量名中间不能有空格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my fruit = <span class="string">"apple"</span></span><br></pre></td></tr></table></figure><ul><li>不能与33个Python保留字相同<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#and,as,assert,break,class,continue,def,del,elif,else,except,</span></span><br><span class="line"><span class="comment">#False,finally,for,from,global,if,import,in,is,lambda,None,nonlocal,</span></span><br><span class="line"><span class="comment">#not,or,pass,raise,return,True,try,while,with,yield</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="2-3-变量名定义技巧"><a href="#2-3-变量名定义技巧" class="headerlink" title="2.3 变量名定义技巧"></a>2.3 变量名定义技巧</h3><ul><li><p>变量名尽可能有实际意义，表征数据的某种特性</p></li><li><p>用下划线(多用于变量和函数名）。变量名由多个单词组成，用_连接多个单词</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age_of_students = [<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>]</span><br></pre></td></tr></table></figure><ul><li>驼峰体（多用于类名）。变量名由多个单词组成，单词首字母大写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AgeOfStudents</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li><p>尽量避免用中文和拼音做变量名</p></li><li><p>特殊的变量：常量（如Π，e），变量名所有字母均大写</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAX_ITERATION = <span class="number">1000</span></span><br></pre></td></tr></table></figure><h2 id="3-变量的赋值"><a href="#3-变量的赋值" class="headerlink" title="3.变量的赋值"></a>3.变量的赋值</h2><h3 id="3-1-一般赋值"><a href="#3-1-一般赋值" class="headerlink" title="3.1 一般赋值"></a>3.1 一般赋值</h3><ul><li>通过等号自右向左赋值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><pre><code>3</code></pre><h3 id="3-2-增量赋值"><a href="#3-2-增量赋值" class="headerlink" title="3.2 增量赋值"></a>3.2 增量赋值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="comment"># x = x + 10</span></span><br><span class="line">x += <span class="number">10</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><pre><code>20</code></pre><h3 id="3-3-打包赋值"><a href="#3-3-打包赋值" class="headerlink" title="3.3 打包赋值"></a>3.3 打包赋值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x, y = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">print(x, y)</span><br><span class="line">x, y = y, x <span class="comment"># 两个值互换</span></span><br><span class="line">print(x, y)</span><br></pre></td></tr></table></figure><pre><code>1 22 1</code></pre><h1 id="第三部分-控制流程"><a href="#第三部分-控制流程" class="headerlink" title="第三部分 控制流程"></a>第三部分 控制流程</h1><h2 id="1-顺序流程"><a href="#1-顺序流程" class="headerlink" title="1.顺序流程"></a>1.顺序流程</h2><ul><li>自上向下依次执行</li></ul><p><strong>示例：实现1到5的整数求和</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># res = 1 + 2 + 3 + 4 + 5</span></span><br><span class="line">res = <span class="number">0</span> </span><br><span class="line">res += <span class="number">1</span></span><br><span class="line">res += <span class="number">2</span></span><br><span class="line">res += <span class="number">3</span></span><br><span class="line">res += <span class="number">4</span></span><br><span class="line">res += <span class="number">5</span></span><br><span class="line">res</span><br></pre></td></tr></table></figure><pre><code>15</code></pre><h2 id="2-循环流程——遍历循环（for）"><a href="#2-循环流程——遍历循环（for）" class="headerlink" title="2.循环流程——遍历循环（for）"></a>2.循环流程——遍历循环（for）</h2><p><strong>主要形式：</strong></p><ul><li>for 元素 in 可迭代对象:</li></ul><p>　　　执行语句</p><p><strong>执行过程：</strong></p><ul><li>从可迭代对象中，依次取出每一个元素，并进行相应的操作</li></ul><p><strong>示例：实现1到5的整数求和</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]:</span><br><span class="line">    res += i</span><br><span class="line">res</span><br></pre></td></tr></table></figure><pre><code>15</code></pre><h2 id="3-循环流程——无限循环（while）"><a href="#3-循环流程——无限循环（while）" class="headerlink" title="3.循环流程——无限循环（while）"></a>3.循环流程——无限循环（while）</h2><p><strong>主要形式：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件:</span><br><span class="line">    条件为真，执行语句</span><br><span class="line"><span class="comment">#条件为假，while循环结束</span></span><br></pre></td></tr></table></figure></p><p><strong>示例：实现1到5的整数求和</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    res += i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">res</span><br></pre></td></tr></table></figure><pre><code>15</code></pre><h2 id="4-分支流程（if）"><a href="#4-分支流程（if）" class="headerlink" title="4.分支流程（if）"></a>4.分支流程（if）</h2><p><strong>最简单的形式：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件:</span><br><span class="line">    条件为真，执行语句</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    条件为假，执行语句</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">22</span>:</span><br><span class="line">    print(<span class="string">"可以结婚啦"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"No"</span>)</span><br></pre></td></tr></table></figure><pre><code>No</code></pre><h1 id="第四部分-输入输出"><a href="#第四部分-输入输出" class="headerlink" title="第四部分 输入输出"></a>第四部分 输入输出</h1><h2 id="1-数据从哪里来？"><a href="#1-数据从哪里来？" class="headerlink" title="1.数据从哪里来？"></a>1.数据从哪里来？</h2><ol><li><p>外部文件导入</p><ul><li>从本地硬盘、网络端读入等</li><li>该部分内容见第八章</li></ul></li><li><p>程序中定义</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br><span class="line">name = <span class="string">"Tom"</span></span><br></pre></td></tr></table></figure><ol><li>动态交互输入input<ul><li>在程序运行的过程中进行输入</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = input(<span class="string">"请输入一个数字："</span>)</span><br><span class="line">print(x)</span><br><span class="line">print(type(x)) <span class="comment"># 可验证通过input定义的变量是一个str类型</span></span><br></pre></td></tr></table></figure><pre><code>请输入一个数字：33&lt;class &#39;str&#39;&gt;</code></pre><ul><li>用eval()去掉引号</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = eval(input(<span class="string">"请输入一个数字："</span>))</span><br><span class="line">print(x)</span><br><span class="line">print(type(x))</span><br></pre></td></tr></table></figure><pre><code>请输入一个数字：33&lt;class &#39;int&#39;&gt;</code></pre><h2 id="2-数据到哪里去？"><a href="#2-数据到哪里去？" class="headerlink" title="2.数据到哪里去？"></a>2.数据到哪里去？</h2><ol><li>存储到本地硬盘或网络端<ul><li>该部分内容见第八章</li></ul></li><li>打印输入print<ul><li>直接打印数据</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Hello, world"</span>)</span><br></pre></td></tr></table></figure><pre><code>Hello, world</code></pre><ul><li>打印变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1024</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><pre><code>1024</code></pre><ul><li>print默认换行，若不想换行，则用<code>end=</code>控制</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">1</span>)</span><br><span class="line">print(<span class="number">2</span>)</span><br><span class="line">print(<span class="string">"--------分割线---------"</span>)</span><br><span class="line">print(<span class="number">1</span>, end=<span class="string">" "</span>)</span><br><span class="line">print(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>12--------分割线---------1 2</code></pre><ul><li>若需要一些复杂输出：如几个变量一起组合输出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PI = <span class="number">3.1415926</span></span><br><span class="line">E = <span class="number">2.71828</span></span><br><span class="line">print(<span class="string">"PI = "</span>, PI, <span class="string">"E = "</span>, E)</span><br></pre></td></tr></table></figure><pre><code>PI =  3.1415926 E =  2.71828</code></pre><ol><li>格式化输出方法format<ul><li>基本格式：<code>&quot;字符{0}字符{1}字符&quot;.format(v0,v1)</code>v0,v1会依次填入前面{}中</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"PI = &#123;&#125;, E = &#123;&#125;"</span>.format(PI, E))</span><br><span class="line">print(<span class="string">"-------分割线-------"</span>)</span><br><span class="line">print(<span class="string">"PI = &#123;1&#125;, E = &#123;0&#125;"</span>.format(PI, E)) <span class="comment"># &#123;&#125;中的数字用于指定填入该位置的变量</span></span><br></pre></td></tr></table></figure><pre><code>PI = 3.1415926, E = 2.71828-------分割线-------PI = 2.71828, E = 3.1415926</code></pre><ul><li>再进一步 修饰性输出<ol><li>填充输出 <code>&quot;{0:_^20}&quot;.format(PI)</code>{}中，冒号之后表示开始修饰性输出，下划线_表示用其进行填充，^表示居中输出（&lt;居左输出，&gt;居右输出），20表示输出宽度。</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"&#123;0:_&gt;20&#125;"</span>.format(PI))</span><br><span class="line">print(<span class="string">"&#123;:*&lt;20&#125;"</span>.format(PI))</span><br></pre></td></tr></table></figure><pre><code>___________3.14159263.1415926***********</code></pre><ol><li>数字千分位分隔符<ul><li>显示1,000,000</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"&#123;0:,&#125;"</span>.format(<span class="number">1000000</span>))</span><br><span class="line">print(<span class="string">"-------分割线------"</span>)</span><br><span class="line">print(<span class="string">"&#123;0:&amp;^20,&#125;"</span>.format(<span class="number">1000000</span>)) <span class="comment"># 注意填充指令必须在千分位分隔符之前写出</span></span><br></pre></td></tr></table></figure><pre><code>1,000,000-------分割线------&amp;&amp;&amp;&amp;&amp;1,000,000&amp;&amp;&amp;&amp;&amp;&amp;</code></pre><ol><li>浮点数简化输出<ul><li>留2位小数</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"&#123;0:.2f&#125;"</span>.format(PI))</span><br></pre></td></tr></table></figure><pre><code>3.14</code></pre><ul><li>按百分数输出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"&#123;0:.1%&#125;"</span>.format(<span class="number">0.818727</span>)) <span class="comment"># 保留一位小数的百分数输出</span></span><br></pre></td></tr></table></figure><pre><code>81.9%</code></pre><ul><li>科学计数法输出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"&#123;0:.2e&#125;"</span>.format(<span class="number">0.818727</span>))</span><br></pre></td></tr></table></figure><pre><code>8.19e-01</code></pre><ol><li>整数的进制转换输出<ul><li>十进制整数转二进制、unicode码、十进制、八进制、十六进制输出</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"二进制&#123;0:b&#125;,Unicode码&#123;0:c&#125;,十进制&#123;0:d&#125;,八进制&#123;0:o&#125;,十六进制&#123;0:x&#125;"</span>.format(<span class="number">450</span>))</span><br></pre></td></tr></table></figure><pre><code>二进制111000010,Unicode码ǂ,十进制450,八进制702,十六进制1c2</code></pre><h1 id="第五部分-程序格式"><a href="#第五部分-程序格式" class="headerlink" title="第五部分 程序格式"></a>第五部分 程序格式</h1><ol><li>行最大长度<ul><li>所有行限制的最大字符数为79</li></ul></li><li>缩进<ul><li>用缩进来表示语句间的逻辑</li><li>在for,while,if,def,class等：之后开始进行缩进，表明后续代码与前句之间的从属关系</li><li>缩进量：4字符</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]:</span><br><span class="line">    print(i)</span><br><span class="line">print(<span class="string">"打印结束"</span>)</span><br></pre></td></tr></table></figure><pre><code>123打印结束</code></pre><ol><li>使用空格<ul><li>二元运算符两边加一个空格</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">2</span></span><br><span class="line">x += <span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li>使用不同优先级的运算符，考虑在最低优先级的运算符周围添加空格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = x*<span class="number">2</span> - <span class="number">1</span></span><br><span class="line">z = x*x + y*y</span><br><span class="line">c = (x+y) * (x-y)</span><br></pre></td></tr></table></figure><ul><li>在逗号后使用空格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, y = <span class="number">1</span>, <span class="number">2</span></span><br></pre></td></tr></table></figure><ol><li>避免使用空格<ul><li>在指定关键字参数或默认参数值的时候，不要在=附近加空格</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(n=<span class="number">1</span>, m=<span class="number">2</span>)</span>:</span></span><br><span class="line">    print(n, m)</span><br></pre></td></tr></table></figure><p><strong>小结</strong></p><ol><li>以上属于PEP8格式指南的部分内容，养成良好编码规范</li><li>格式约定目的：<ul><li>使代码风格一致</li><li>提升代码可读性</li></ul></li><li>不要死板执行格式规范<ul><li>项目规范优先</li></ul></li><li>注释<ul><li>单行注释</li><li>格式：<code>#注释内容</code></li><li>多行注释</li><li>格式：<code>&quot;&quot;&quot;注释内容，可分行&quot;&quot;&quot;</code></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习框架搭建课程三（网络节点封装与调用）</title>
      <link href="/2020/08/04/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E8%AF%BE%E7%A8%8B%E4%B8%89%EF%BC%88%E7%BD%91%E7%BB%9C%E8%8A%82%E7%82%B9%E5%B0%81%E8%A3%85%E4%B8%8E%E8%B0%83%E7%94%A8%EF%BC%89/"/>
      <url>/2020/08/04/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E8%AF%BE%E7%A8%8B%E4%B8%89%EF%BC%88%E7%BD%91%E7%BB%9C%E8%8A%82%E7%82%B9%E5%B0%81%E8%A3%85%E4%B8%8E%E8%B0%83%E7%94%A8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="defaultdict用法"><a href="#defaultdict用法" class="headerlink" title="defaultdict用法"></a>defaultdict用法</h2><ul><li><strong>普通的字典时，用法一般是dict={},添加元素的只需要dict[element] =value即，调用的时候也是如此，dict[element] = xxx,但前提是element在字典里，如果不在字典里就会报错。</strong></li><li><strong>defaultdict的作用是在于，当字典里的key不存在但被查找时，返回的不是keyError而是一个默认值。</strong><ul><li><strong>defaultdict接受一个工厂函数作为参数，如下来构造：</strong></li><li><strong>dict =defaultdict( factory_function)</strong></li><li><strong>factory_function可以是list、set、str等等，作用是当key不存在时，返回的是工厂函数的默认值，比如list对应[ ]，str对应的是空字符串，set对应set( )，int对应0</strong></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 节点类中，forward方法用于计算前向传播过程中每个节点的值value，backward方法用于计算反向传播过程中每个节点的输入相对于网络loss的偏导</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span> <span class="comment"># 节点基类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, inputs=[], name=None, is_trainable=True)</span>:</span> <span class="comment"># inputs为当前Node的输入节点</span></span><br><span class="line">        self.inputs = inputs</span><br><span class="line">        self.outputs = []</span><br><span class="line">        self.name = name</span><br><span class="line">        self.value = <span class="literal">None</span></span><br><span class="line">        self.is_trainable = is_trainable</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> input_ <span class="keyword">in</span> self.inputs: <span class="comment"># 当前节点的输入也是节点类，</span></span><br><span class="line">                                   <span class="comment"># 这里把当前节点写入其输入节点的输出属性</span></span><br><span class="line">            input_.outputs.append(self)</span><br><span class="line">            </span><br><span class="line">        self.gradients = defaultdict(int)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError <span class="comment"># python标准异常之一:尚未处理的方法</span></span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span> <span class="comment"># __repr__() 方法是类的实例化对象用来做</span></span><br><span class="line">                        <span class="comment">#“自我介绍”的方法，默认情况下，它会返</span></span><br><span class="line">                        <span class="comment">#回当前对象的“类名+object at+内存地址”，</span></span><br><span class="line">                        <span class="comment">#而如果对该方法进行重写，可以为其制作自定</span></span><br><span class="line">                        <span class="comment">#义的自我描述信息</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Placeholder</span><span class="params">(Node)</span>:</span> </span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    该节点（占位符）用来作为图的输入，当运行forward函数时，对其赋值</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, is_trainable=True)</span>:</span></span><br><span class="line">        Node.__init__(self, name=name, is_trainable=is_trainable)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, value=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: self.value = value</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> self.outputs:</span><br><span class="line">            self.gradients[self] = n.gradients[self] * <span class="number">1</span>  </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linear</span><span class="params">(Node)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x=None, weight=None, bias=None, name=None, is_trainable=False)</span>:</span> <span class="comment"># w * x + b</span></span><br><span class="line">        Node.__init__(self, [x, weight, bias], name=name)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self)</span>:</span></span><br><span class="line">        k, x, b = self.inputs[<span class="number">1</span>], self.inputs[<span class="number">0</span>], self.inputs[<span class="number">2</span>]</span><br><span class="line">        </span><br><span class="line">        self.value = k.value * x.value + b.value</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span><span class="params">(self)</span>:</span></span><br><span class="line">        k, x, b = self.inputs[<span class="number">1</span>], self.inputs[<span class="number">0</span>], self.inputs[<span class="number">2</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> self.outputs:</span><br><span class="line">            grad_cost = n.gradients[self] </span><br><span class="line">            </span><br><span class="line">            self.gradients[k] = grad_cost * x.value</span><br><span class="line">            self.gradients[b] = grad_cost * <span class="number">1</span></span><br><span class="line">            self.gradients[x] = grad_cost * k.value</span><br><span class="line">            </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sigmoid</span><span class="params">(Node)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, name=None, is_trainable=False)</span>:</span></span><br><span class="line">        Node.__init__(self, [x], name=name, is_trainable=is_trainable)</span><br><span class="line">        self.x = self.inputs[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_sigmoid</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.</span> / (<span class="number">1</span> + np.exp(<span class="number">-1</span> * x))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.value = self._sigmoid(self.x.value)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partial</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._sigmoid(self.x.value) * (<span class="number">1</span> - self._sigmoid(self.x.value))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> self.outputs:</span><br><span class="line">            grad_cost = n.gradients[self]</span><br><span class="line">            self.gradients[self.x] = grad_cost * self.partial()             </span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Relu</span><span class="params">(Node)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, name=None, is_trainable=False)</span>:</span></span><br><span class="line">        Node.__init__(self, [x], name=name, is_trainable=is_trainable)</span><br><span class="line">        self.x = x</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.value = self.x.value * (self.x.value &gt; <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> self.outputs:</span><br><span class="line">            grad_cost = n.gradients[self]</span><br><span class="line">            self.gradients[self.x] = grad_cost * (self.x.value &gt; <span class="number">0</span>) </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">L2_Loss</span><span class="params">(Node)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, y, y_hat, name=None, is_trainable=False)</span>:</span></span><br><span class="line">        Node.__init__(self, [y, y_hat], name=name, is_trainable=is_trainable)</span><br><span class="line">        self.y = y</span><br><span class="line">        self.y_hat = y_hat</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self)</span>:</span>        </span><br><span class="line">        y_v = np.array(self.y.value)</span><br><span class="line">        yhat_v = np.array(self.y_hat.value)</span><br><span class="line">        self.value = np.mean((y_v - yhat_v) ** <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 1/n sum (y- yhat)**2</span></span><br><span class="line">        y_v = np.array(self.y.value)</span><br><span class="line">        yhat_v = np.array(self.y_hat.value)</span><br><span class="line">        self.gradients[self.y] = <span class="number">2</span> * np.mean((y_v - yhat_v))</span><br><span class="line">        self.gradients[self.y_hat] = <span class="number">-2</span> * np.mean((y_v - yhat_v))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toplogic</span><span class="params">(graph)</span>:</span> <span class="comment"># 用于对人为设置的计算图排序，返回传播过程的节点顺序列表</span></span><br><span class="line">    sorted_node = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> len(graph) &gt; <span class="number">0</span>:</span><br><span class="line">        all_inputs = []</span><br><span class="line">        all_outputs = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> graph:</span><br><span class="line">            all_inputs += graph[n] <span class="comment"># 收集所有有输入的节点</span></span><br><span class="line">            all_outputs.append(n) <span class="comment"># 收集所有有输出的节点</span></span><br><span class="line">            </span><br><span class="line">        all_inputs = set(all_inputs)</span><br><span class="line">        all_outputs = set(all_outputs)</span><br><span class="line"></span><br><span class="line">        need_remove = all_outputs - all_inputs <span class="comment"># 有输出的节点集合</span></span><br><span class="line">                                               <span class="comment"># -有输入的节点集合</span></span><br><span class="line">                                               <span class="comment"># =只有输出，没有输</span></span><br><span class="line">                                               <span class="comment"># 入的节点集合</span></span><br><span class="line">        <span class="comment">#print(need_remove)</span></span><br><span class="line">        <span class="keyword">if</span> len(need_remove) &gt; <span class="number">0</span>:</span><br><span class="line">            node = random.choice(list(need_remove))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> len(graph) == <span class="number">1</span>: temp = graph[node]</span><br><span class="line">            graph.pop(node) <span class="comment"># 删除该节点</span></span><br><span class="line">            sorted_node.append(node)</span><br><span class="line">            <span class="keyword">if</span> len(graph) &lt; <span class="number">1</span>: sorted_node += temp</span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sorted_node</span><br></pre></td></tr></table></figure><h2 id="isinstance-object-classinfo"><a href="#isinstance-object-classinfo" class="headerlink" title="isinstance(object, classinfo)"></a>isinstance(object, classinfo)</h2><ul><li>isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()</li><li>isinstance() 与 type() 区别：<ul><li>type() 不会认为子类是一种父类类型，不考虑继承关系。</li><li>isinstance() 会认为子类是一种父类类型，考虑继承关系。</li><li>如果要判断两个类型是否相同推荐使用 isinstance()</li></ul></li><li>object — 实例对象</li><li>classinfo — 可以是直接或间接类名、基本类型或者由它们组成的元组</li><li>如果对象的类型与参数二的类型（classinfo）相同则返回 True，否则返回 False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_feed_dict_to_graph</span><span class="params">(feed_dict)</span>:</span> <span class="comment"># feed_dict是整个网络初始化时的输入节点字典，其中key为输入节点，value为对应的输入值</span></span><br><span class="line">    computing_graph = defaultdict(list)</span><br><span class="line">    </span><br><span class="line">    nodes = [n <span class="keyword">for</span> n <span class="keyword">in</span> feed_dict] <span class="comment"># 从feed_dict中取出key值构成节点列表</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> nodes:</span><br><span class="line">        n = nodes.pop(<span class="number">0</span>) <span class="comment"># 返回并删除nodes列表中的第一个元素</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> isinstance(n, Placeholder): <span class="comment"># 判断该元素是否是Placeholder类，Placeholder类为输入节点类，</span></span><br><span class="line">                                       <span class="comment"># 若为Placeholder类，则将feed_dict中对应的value赋给该元素。</span></span><br><span class="line">            n.value = feed_dict[n]</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">in</span> computing_graph: <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> n.outputs: <span class="comment"># 对该元素的输出使用for循环，将其输出添加至computing_graph字典中对应该元素的value列表中，</span></span><br><span class="line">                            <span class="comment"># 表示该键值对满足一对输入输出节点关系。</span></span><br><span class="line">            computing_graph[n].append(m)</span><br><span class="line">            nodes.append(m)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> computing_graph <span class="comment"># 返回的computing_graph即为人为设置的网络结构计算图</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">topological_sort_feed_dict</span><span class="params">(feed_dict)</span>:</span> <span class="comment"># 拓扑排序，返回网络传播过程各节点的排列顺序列表</span></span><br><span class="line">    graph = convert_feed_dict_to_graph(feed_dict)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> toplogic(graph)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward_and_backward</span><span class="params">(graph_order, monitor=False)</span>:</span> <span class="comment"># 对graph_order列表中的节点依次进行前向和反向传播，更新每个节点的值和梯度</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> graph_order:</span><br><span class="line">        <span class="keyword">if</span> monitor:</span><br><span class="line">            print(<span class="string">'forward computing -- &#123;&#125;'</span>.format(node))</span><br><span class="line">        node.forward()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> graph_order[::<span class="number">-1</span>]:</span><br><span class="line">        <span class="keyword">if</span> monitor:</span><br><span class="line">            print(<span class="string">'backward computing -- &#123;&#125;'</span>.format(node))</span><br><span class="line">        node.backward()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">optimize</span><span class="params">(graph, learning_rate=<span class="number">1e-2</span>)</span>:</span> <span class="comment"># 权重优化函数，对is_trainable==True的节点进行负梯度方向的优化</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> graph:</span><br><span class="line">        <span class="keyword">if</span> t.is_trainable:</span><br><span class="line">            t.value += <span class="number">-1</span> * learning_rate * t.gradients[t]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm.notebook <span class="keyword">import</span> tqdm</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">data = load_boston()</span><br><span class="line">X_, y_ = data[<span class="string">'data'</span>], data[<span class="string">'target'</span>] <span class="comment"># 分别赋值</span></span><br><span class="line">X_rm = X_[:,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别给各权重设定初始值</span></span><br><span class="line">w1_, b1_ = np.random.normal(), np.random.normal() </span><br><span class="line">w2_, b2_ = np.random.normal(), np.random.normal()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义所有Placeholder类的输入节点</span></span><br><span class="line">X, y = Placeholder(name=<span class="string">'X'</span>, is_trainable=<span class="literal">False</span>), Placeholder(name=<span class="string">'y'</span>, is_trainable=<span class="literal">False</span>)</span><br><span class="line">w1, b1 = Placeholder(name=<span class="string">'w1'</span>), Placeholder(name=<span class="string">'b1'</span>)</span><br><span class="line">w2, b2 = Placeholder(name=<span class="string">'w2'</span>), Placeholder(name=<span class="string">'b2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立模型，根据前面各种节点类方法的定义，以下声明实例的方法会自动设置好各个节点间的输入输出关系</span></span><br><span class="line">output1 = Linear(X, w1, b1, name=<span class="string">'Linear-01'</span>,)</span><br><span class="line">output2 = Sigmoid(output1, name=<span class="string">'activation'</span>)</span><br><span class="line">y_hat = Linear(output2, w2, b2, name=<span class="string">'y_hat'</span>)</span><br><span class="line">cost = L2_Loss(y, y_hat, name=<span class="string">'cost'</span>)</span><br><span class="line"></span><br><span class="line">feed_dict = &#123; <span class="comment"># 建立输入节点和其初始值的对应关系</span></span><br><span class="line">    X: X_rm,</span><br><span class="line">    y: y_,</span><br><span class="line">    w1: w1_,</span><br><span class="line">    w2: w2_,</span><br><span class="line">    b1: b1_,</span><br><span class="line">    b2: b2_,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">graph_sort = topological_sort_feed_dict(feed_dict)</span><br><span class="line"></span><br><span class="line">epoch = <span class="number">1000</span></span><br><span class="line">batch_num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">learning_rate = <span class="number">1e-3</span></span><br><span class="line"></span><br><span class="line">losses = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> tqdm(range(epoch)):</span><br><span class="line">    loss = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> range(batch_num): <span class="comment"># 每次随机对一个点的loss进行优化</span></span><br><span class="line">        index = np.random.choice(range(len(X_rm)))</span><br><span class="line">        X.value = X_rm[index]</span><br><span class="line">        y.value = y_[index]</span><br><span class="line">        </span><br><span class="line">        forward_and_backward(graph_sort, monitor=<span class="literal">False</span>)</span><br><span class="line">        </span><br><span class="line">        optimize(graph_sort, learning_rate)</span><br><span class="line">        </span><br><span class="line">        loss += cost.value</span><br><span class="line">    <span class="comment">#print(loss)</span></span><br><span class="line">    losses.append(loss / batch_num)</span><br></pre></td></tr></table></figure><pre><code>HBox(children=(FloatProgress(value=0.0, max=1000.0), HTML(value=&#39;&#39;)))</code></pre><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(x, graph)</span>:</span> <span class="comment"># 用训练结束后的模型推理</span></span><br><span class="line">    X.value = x</span><br><span class="line">    forward_and_backward(graph)</span><br><span class="line">    <span class="keyword">return</span> y_hat.value</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(losses)</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x7fdde0fe6090&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/2e7788273e841246ed82ebc384201c0e.png" alt="output_14_1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(X_rm, y_)</span><br><span class="line">plot_x = np.linspace(min(X_rm), max(X_rm), <span class="number">1000</span>)</span><br><span class="line">plt.scatter(plot_x, [predict(x, graph_sort) <span class="keyword">for</span> x <span class="keyword">in</span> plot_x], s=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.collections.PathCollection at 0x7fdde0a65690&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/464d16ea17f3526e25f38e70cac37000.png" alt="output_15_1"></p><h2 id="对前面建立的模型前向和反向传播过程可视化"><a href="#对前面建立的模型前向和反向传播过程可视化" class="headerlink" title="对前面建立的模型前向和反向传播过程可视化"></a>对前面建立的模型前向和反向传播过程可视化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">computing_graph = convert_feed_dict_to_graph(feed_dict)</span><br><span class="line">graph = nx.DiGraph(computing_graph)</span><br><span class="line">layout = nx.layout.spring_layout(graph)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visited_procedure</span><span class="params">(graph, position, visited_order, step, sub_plot_index=None, colors=<span class="params">(<span class="string">'red'</span>, <span class="string">'green'</span>)</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 将图graph按照访问顺序visited_order变换颜色</span></span><br><span class="line">    changed = visited_order[:step] <span class="keyword">if</span> step <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> visited_order</span><br><span class="line">    </span><br><span class="line">    before, after = colors</span><br><span class="line">    </span><br><span class="line">    color_map = [after <span class="keyword">if</span> c <span class="keyword">in</span> changed <span class="keyword">else</span> before <span class="keyword">for</span> c <span class="keyword">in</span> graph]</span><br><span class="line">    </span><br><span class="line">    nx.draw(graph, position, node_color=color_map, with_labels=<span class="literal">True</span>,ax=sub_plot_index)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dimension = int(len(graph_sort)**<span class="number">0.5</span>)</span><br><span class="line">fig, ax = plt.subplots(dimension, dimension+<span class="number">1</span>,figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(graph_sort)+<span class="number">1</span>):</span><br><span class="line">    ix = np.unravel_index(i, ax.shape) <span class="comment"># 返回索引i在形为ax.shape的数组里的位置</span></span><br><span class="line">    plt.sca(ax[ix]) <span class="comment"># plt.sca(ax[index])选择显示哪个图</span></span><br><span class="line">    ax[ix].title.set_text(<span class="string">'Forward Propagation Step:&#123;&#125;'</span>.format(i))</span><br><span class="line">    visited_procedure(graph, layout, graph_sort, step=i, sub_plot_index=ax[ix])</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/7f8637596110340f2a255a77744622b8.png" alt="output_20_0"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dimension = int(len(graph_sort)**<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(dimension, dimension+<span class="number">1</span>,figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(graph_sort)+<span class="number">1</span>):</span><br><span class="line">    ix = np.unravel_index(i, ax.shape) <span class="comment"># 返回索引i在形为ax.shape的数组里的位置</span></span><br><span class="line">    plt.sca(ax[ix]) <span class="comment"># plt.sca(ax[index])选择显示哪个图</span></span><br><span class="line">    ax[ix].title.set_text(<span class="string">'Forward Propagation Step:&#123;&#125;'</span>.format(i))</span><br><span class="line">    visited_procedure(graph, layout, graph_sort[::<span class="number">-1</span>], step=i, sub_plot_index=ax[ix], colors=(<span class="string">'green'</span>,<span class="string">'red'</span>))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/aa59a48142b4f97c246628520f383729.png" alt="output_21_0"></p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习框架搭建课程二（反向传播、激活函数、拓扑排序）</title>
      <link href="/2020/08/04/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E8%AF%BE%E7%A8%8B%E4%BA%8C%EF%BC%88%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E3%80%81%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E3%80%81%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%EF%BC%89/"/>
      <url>/2020/08/04/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E8%AF%BE%E7%A8%8B%E4%BA%8C%EF%BC%88%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E3%80%81%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E3%80%81%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Lesson2-反向传播-激活函数-图传播的拓扑结构"><a href="#Lesson2-反向传播-激活函数-图传播的拓扑结构" class="headerlink" title="Lesson2 反向传播 激活函数 图传播的拓扑结构"></a>Lesson2 反向传播 激活函数 图传播的拓扑结构</h1><h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X, y = load_boston()[<span class="string">'data'</span>],load_boston()[<span class="string">'target'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">room_index = <span class="number">5</span></span><br><span class="line">X_rm = X[:, room_index]</span><br></pre></td></tr></table></figure><h2 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h2><ul><li><strong>用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。</strong></li><li><strong>可以使用 list() 转换来输出列表</strong></li><li><strong>如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###############zip()示例################</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">c = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">zipped = zip(a,b)</span><br><span class="line">print(zipped)</span><br><span class="line">print(list(zipped))</span><br><span class="line">print(list(zip(a,c)))</span><br><span class="line"></span><br><span class="line">a1, a2 = zip(*zip(a,b))</span><br><span class="line">print(a1, a2)</span><br></pre></td></tr></table></figure><pre><code>&lt;zip object at 0x7fd68191da00&gt;[(1, 4), (2, 5), (3, 6)][(1, 4), (2, 5), (3, 6)](1, 2, 3) (4, 5, 6)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(y, yhat)</span>:</span> </span><br><span class="line">    <span class="comment"># 如何定义loss函数，是一个单独的研究方向</span></span><br><span class="line">    <span class="comment"># loss尽量让它是一个凸函数</span></span><br><span class="line">    <span class="comment"># 凸函数上找到最小值或者最大值的情况，我们叫做优化问题optimize</span></span><br><span class="line">    <span class="comment"># Convex Optimization</span></span><br><span class="line">    sum_ = sum([(y_i - yhat_i) ** <span class="number">2</span> <span class="keyword">for</span> y_i, yhat_i <span class="keyword">in</span> zip(y, yhat)])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sum_ / len(y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial_k</span><span class="params">(x, y, yhat)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-2</span> * np.mean((np.array(y)-np.array(yhat))*np.array(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial_b</span><span class="params">(y, yhat)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-2</span> * np.mean(np.array(y)-np.array(yhat))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(x, k, b)</span>:</span> <span class="comment"># 本课将模型简化成了一种线性关系 </span></span><br><span class="line">    <span class="comment"># RNN, CNN, Batch_normalization</span></span><br><span class="line">    <span class="comment"># CNN</span></span><br><span class="line">    <span class="keyword">return</span> k * x + b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">optimizer</span><span class="params">(k, b, X_rm, y, price_predicted, learning_rate)</span>:</span></span><br><span class="line">    <span class="comment"># Adam, momentum...</span></span><br><span class="line">    k_gradient = partial_k(X_rm, y, price_predicted)</span><br><span class="line">    b_gradient = partial_b(y, price_predicted)</span><br><span class="line"></span><br><span class="line">    k = k + (<span class="number">-1</span> * k_gradient) * learning_rate</span><br><span class="line">    b = b + (<span class="number">-1</span> * b_gradient) * learning_rate</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> k, b</span><br><span class="line"></span><br><span class="line">trying_time = <span class="number">50000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Initialization Parameters</span></span><br><span class="line">k = random.random() * <span class="number">100</span> - <span class="number">200</span></span><br><span class="line">b = random.random() * <span class="number">100</span> - <span class="number">200</span></span><br><span class="line">learning_rate = <span class="number">1e-3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(trying_time):</span><br><span class="line">    price_predicted = model(X_rm, k, b)</span><br><span class="line">    loss_value = loss(y, price_predicted)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'step:&#123;&#125;--k==&#123;&#125;, b==&#123;&#125;, loss=&#123;&#125;'</span>.format(i, k, b, loss_value))</span><br><span class="line">    k, b = optimizer(k, b, X_rm, y, price_predicted, learning_rate)</span><br></pre></td></tr></table></figure><pre><code>step:0--k==-139.97574080889325, b==-189.5565944077231, loss=1202989.4946001442step:1000--k==28.789202260854257, b==-159.9025443960182, loss=236.82742611841562step:2000--k==28.321423579850478, b==-156.92694900374082, loss=227.7541131560305step:3000--k==27.86475963738596, b==-154.02205577495837, loss=219.10685380752045step:4000--k==27.418946339739048, b==-151.1861847783419, loss=210.86564196457158step:5000--k==26.98372586823378, b==-148.41769599886837, loss=203.0114109414113step:6000--k==26.558846530140826, b==-145.7149883893845, loss=195.52598936255154step:7000--k==26.144062613120745, b==-143.07649894470254, loss=188.3920591218916step:8000--k==25.739134243125765, b==-140.5007017976972, loss=181.59311531592934step:9000--k==25.343827245678145, b==-137.98610733688074, loss=175.1134280583828step:10000--k==24.957913010444287, b==-135.5312613449428, loss=168.9380060878701step:11000--k==24.58116835902728, b==-133.1347441577636, loss=163.05256208446227step:12000--k==24.213375415900217, b==-130.7951698434049, loss=157.44347961485315step:13000--k==23.854321482406256, b==-128.51118540061006, loss=152.09778162967729step:14000--k==23.50379891375279, b==-126.28146997634929, loss=147.00310044009777step:15000--k==23.161604998928414, b==-124.10473410195712, loss=142.14764910419603step:16000--k==22.827541843472655, b==-121.97971894741703, loss=137.52019415696014step:17000--k==22.501416255031483, b==-119.90519559336649, loss=133.11002962078763step:18000--k==22.183039631632305, b==-117.87996432040093, loss=128.90695223637664step:19000--k==21.872227852613182, b==-115.90285391526179, loss=124.90123785668611step:20000--k==21.56880117214389, b==-113.97272099351123, loss=121.08361894936512step:21000--k==21.272584115277002, b==-112.08844933830095, loss=117.44526315559573step:22000--k==20.983405376468696, b==-110.24894925485091, loss=113.97775285574032step:23000--k==20.701097720511058, b==-108.4531569402683, loss=110.67306569452485step:24000--k==20.425497885818103, b==-106.70003386833821, loss=107.52355602069466step:25000--k==20.156446490009778, b==-104.9885661889324, loss=104.52193719820313step:26000--k==19.893787937739386, b==-103.31776414168878, loss=101.66126474801261step:27000--k==19.63737033071113, b==-101.68666148362233, loss=98.93492028149987step:28000--k==19.387045379835737, b==-100.09431493033665, loss=96.33659618829992step:29000--k==19.142668319473103, b==-98.53980361051134, loss=93.86028104315582step:30000--k==18.904097823713013, b==-97.02222853335356, loss=91.50024569802068step:31000--k==18.67119592464453, b==-95.54071206870042, loss=89.25103002722422step:32000--k==18.443827932567885, b==-94.09439743947698, loss=87.10743029504896step:33000--k==18.221862358101898, b==-92.68244822621246, loss=85.0644871164814step:34000--k==18.00517083614213, b==-91.30404788332926, loss=83.11747398328737step:35000--k==17.79362805162611, b==-89.95839926692656, loss=81.26188632886817step:36000--k==17.587111667062057, b==-88.64472417378221, loss=79.49343110659359step:37000--k==17.385502251780128, b==-87.36226289131133, loss=77.8080168575062step:38000--k==17.18868321286402, b==-86.11027375821422, loss=76.20174424440974step:39000--k==16.996540727724163, b==-84.88803273556643, loss=74.67089703044967step:40000--k==16.808963678272896, b==-83.6948329880994, loss=73.21193348130983step:41000--k==16.625843586663674, b==-82.52998447542974, loss=71.82147817113456step:42000--k==16.447074552556995, b==-81.39281355300069, loss=70.496314173216step:43000--k==16.272553191877268, b==-80.28266258250707, loss=69.23337561738542step:44000--k==16.10217857702466, b==-79.19888955157587, loss=68.02974059688358step:45000--k==15.935852178507512, b==-78.14086770248328, loss=66.88262440830098step:46000--k==15.773477807961688, b==-77.10798516969385, loss=65.78937310895009step:47000--k==15.61496156252368, b==-76.09964462601131, loss=64.7474573767608step:48000--k==15.460211770525754, b==-75.11526293713911, loss=63.754466658498906step:49000--k==15.309138938481153, b==-74.15427082444685, loss=62.80810359276205</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(X_rm, y)</span><br><span class="line">plt.plot(X_rm, model(X_rm, k, b), color=<span class="string">'red'</span>)</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x7fd68193f290&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/d4f5269fd9dd6c4a80e1b763c9eae2ea.png" alt="output_8_1"></p><h2 id="世界中真实的关系大多都不是简单的线性关系"><a href="#世界中真实的关系大多都不是简单的线性关系" class="headerlink" title="世界中真实的关系大多都不是简单的线性关系"></a>世界中真实的关系大多都不是简单的线性关系</h2><h2 id="我们能不能构建一些基本的模块，然后用模块来组合成复杂的函数"><a href="#我们能不能构建一些基本的模块，然后用模块来组合成复杂的函数" class="headerlink" title="我们能不能构建一些基本的模块，然后用模块来组合成复杂的函数?"></a>我们能不能构建一些基本的模块，然后用模块来组合成复杂的函数?</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span> <span class="comment"># basic sub-model : Transfer: Activation Function激活函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-10</span>, <span class="number">10</span>,<span class="number">1000</span>)</span><br><span class="line">plt.plot(x, sigmoid(x))</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x7fd6810a2a50&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/f1d501a38c207b1d18f7f27a57ac3a7d.png" alt="output_10_1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_linear</span><span class="params">(x)</span>:</span></span><br><span class="line">    k, b = np.random.normal(), np.random.normal()</span><br><span class="line">    <span class="keyword">return</span> k * x + b * x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_test_x</span><span class="params">(n)</span>:</span></span><br><span class="line">    max_, min_ = <span class="number">500</span>, <span class="number">-500</span></span><br><span class="line">    <span class="keyword">return</span> np.random.choice(np.linspace(min_, max_, <span class="number">20000</span>), n)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    test_x = np.linspace(<span class="number">-200</span>, <span class="number">200</span>, <span class="number">2000</span>)</span><br><span class="line">    plt.plot(random_linear(sigmoid(random_linear(test_x))))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/828704e97975df77532808c409fb05ad.png" alt="output_13_0"></p><h2 id="理论上，所有的函数都可以用多层的线性函数-非线性变化来拟合"><a href="#理论上，所有的函数都可以用多层的线性函数-非线性变化来拟合" class="headerlink" title="理论上，所有的函数都可以用多层的线性函数+非线性变化来拟合"></a>理论上，所有的函数都可以用多层的线性函数+非线性变化来拟合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relu</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * (x &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tanh</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.tanh(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">-10</span>, <span class="number">10</span>, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, relu(x))</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x7fd680f39b10&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/83b771fa653af1ab06f5c34b5e2ec773.png" alt="output_18_1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, tanh(x))</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x7fd680fcb890&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/529615a8a6e631888d886345cadf464c.png" alt="output_19_1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">so_many_layers</span><span class="params">(layers, x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(layers) == <span class="number">1</span>: <span class="keyword">return</span> layers[<span class="number">-1</span>](x)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> so_many_layers(layers[<span class="number">1</span>:], layers[<span class="number">0</span>](x)) <span class="comment"># 递归</span></span><br></pre></td></tr></table></figure><h2 id="北大ACM教练指出算法里最有意义的三种方法"><a href="#北大ACM教练指出算法里最有意义的三种方法" class="headerlink" title="北大ACM教练指出算法里最有意义的三种方法"></a>北大ACM教练指出算法里最有意义的三种方法</h2><ol><li>随机模拟 Randomization</li><li>递归 Recursion</li><li>动态规划 Dynamic Programming</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layers = [random_linear, relu, random_linear, tanh, random_linear, sigmoid]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    plt.plot(so_many_layers(layers, x))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/4d8cbab7c469d6fbe94ff3410cfacdfc.png" alt="output_23_0"></p><ul><li>神经网络可理解成乐高积木</li><li>有一群人（最重要的一群人）发明新的乐高积木模块</li><li>还有一群人研究积木特别高的时候怎样不倒塌</li><li>还有人研究积木怎样按照我们的需求自己组合</li><li>还有一群人研究搭建好的积木怎么用或者如何用现在的积木模块构造想模仿的问题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply</span><span class="params">(func1, func2)</span>:</span> <span class="keyword">return</span> <span class="keyword">lambda</span> x:func2(func1(x))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    plt.plot(reduce(apply, layers)(x))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/6a5a5bb5a692650d7503742c3f7d094c.png" alt="output_27_0"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">price</span><span class="params">(x, k, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> k * x + b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear</span><span class="params">(x, k1, b1)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> k1 * x + b1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_partial</span><span class="params">(k, b, x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid_partial</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sigmoid(x) * (<span class="number">1</span> - sigmoid(x)) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(x, k1, k2, b1, b2)</span>:</span></span><br><span class="line">    output1 = linear(x, k1, b1)</span><br><span class="line">    output2 = sigmoid(output1)</span><br><span class="line">    output3 = linear(x, k2, b2)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> output3</span><br><span class="line"></span><br><span class="line">trying_time = <span class="number">50000</span></span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\sigma (x)=\frac{1}{1+e^{-x}}</script><script type="math/tex; mode=display">loss(y,\hat y)=\frac{1}{n}\sum (y-\hat y)^2</script><script type="math/tex; mode=display">\hat y=k_2\sigma(g)+b_2</script><script type="math/tex; mode=display">g=k_1x+b_1</script><script type="math/tex; mode=display">\frac{\partial loss}{\partial k_1}=\frac{\partial loss}{\partial \hat y}\frac{\partial \hat y}{\partial \sigma}\frac{\partial \sigma}{\partial g}\frac{\partial g}{\partial k_1}</script><ul><li>理论上，线性+非线性的组合可以拟合任意函数</li><li>为什么还要提出如CNN,RNN,Transformer等网络？</li><li>因为拟合函数时，每增加一个参数维度，所需数据量大约须增加10倍</li><li>为了减少需要的数据量，提出了上述特殊的网络，利用权值共享减少参数量，从而减少数据量</li></ul><h1 id="计算图computing-graph"><a href="#计算图computing-graph" class="headerlink" title="计算图computing graph"></a>计算图computing graph</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">computing_graph = &#123;</span><br><span class="line">    <span class="string">'x1'</span>:[<span class="string">'linear-01'</span>],</span><br><span class="line">    <span class="string">'k1'</span>:[<span class="string">'linear-01'</span>],</span><br><span class="line">    <span class="string">'b1'</span>:[<span class="string">'linear-01'</span>],</span><br><span class="line">    <span class="string">'linear-01'</span>:[<span class="string">'sigmoid'</span>],</span><br><span class="line">    <span class="string">'sigmoid'</span>:[<span class="string">'linear-02'</span>],</span><br><span class="line">    <span class="string">'k2'</span>:[<span class="string">'linear-02'</span>],</span><br><span class="line">    <span class="string">'b2'</span>:[<span class="string">'linear-02'</span>],</span><br><span class="line">    <span class="string">'linear-02'</span>:[<span class="string">'loss'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx <span class="comment"># 画神经网络流程图</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph = nx.DiGraph(computing_graph)</span><br><span class="line">layout = nx.layout.spring_layout(graph)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nx.draw(graph, layout, with_labels=<span class="literal">True</span>, node_color=<span class="string">'red'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/f49f8133d98e7810a2e2018495372ff6.png" alt=""></p><h1 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visited_procedure</span><span class="params">(graph, position, visited_order, step, sub_plot_index=None, colors=<span class="params">(<span class="string">'red'</span>, <span class="string">'green'</span>)</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 将图graph按照访问顺序visited_order变换颜色</span></span><br><span class="line">    changed = visited_order[:step] <span class="keyword">if</span> step <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> visited_order <span class="comment"># 用step设置被访问的节点</span></span><br><span class="line">    </span><br><span class="line">    before, after = colors <span class="comment"># before代表未被访问的节点颜色，after代表已被访问的节点颜色</span></span><br><span class="line">    </span><br><span class="line">    color_map = [after <span class="keyword">if</span> c <span class="keyword">in</span> changed <span class="keyword">else</span> before <span class="keyword">for</span> c <span class="keyword">in</span> graph] <span class="comment"># 若节点c属于被访问的节点，则颜色设置为after;否则颜色设置为before</span></span><br><span class="line">    </span><br><span class="line">    nx.draw(graph, position, node_color=color_map, with_labels=<span class="literal">True</span>,ax=sub_plot_index) <span class="comment"># 画图，ax=sub_plot_index设置该幅图所在子图的索引</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visited_order = [<span class="string">'x1'</span>,<span class="string">'b1'</span>,<span class="string">'k1'</span>,<span class="string">'linear-01'</span>,<span class="string">'sigmoid'</span>,<span class="string">'b2'</span>,<span class="string">'k2'</span>,<span class="string">'linear-02'</span>,<span class="string">'loss'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visited_procedure(graph, layout, visited_order, step = <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/8e90b1bb66857ac3b987784e22b48894.png" alt="output_39_0"></p><h2 id="Forward-Propagation"><a href="#Forward-Propagation" class="headerlink" title="Forward Propagation"></a>Forward Propagation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dimension = int(len(visited_order)**<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(dimension, dimension+<span class="number">1</span>,figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(visited_order)+<span class="number">1</span>):</span><br><span class="line">    ix = np.unravel_index(i, ax.shape) <span class="comment"># 返回索引i在形为ax.shape的数组里的位置</span></span><br><span class="line">    print(ix)</span><br><span class="line">    plt.sca(ax[ix]) <span class="comment"># plt.sca(ax[index])选择显示哪个图</span></span><br><span class="line">    ax[ix].title.set_text(<span class="string">'Forward Propagation Step:&#123;&#125;'</span>.format(i))</span><br><span class="line">    visited_procedure(graph, layout, visited_order, step=i, sub_plot_index=ax[ix])</span><br></pre></td></tr></table></figure><pre><code>(0, 0)(0, 1)(0, 2)(0, 3)(1, 0)(1, 1)(1, 2)(1, 3)(2, 0)(2, 1)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/ea5d08641ff04992745995ab966cb296.png" alt="output_41_1"></p><h2 id="Backward-Propagation"><a href="#Backward-Propagation" class="headerlink" title="Backward Propagation"></a>Backward Propagation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dimension = int(len(visited_order)**<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(dimension, dimension+<span class="number">1</span>,figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(visited_order)+<span class="number">1</span>):</span><br><span class="line">    ix = np.unravel_index(i, ax.shape) <span class="comment"># 返回索引i在形为ax.shape的数组里的位置</span></span><br><span class="line">    plt.sca(ax[ix]) <span class="comment"># plt.sca(ax[index])选择显示哪个图</span></span><br><span class="line">    ax[ix].title.set_text(<span class="string">'Forward Propagation Step:&#123;&#125;'</span>.format(i))</span><br><span class="line">    visited_procedure(graph, layout, visited_order[::<span class="number">-1</span>], step=i, sub_plot_index=ax[ix], colors=(<span class="string">'green'</span>,<span class="string">'red'</span>))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/5bf9fad724fbcccd68410ca084ffe23a.png" alt="output_43_0"></p><h2 id="拓扑算法"><a href="#拓扑算法" class="headerlink" title="拓扑算法"></a>拓扑算法</h2><ol><li>找到一个只有输出，没有输入的节点（若有多个就随机选择其中一个）</li><li>删除并记录该节点</li><li>把该节点的输出连接删除</li><li>重复上述步骤，直到将所有节点全部删除</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toplogic</span><span class="params">(graph)</span>:</span> <span class="comment"># 拓扑排序函数，返回根据graph而得到的节点顺序列表</span></span><br><span class="line">    sorted_node = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> len(graph) &gt; <span class="number">0</span>:</span><br><span class="line">        all_inputs = []</span><br><span class="line">        all_outputs = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> graph:</span><br><span class="line">            all_inputs += graph[n] <span class="comment"># 收集所有有输入的节点</span></span><br><span class="line">            all_outputs.append(n) <span class="comment"># 收集所有有输出的节点</span></span><br><span class="line">            </span><br><span class="line">        all_inputs = set(all_inputs)</span><br><span class="line">        all_outputs = set(all_outputs)</span><br><span class="line">        <span class="comment">#print(all_inputs)</span></span><br><span class="line">        <span class="comment">#print(all_outputs)</span></span><br><span class="line">        need_remove = all_outputs - all_inputs </span><br><span class="line">        <span class="comment">#print(need_remove)</span></span><br><span class="line">        <span class="keyword">if</span> len(need_remove) &gt; <span class="number">0</span>:</span><br><span class="line">            node = random.choice(list(need_remove))</span><br><span class="line">            <span class="keyword">if</span> len(graph) == <span class="number">1</span>: temp = graph[node]</span><br><span class="line">            graph.pop(node) <span class="comment"># 删除该节点</span></span><br><span class="line">            sorted_node.append(node)</span><br><span class="line">            <span class="keyword">if</span> len(graph) &lt; <span class="number">1</span>: sorted_node += temp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sorted_node</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">computing_graph = &#123; <span class="comment"># 人为设计一种网络结构computing_graph，key-value代表一段网络的输入和输出</span></span><br><span class="line">    <span class="string">'x1'</span>:[<span class="string">'linear-01'</span>],</span><br><span class="line">    <span class="string">'k1'</span>:[<span class="string">'linear-01'</span>],</span><br><span class="line">    <span class="string">'b1'</span>:[<span class="string">'linear-01'</span>],</span><br><span class="line">    <span class="string">'linear-01'</span>:[<span class="string">'sigmoid'</span>],</span><br><span class="line">    <span class="string">'sigmoid'</span>:[<span class="string">'linear-02'</span>],</span><br><span class="line">    <span class="string">'k2'</span>:[<span class="string">'linear-02'</span>],</span><br><span class="line">    <span class="string">'b2'</span>:[<span class="string">'linear-02'</span>],</span><br><span class="line">    <span class="string">'linear-02'</span>:[<span class="string">'loss'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">visited_order_by_algorithm = toplogic(computing_graph) <span class="comment"># 通过toplogic函数返回computing_graph网络在传播时的先后顺序</span></span><br><span class="line"></span><br><span class="line">dimension = int(len(visited_order_by_algorithm)**<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(dimension, dimension+<span class="number">1</span>,figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(visited_order_by_algorithm)+<span class="number">1</span>):</span><br><span class="line">    ix = np.unravel_index(i, ax.shape) <span class="comment"># 返回索引i在形为ax.shape的数组里的位置</span></span><br><span class="line">    plt.sca(ax[ix]) <span class="comment"># plt.sca(ax[index])选择显示哪个图</span></span><br><span class="line">    ax[ix].title.set_text(<span class="string">'Forward Propagation Step:&#123;&#125;'</span>.format(i))</span><br><span class="line">    visited_procedure(graph, layout, visited_order_by_algorithm, step=i, sub_plot_index=ax[ix])</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/432bb1ed720dd7c4745d2a2130cec21c.png" alt="output_47_0"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dimension = int(len(visited_order_by_algorithm)**<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(dimension, dimension+<span class="number">1</span>,figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(visited_order_by_algorithm)+<span class="number">1</span>):</span><br><span class="line">    ix = np.unravel_index(i, ax.shape) <span class="comment"># 返回索引i在形为ax.shape的数组里的位置</span></span><br><span class="line">    plt.sca(ax[ix]) <span class="comment"># plt.sca(ax[index])选择显示哪个图</span></span><br><span class="line">    ax[ix].title.set_text(<span class="string">'Forward Propagation Step:&#123;&#125;'</span>.format(i))</span><br><span class="line">    visited_procedure(graph, layout, visited_order_by_algorithm[::<span class="number">-1</span>], step=i, sub_plot_index=ax[ix], colors=(<span class="string">'green'</span>,<span class="string">'red'</span>))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/20050fc88eea927c46099725ce72370e.png" alt="output_48_0"></p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
            <tag> Backward Propagation </tag>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习框架搭建课程一（线性回归与梯度下降）</title>
      <link href="/2020/08/03/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E8%AF%BE%E7%A8%8B%E4%B8%80%EF%BC%88%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E4%B8%8E%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%EF%BC%89/"/>
      <url>/2020/08/03/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E8%AF%BE%E7%A8%8B%E4%B8%80%EF%BC%88%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E4%B8%8E%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li>回归(Regression)-&gt;拟合、预测</li><li>分类(Classification)-&gt;输出类别</li></ul><h2 id="根据卧室面积预测房价"><a href="#根据卧室面积预测房价" class="headerlink" title="根据卧室面积预测房价"></a>根据卧室面积预测房价</h2><h3 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston <span class="comment"># 从sklearn库中调用波士顿房价数据</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = load_boston()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X, y = data[<span class="string">'data'</span>], data[<span class="string">'target'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_rm = X[:, <span class="number">5</span>] <span class="comment"># 取出X中房间面积的数据</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(X_rm, y)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.collections.PathCollection at 0x7fc0122d41d0&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/cfdeaa2eba6c0d289ed1b81f3cd0a003.png" alt=""></p><h2 id="本课为线性回归，故需找出一条最佳的直线-y-wx-b-，来拟合卧室和房价的关系"><a href="#本课为线性回归，故需找出一条最佳的直线-y-wx-b-，来拟合卧室和房价的关系" class="headerlink" title="本课为线性回归，故需找出一条最佳的直线$y=wx+b$，来拟合卧室和房价的关系"></a>本课为线性回归，故需找出一条最佳的直线$y=wx+b$，来拟合卧室和房价的关系</h2><h3 id="第一种方法：随机找，记录最优值。"><a href="#第一种方法：随机找，记录最优值。" class="headerlink" title="第一种方法：随机找，记录最优值。"></a>第一种方法：随机找，记录最优值。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> random.randint(<span class="number">-50</span>,<span class="number">50</span>) * x + random.randint(<span class="number">-50</span>,<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(X_rm, y)</span><br><span class="line">plt.plot(X_rm, f(X_rm), color = <span class="string">'red'</span>)</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x7fc010fe5090&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/70a629eb6d9968bbe6fe732622265163.png" alt="output_12_1"></p><p><strong>判断拟合结果好与不好的标准(Evaluation)</strong></p><ul><li>存在一组$x$，假设一个函数$f(x)$，输出估计的$\hat y$，衡量输出结果的好坏在于衡量真实$y$与估计$\hat y$之间的差距。</li></ul><script type="math/tex; mode=display">L1\_loss=\frac {1}{n}\sum_{i=1}^n|y_{true_i}-\hat y_i|</script><script type="math/tex; mode=display">L2\_loss=\frac {1}{n}\sum_{i=1}^n(y_{true_i}-\hat y_i)^2</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l2_loss</span><span class="params">(y,yhat)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.mean((np.array(y) - np.array(yhat)) ** <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">price</span><span class="params">(x, k, b)</span>:</span> <span class="comment"># 线性拟合模型</span></span><br><span class="line">    <span class="keyword">return</span> k * x + b</span><br><span class="line"></span><br><span class="line">trying_time = <span class="number">1000</span></span><br><span class="line">min_loss = float(<span class="string">'inf'</span>)</span><br><span class="line">best_k, best_b = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">loss_update = []</span><br><span class="line"><span class="comment">#######################随机找拟合模型，记录最优情况#######################</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(trying_time):</span><br><span class="line">    k = random.randint(<span class="number">-200</span>,<span class="number">200</span>)</span><br><span class="line">    b = random.randint(<span class="number">-200</span>,<span class="number">200</span>)</span><br><span class="line">    </span><br><span class="line">    yhat = price(X_rm, k, b)</span><br><span class="line">    </span><br><span class="line">    L2 = l2_loss(y=y, yhat=yhat)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> L2 &lt; min_loss:</span><br><span class="line">        min_loss = L2</span><br><span class="line">        best_k, best_b = k, b</span><br><span class="line">        loss_update.append([i, L2])</span><br><span class="line">        print(<span class="string">"在第&#123;&#125;步时，k和b更好，此时的Loss是：&#123;&#125;"</span>.format(i, L2))</span><br><span class="line">        </span><br><span class="line">plt.scatter(X_rm, y)</span><br><span class="line">plt.plot(X_rm, price(X_rm, best_k, best_b), color=<span class="string">'red'</span>)</span><br></pre></td></tr></table></figure><pre><code>在第0步时，k和b更好，此时的Loss是：250189.90831387945在第2步时，k和b更好，此时的Loss是：31492.41583403755在第5步时，k和b更好，此时的Loss是：85.14510595256915[&lt;matplotlib.lines.Line2D at 0x7fc010f60f10&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/fa3d4829ab099075c9645fb01b9ce957.png" alt="output_17_2"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss_i, loss_y = [i <span class="keyword">for</span> i, l_ <span class="keyword">in</span> loss_update], [l_ <span class="keyword">for</span> i, l_ <span class="keyword">in</span> loss_update]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(loss_i, loss_y)</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x7fc010e8db90&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/fe704e3344bb5862ca1f6c815e69e3e0.png" alt="output_19_1"></p><h2 id="如何让Loss更快地下降？"><a href="#如何让Loss更快地下降？" class="headerlink" title="如何让Loss更快地下降？"></a><strong>如何让Loss更快地下降？</strong></h2><p>梯度方向是函数增长最快的方向，则负梯度方向是函数下降最快的方向。通过计算函数梯度，在负梯度方向更新自变量的值，就能逐渐减小Loss值。——梯度下降法</p><script type="math/tex; mode=display">L2\_loss=\frac{1}{n}\sum_{i=1}^n(y_{true_i}-\hat y_i)^2</script><script type="math/tex; mode=display">=\frac{1}{n}\sum_{i=1}^n(y_{true_i}-(k\times x_i+b))^2</script><script type="math/tex; mode=display">\frac{\partial loss}{\partial k}=-\frac{2}{n}\sum (y_{true_i}-(k\times x_i+b))x_i</script><script type="math/tex; mode=display">=-\frac{2}{n}\sum (y_{true_i}-\hat y_i)x_i</script><script type="math/tex; mode=display">\frac{\partial loss}{\partial b}=-\frac{2}{n}\sum (y_{true_i}-\hat y_i)</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial_k</span><span class="params">(y, yhat, x)</span>:</span> <span class="comment"># loss对k的偏导</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-2</span> * np.mean((np.array(y)-np.array(yhat)) * np.array(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial_b</span><span class="params">(y, yhat)</span>:</span> <span class="comment"># loss对b的偏导</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-2</span> * np.mean((np.array(y)-np.array(yhat)))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">trying_time = <span class="number">1000</span></span><br><span class="line">min_loss = float(<span class="string">'inf'</span>)</span><br><span class="line">best_k, best_b = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">loss_update = []</span><br><span class="line"></span><br><span class="line">k = random.randint(<span class="number">-200</span>,<span class="number">200</span>)</span><br><span class="line">b = random.randint(<span class="number">-200</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">learning_rate = <span class="number">1e-3</span></span><br><span class="line"><span class="comment">#############################梯度下降法求拟合模型#######################</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(trying_time):</span><br><span class="line">    yhat = price(X_rm, k, b)</span><br><span class="line">    L2 = l2_loss(y, yhat)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> L2 &lt; min_loss:</span><br><span class="line">        min_loss = L2</span><br><span class="line">        best_k, best_b = k, b</span><br><span class="line">        loss_update.append([i, L2])</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">100</span> ==<span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"在第&#123;&#125;步时，k和b更好，此时的Loss是：&#123;&#125;"</span>.format(i, L2))</span><br><span class="line">        </span><br><span class="line">    gradient_k = partial_k(y, yhat, X_rm)</span><br><span class="line">    gradient_b = partial_b(y, yhat)</span><br><span class="line">    </span><br><span class="line">    k = k - gradient_k * learning_rate</span><br><span class="line">    b = b - gradient_b * learning_rate</span><br><span class="line">    </span><br><span class="line">plt.scatter(X_rm, y)</span><br><span class="line">plt.plot(X_rm, price(X_rm, best_k, best_b),color=<span class="string">'red'</span>)</span><br></pre></td></tr></table></figure><pre><code>在第0步时，k和b更好，此时的Loss是：683883.8072032174在第100步时，k和b更好，此时的Loss是：43.75703967614612在第200步时，k和b更好，此时的Loss是：43.73083829219306在第300步时，k和b更好，此时的Loss是：43.730213182251454在第400步时，k和b更好，此时的Loss是：43.72959107251158在第500步时，k和b更好，此时的Loss是：43.728971947626825在第600步时，k和b更好，此时的Loss是：43.728355793276016在第700步时，k和b更好，此时的Loss是：43.72774259520664在第800步时，k和b更好，此时的Loss是：43.72713233923459在第900步时，k和b更好，此时的Loss是：43.72652501124383[&lt;matplotlib.lines.Line2D at 0x7fc010f57e50&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/c2b5fb4350db8a5027c1888e8e4b6a49.png" alt="output_24_2"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_i, x_l = [i <span class="keyword">for</span> i, l <span class="keyword">in</span> loss_update], [l <span class="keyword">for</span> i, l <span class="keyword">in</span> loss_update]</span><br><span class="line">plt.plot(x_i, x_l)</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x7fc010d87c10&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/789498565a8534739b250ed87a024518.png" alt="output_25_1"></p><p><strong>选择L1_loss作为评价标准时</strong></p><script type="math/tex; mode=display">L1\_loss=\frac{1}{n}\sum_{i=1}^n|y_{true_i}-\hat y_i|</script><script type="math/tex; mode=display">=\frac{1}{n}\sum_{i=1}^n|y_{true_i}-(k\times x_i+b)|</script><script type="math/tex; mode=display">\frac{\partial loss}{\partial k}=-\frac{1}{n}\sum_{i}^n x_i+\frac{1}{n}\sum_j^n x_j,y_{true_i}-\hat y_i>0, y_{true_j}-\hat y_j<0</script><script type="math/tex; mode=display">\frac{\partial loss}{\partial b}=-\frac{1}{n}\sum_{i}^n 1+\frac{1}{n}\sum_j^n 1,y_{true_i}-\hat y_i>0, y_{true_j}-\hat y_j<0</script><h2 id="选用L1-loss时的梯度下降过程"><a href="#选用L1-loss时的梯度下降过程" class="headerlink" title="选用L1_loss时的梯度下降过程"></a>选用L1_loss时的梯度下降过程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l1_partial_k</span><span class="params">(x, y, yhat)</span>:</span></span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">        <span class="keyword">if</span> y[i] &gt; yhat[i]: </span><br><span class="line">            out.append(-x[i])</span><br><span class="line">        <span class="keyword">elif</span> abs(y[i] - yhat[i])&lt;<span class="number">1e-5</span>:</span><br><span class="line">            out.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            out.append(x[i])</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> np.mean(np.array(out))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l1_partial_b</span><span class="params">(x, y, yhat)</span>:</span></span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">        <span class="keyword">if</span> y[i] &gt;= yhat[i]:</span><br><span class="line">            out.append(<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">elif</span> abs(y[i] - yhat[i])&lt;<span class="number">1e-5</span>:</span><br><span class="line">            out.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            out.append(<span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> np.mean(np.array(out))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l1_loss</span><span class="params">(y, yhat)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.mean(abs(np.array(y)-np.array(yhat)))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">trying_time = <span class="number">10000</span></span><br><span class="line">min_loss = float(<span class="string">'inf'</span>)</span><br><span class="line">best_k, best_b = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">loss_update = []</span><br><span class="line"></span><br><span class="line">k = random.randint(<span class="number">-100</span>,<span class="number">100</span>)</span><br><span class="line">b = random.randint(<span class="number">-100</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">learning_rate = <span class="number">1e-3</span></span><br><span class="line"><span class="comment">###################L1_loss下的梯度下降过程##################</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(trying_time):</span><br><span class="line">    yhat = price(X_rm, k, b)</span><br><span class="line">    L1 = l1_loss(y, yhat)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> L1 &lt; min_loss:</span><br><span class="line">        min_loss = L1</span><br><span class="line">        best_k, best_b = k, b</span><br><span class="line">        loss_update.append([i, L1])</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">100</span> ==<span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"在第&#123;&#125;步时，k和b更好，此时的Loss是：&#123;&#125;"</span>.format(i, L1))</span><br><span class="line">        </span><br><span class="line">    gradient_k = l1_partial_k(X_rm, y, yhat)</span><br><span class="line">    gradient_b = l1_partial_b(X_rm, y, yhat)</span><br><span class="line">    </span><br><span class="line">    k = k - gradient_k * learning_rate</span><br><span class="line">    b = b - gradient_b * learning_rate</span><br><span class="line">    </span><br><span class="line">plt.scatter(X_rm, y)</span><br><span class="line">plt.plot(X_rm, price(X_rm, best_k, best_b),color=<span class="string">'red'</span>)</span><br></pre></td></tr></table></figure><pre><code>在第0步时，k和b更好，此时的Loss是：514.2228260869565在第100步时，k和b更好，此时的Loss是：510.17316314868566在第200步时，k和b更好，此时的Loss是：506.1235002104149在第300步时，k和b更好，此时的Loss是：502.07383727214403在第400步时，k和b更好，此时的Loss是：498.0241743338732在第500步时，k和b更好，此时的Loss是：493.9745113956023在第600步时，k和b更好，此时的Loss是：489.92484845733156在第700步时，k和b更好，此时的Loss是：485.8751855190608在第800步时，k和b更好，此时的Loss是：481.8255225807899在第900步时，k和b更好，此时的Loss是：477.77585964251904在第1000步时，k和b更好，此时的Loss是：473.72619670424825在第1100步时，k和b更好，此时的Loss是：469.67653376597747在第1200步时，k和b更好，此时的Loss是：465.62687082770657在第1300步时，k和b更好，此时的Loss是：461.5772078894358在第1400步时，k和b更好，此时的Loss是：457.52754495116494在第1500步时，k和b更好，此时的Loss是：453.4778820128941在第1600步时，k和b更好，此时的Loss是：449.4282190746233在第1700步时，k和b更好，此时的Loss是：445.3785561363524在第1800步时，k和b更好，此时的Loss是：441.32889319808163在第1900步时，k和b更好，此时的Loss是：437.27923025981084在第2000步时，k和b更好，此时的Loss是：433.22956732154在第2100步时，k和b更好，此时的Loss是：429.17990438326916在第2200步时，k和b更好，此时的Loss是：425.13024144499826在第2300步时，k和b更好，此时的Loss是：421.0805785067275在第2400步时，k和b更好，此时的Loss是：417.0309155684567在第2500步时，k和b更好，此时的Loss是：412.98125263018585在第2600步时，k和b更好，此时的Loss是：408.931589691915在第2700步时，k和b更好，此时的Loss是：404.8819267536443在第2800步时，k和b更好，此时的Loss是：400.8322638153734在第2900步时，k和b更好，此时的Loss是：396.78260087710254在第3000步时，k和b更好，此时的Loss是：392.7329379388317在第3100步时，k和b更好，此时的Loss是：388.6832750005609在第3200步时，k和b更好，此时的Loss是：384.63361206229007在第3300步时，k和b更好，此时的Loss是：380.5839491240192在第3400步时，k和b更好，此时的Loss是：376.53428618574844在第3500步时，k和b更好，此时的Loss是：372.48462324747754在第3600步时，k和b更好，此时的Loss是：368.4349603092068在第3700步时，k和b更好，此时的Loss是：364.3852973709359在第3800步时，k和b更好，此时的Loss是：360.3356344326651在第3900步时，k和b更好，此时的Loss是：356.2859714943943在第4000步时，k和b更好，此时的Loss是：352.23630855612345在第4100步时，k和b更好，此时的Loss是：348.18664561785266在第4200步时，k和b更好，此时的Loss是：344.13698267958176在第4300步时，k和b更好，此时的Loss是：340.087319741311在第4400步时，k和b更好，此时的Loss是：336.0376568030401在第4500步时，k和b更好，此时的Loss是：331.98799386476935在第4600步时，k和b更好，此时的Loss是：327.93833092649857在第4700步时，k和b更好，此时的Loss是：323.8886679882277在第4800步时，k和b更好，此时的Loss是：319.839005049958在第4900步时，k和b更好，此时的Loss是：315.7893421116916在第5000步时，k和b更好，此时的Loss是：311.7396791734253在第5100步时，k和b更好，此时的Loss是：307.69001623515896在第5200步时，k和b更好，此时的Loss是：303.6403532968926在第5300步时，k和b更好，此时的Loss是：299.5906903586262在第5400步时，k和b更好，此时的Loss是：295.54102742035985在第5500步时，k和b更好，此时的Loss是：291.4913644820935在第5600步时，k和b更好，此时的Loss是：287.4417015438272在第5700步时，k和b更好，此时的Loss是：283.3920386055608在第5800步时，k和b更好，此时的Loss是：279.34237566729445在第5900步时，k和b更好，此时的Loss是：275.29271272902804在第6000步时，k和b更好，此时的Loss是：271.24304979076175在第6100步时，k和b更好，此时的Loss是：267.19338685249534在第6200步时，k和b更好，此时的Loss是：263.143723914229在第6300步时，k和b更好，此时的Loss是：259.09406097596263在第6400步时，k和b更好，此时的Loss是：255.04439803769628在第6500步时，k和b更好，此时的Loss是：250.99473509942993在第6600步时，k和b更好，此时的Loss是：246.94507216116358在第6700步时，k和b更好，此时的Loss是：242.89540922289717在第6800步时，k和b更好，此时的Loss是：238.84574628463085在第6900步时，k和b更好，此时的Loss是：234.79608334636447在第7000步时，k和b更好，此时的Loss是：230.7464204080981在第7100步时，k和b更好，此时的Loss是：226.69675746983174在第7200步时，k和b更好，此时的Loss是：222.6470945315654在第7300步时，k和b更好，此时的Loss是：218.597431593299在第7400步时，k和b更好，此时的Loss是：214.54776865503268在第7500步时，k和b更好，此时的Loss是：210.4981057167663在第7600步时，k和b更好，此时的Loss是：206.44844277849992在第7700步时，k和b更好，此时的Loss是：202.3987798402336在第7800步时，k和b更好，此时的Loss是：198.34911690196722在第7900步时，k和b更好，此时的Loss是：194.29945396370084在第8000步时，k和b更好，此时的Loss是：190.2497910254345在第8100步时，k和b更好，此时的Loss是：186.20012808716814在第8200步时，k和b更好，此时的Loss是：182.15046514890176在第8300步时，k和b更好，此时的Loss是：178.1008022106354在第8400步时，k和b更好，此时的Loss是：174.05113927236906在第8500步时，k和b更好，此时的Loss是：170.0014763341027在第8600步时，k和b更好，此时的Loss是：165.95181339583633在第8700步时，k和b更好，此时的Loss是：161.90215045756997在第8800步时，k和b更好，此时的Loss是：157.85248751930362在第8900步时，k和b更好，此时的Loss是：153.80282458103724在第9000步时，k和b更好，此时的Loss是：149.7531616427709在第9100步时，k和b更好，此时的Loss是：145.70349870450454在第9200步时，k和b更好，此时的Loss是：141.6538357662382在第9300步时，k和b更好，此时的Loss是：137.6041728279718在第9400步时，k和b更好，此时的Loss是：133.55450988970543在第9500步时，k和b更好，此时的Loss是：129.50484695143908在第9600步时，k和b更好，此时的Loss是：125.45518401317273在第9700步时，k和b更好，此时的Loss是：121.40552107490637在第9800步时，k和b更好，此时的Loss是：117.35585813664001在第9900步时，k和b更好，此时的Loss是：113.30619519837286[&lt;matplotlib.lines.Line2D at 0x7fc010f27490&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/08/04/98eee24a6c9ca30e799063656f67c3b4.png" alt="output_29_2"></p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
            <tag> Gradient Descent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLOv1(You Only Look Once)</title>
      <link href="/2020/07/13/YOLOv1(You-Only-Look-Once)/"/>
      <url>/2020/07/13/YOLOv1(You-Only-Look-Once)/</url>
      
        <content type="html"><![CDATA[<h1 id="REFERENCE"><a href="#REFERENCE" class="headerlink" title="REFERENCE"></a>REFERENCE</h1><p>1.<a href="https://mp.weixin.qq.com/s?__biz=MzI5MDUyMDIxNA==&amp;mid=2247494712&amp;idx=3&amp;sn=fe711048161e9c4d11b95e887fe041a0&amp;chksm=ec1c01c1db6b88d7c25a6a812acdf94e944542a1db9abe6c42bf3f5e202abe02f6b562c1a719&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzI5MDUyMDIxNA==&amp;mid=2247494712&amp;idx=3&amp;sn=fe711048161e9c4d11b95e887fe041a0&amp;chksm=ec1c01c1db6b88d7c25a6a812acdf94e944542a1db9abe6c42bf3f5e202abe02f6b562c1a719&amp;scene=21#wechat_redirect</a></p><p>2.<a href="https://www.jianshu.com/p/cad68ca85e27" target="_blank" rel="noopener">https://www.jianshu.com/p/cad68ca85e27</a></p><p>3.<a href="https://blog.csdn.net/u014380165/article/details/72616238?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4" target="_blank" rel="noopener">https://blog.csdn.net/u014380165/article/details/72616238?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4</a></p><h1 id="YOLOv1"><a href="#YOLOv1" class="headerlink" title="YOLOv1"></a>YOLOv1</h1><p>　　faster-RCNN之后，rbg(RossGirshick)提出的另一种目标检测框架YOLO。</p><p>　　论文下载：<a href="http://arxiv.org/abs/1506.02640" target="_blank" rel="noopener">http://arxiv.org/abs/1506.02640</a></p><p>　　代码下载：<a href="http://github.com/pjreddie/darknet" target="_blank" rel="noopener">http://github.com/pjreddie/darknet</a></p><h2 id="1-YOLO的核心思想"><a href="#1-YOLO的核心思想" class="headerlink" title="1.YOLO的核心思想"></a>1.YOLO的核心思想</h2><p>　　利用整张图作为网络输入，直接在输出层回归bbox的位置和所属类别。YOLOv1在速度上有大幅提升，处理速度可达到45fps，其快速版本（网络较小）甚至可以达到155fps。</p><h2 id="2-YOLO的实现方法"><a href="#2-YOLO的实现方法" class="headerlink" title="2.YOLO的实现方法"></a>2.YOLO的实现方法</h2><p>　　将一幅图像分成$S\times S$个网格，若某个object中心落在这个网格中，则这个网格就负责预测这个object。</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/07/11/5a713128a524820e79255f09926b5209.png" alt=""></p><p>　　每个网格要预测2个bbox，每个bbox除了要回归自身坐标外，还要附带预测一个confidence值。每个bbox要预测(x,y,w,h)和confidence共5个值，每个网格要预测类别信息，记为C。每个网格还要预测2个bbox。则整幅图的输出就是$S\times S\times (2\times 5+C)$。</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/07/12/ad14e3f255a002e8a6bcdbcc136321a8.png" style="zoom:80%;" /></p><ol><li><p>C指的是类别数，每个输出tensor里有C个位置记录该网格存在某一种目标的概率，可记为</p><p>　　　　　　　　　　　　<script type="math/tex">P(C_{1}|Object),\cdots ,P(C_{i}|Object),\cdots</script></p><p>理解成条件概率（当网格存在object时，该object是$C_{i}$类的概率）。</p></li><li><p>每个bbox需要4个数值来表示位置，(Center_x,Center_y,width,height)。</p></li><li><p>bbox的置信度confidence</p><p>　　　　　　　　　　　　$confidence=Pr(Object)\times IOU_{pred}^{truth}$</p><p>这个confidence代表所预测的bbox中含有object的概率和该box预测有多准两重信息。其中若有object落在一个网格中，则$Pr(Object)=1$，否则取0；第二项指预测的bbox和实际groundtruth之间的IoU值。</p></li></ol><h2 id="3-讨论"><a href="#3-讨论" class="headerlink" title="3.讨论"></a>3.讨论</h2><ol><li><p>类别信息是针对每个网格的，confidence是针对每个bbox的。</p></li><li><p>　　YOLOv1的bbox并不是faster RCNN的Anchor。faster RCNN采用手工设置好的anchor，每个anchor有不同的大小和宽高比。YOLOv1并没有预先设置bbox的大小和形状，这里的bbox更像是进化算法，即事先并不知道会在什么位置，需经过前向计算，网络输出2个bbox。训练开始阶段，网络预测的bbox可能都是乱来的，但总是选择IoU相对大一些的那个bbox继续训练，每个bbox会逐渐擅长对某些情况的预测。</p></li><li><p>训练样本构造</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/07/12/f54950a926674fc20e4b650e39bb79b2.png" style="zoom:67%;" /></p><p><strong>①</strong>　　对于输入图像中的每个对象，先找到中心点，如上图中的自行车，中心点在黄色圆点位置，则该黄色网格对应的标签中，自行车的概率设为1，其他对象的概率设为0。所有其他48个网格的标签中，该自行车的概率都设为0。（这就是中心点所在的网格对预测该对象负责）</p><p><strong>②</strong>　　每个网格的输出包含2个bbox，每个bbox又包含一个confidence值。比较2个bbox的IoU，IoU大的那个bbox的$Pr(Object)=1$，同时真实bbox的值也就填入标签对应的bbox。另一个不负责预测的bbox的$Pr(Object)=0$。</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/07/12/fab11a59ae9f6579517b7d631d951acf.png" style="zoom:50%;" /></p><p><strong>注</strong>：上图将自行车的真实位置放在bbox1，但实际是在训练过程中等网络输出以后，比较两个bbox与自行车真实位置的IoU，自行车的真实位置放在IoU比较大的那个bbox中，且将该bbox的confidence置为1。</p></li><li><p>损失函数</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/07/12/fbac459f013bd6d6085e3de8d7738553.png" style="zoom:50%;" /></p><p>损失函数如下：</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/07/12/529cf3f362320cb27b228e1062fb1d81.png" style="zoom: 80%;" /></p><p><strong>①</strong>目标分类的误差：公式第5行表示存在object的网格才计入误差。</p><p><strong>②</strong>bbox的位置误差：公式第1行和第2行</p><ol><li><p>都有系数$1_{ij}^{obj}$表示只有负责(IoU比较大)预测的那个bbox计入误差。</p></li><li><p>第2行公式中宽和高都先取了平方根，这样做是因为相同的宽和高的误差对于小目标精度影响比大目标要大。比如，原始w=10,h=20，预测w=8,h=22和原始w=3,h=5，预测w=1,h=7相比，其实前者误差比后者小，但如果不开平方根，则损失是相等的：4+4=8，而取平方根后，变成0.15和0.7。</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/07/12/8e0f4b6e33129fec4c1fd2e9af602302.png" alt=""></p><p>由上图知，取平方根后，小box的在横轴上的值较小，发生偏移时，反应到y轴上的偏差比大box要大。</p></li></ol><p><strong>③</strong>bbox的confidence误差：</p><ol><li>公式第三行是存在object的bbox的confidence误差。系数$1_{ij}^{obj}$表示只有负责(IoU比较大)预测的那个bbox的confidence才会计入这项误差。</li><li>公式第四行是不存在object的bbox的confidence误差。若该项不恰当地输出较高的confidence，则会与真正负责该object预测的那个bbox混淆。</li></ol><p><strong>④</strong>几个问题</p><ol><li>8维的localization error和20维的classification error同等重要是不合理的。</li><li>若一个网格中没有object（一幅图中这种网格很多），那么就会将这些网格中的bbox的confidence push到0，相比于较少的有object的网格，这种做法会导致网络不稳定甚至发散。</li></ol><p><strong>⑤</strong>解决办法</p><ul><li>更重视8维的坐标预测，给这些损失前面赋予更大的权重$λ_{coord}$，在pascal VOC训练中取5。</li><li>对没有object的bbox的confidence loss，赋予较小的权重$λ_{noobj}$，在pascal VOC训练中取0.5。</li><li>有object的bbox的confidence loss和类别的loss的权重取1。</li></ul></li><li><p>　　在test的时候，每个网格预测的class信息和bbox预测的confidence信息相乘，就得到每个bbox的class-specific confidence score：</p><p>　　　　　　　　　　 　<script type="math/tex">Pr(Class_{i}|Object)\times Pr(Object)\times IOU_{pred}^{truth}=Pr(Class_{i})\times IOU_{pred}^{truth}</script></p><p>　　等式左边第一项是每个网格预测的类别信息，后两项是每个bbox的confidence。该乘积即encode了预测的box属于某一类的概率，也包含该box准确度的信息。</p><p>　　得到每个box的class-specific conficence score以后，设置阈值，滤掉得分低的boxes，对保留的boxes进行NMS处理，得到最终的检测结果。</p></li><li><p>NMS（非极大值抑制）</p><p>　　核心思想：选择得分最高的作为输出，与该输出重叠的去掉，不断重复该过程直到所有备选处理完。</p><p>   　　<strong>具体算法</strong>：设网络输出$7\times 7\times 30$的tensor，在每个网格中，对象$C_{i}$位于第j个bbox的得分为：</p><p>   　　　　　　　　　　　　　　　　<script type="math/tex">score_{ij}=P(C_{i}|Object)\times Confidence_{j}</script></p><p>代表某类对象$C_{i}$存在于第j个bbox的可能性。</p><p>　　每个网格有20个对象(pascal VOC有20类)的概率$\times$2个bbox的confidence，共40个得分。则$7\times 7$个网格共有1960个得分。对每种对象进行NMS，每种对象有1960/20=98个得分。</p><ol><li>设置一个score的阈值，低于该阈值的候选得分排除掉（将score设为0）</li><li>遍历每个对象类别<ol><li>遍历当前对象的98个得分</li><li>找到score最大的那个bbox，添加到输出列表</li><li>对每个score不为0的候选对象，计算其与上面输出对象的bbox的IoU</li><li>根据预先设置的IoU阈值，所有高于该阈值（重叠度较高）的候选对象排除掉（将score设为0）</li><li>如果所有bbox要么在输出列表中，要么score=0，则该对象类别的NMS完成，返回步骤b处理下一种对象</li></ol></li><li>输出列表即为预测的对象</li></ol></li><li><p>激活函数使用leak RELU。</p></li><li><p>　　输出层为全连接层，因此在检测时，模型只支持与训练图像相同的输入分辨率。（因为全连接层神经元固定，接受的输入大小也就固定。而卷积网络因为使用卷积核处理数据，无论输入大小如何，卷积核可始终保持不变。）</p></li><li><p><strong>缺点</strong></p><ol><li>YOLOv1对相互靠得很近的物体，以及很小的物体检测效果不好，因为一个网格只预测了两个框，且都指向一类物体。此外，Pooling层会丢失一些信息，对定位存在影响。</li><li>同一类物体出现的新的不常见的长宽比和其他情况时，泛化能力较弱。</li><li>由于损失函数的问题，定位误差是影响检测效果的主要原因。尤其是大小物体的处理上，还有待加强。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> object detection </category>
          
          <category> YOLO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> object detection </tag>
            
            <tag> YOLOv1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何阅读期刊论文</title>
      <link href="/2020/06/12/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E6%9C%9F%E5%88%8A%E8%AE%BA%E6%96%87/"/>
      <url>/2020/06/12/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E6%9C%9F%E5%88%8A%E8%AE%BA%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p>​         技术的创新并不是全靠聪明。只要<strong>学会分析期刊论文的优缺点</strong>，就可拿这套方法分析竞争对手产品的优缺点；而且，只要再稍微加工，就可以从这套优缺点的清单里找到突破瓶颈所需的关键性创意。这套创新程序，可以把「创新」变成不需要太多天分便可以完成的事，从而减轻创意的不定性与风险性。因此，只要会分析论文，几乎就可以轻易地组合出你所需要的绝大部分创意。聪明是不可能教的，但这套技巧却是可以教的；而且只要用心，绝大部分硕士生都可以学会。</p><h1 id="期刊论文的分析技巧与程序"><a href="#期刊论文的分析技巧与程序" class="headerlink" title="期刊论文的分析技巧与程序"></a>期刊论文的分析技巧与程序</h1><p>一篇期刊论文，主要分成四个部分。</p><h2 id="1-Abstract"><a href="#1-Abstract" class="headerlink" title="1. Abstract"></a>1. Abstract</h2><p>​         涉及这篇论文的主要贡献、方法特色与主要内容。须学会只看Abstract和Introduction就判断出这篇论文的重点和自己的研究是否有直接关联，从而决定要不要把它给读完。</p><h2 id="2-Introduction"><a href="#2-Introduction" class="headerlink" title="2. Introduction"></a>2. Introduction</h2><p>​         介绍问题的背景和起源，交代前人在这个题目上已经有过的主要贡献，说清楚前人留下来的未解问题，以及在这个背景下这篇论文想解决的问题和它的重要性。</p><p>​         对初学者而言，先收集与课题相关的论文30~40篇，每篇都只读Abstract和Introduction，不读Main Body，只在必要时稍微参考一下文后的Illustrative examples和Conclusions，直到能回答以下三个问题：</p><p>（2A）在该领域内最常被引述的方法有哪些？</p><p>（2B）这些方法可以分成哪些主要派别？</p><p>（2C）每个派别的主要特色（含优点和缺点）是什么？</p><p>​        如何找到这30~40篇论文？有一种期刊论文叫review paper，在keywords中加一个review筛选出这类论文，从相关的数篇review paper开始，从中根据title和Abstract找出和自己研究课题相关的30~40篇论文。</p><p>​         通常反复读过这30~40篇论文的Abstract和Introduction，就可以回答（2A）和（2B）。要回答（2A）和（2B），应先挑那些Introduction写的比较有观念的论文（不要直接读写得像流水账的Introduction）。</p><p>​        假如读过30~40篇论文的Abstract和Introduction后，还是回答不了（2C），就先做以下工作：</p><ul><li>先根据（2A）的答案，把该领域内最常被引述的论文找齐，再把他们根据（2B）的答案分成派别，每个派别按日期先后次序排好。然后，每次只重新读一派的Abstract和Introduction（必要时简略参考内文，但目的只是读懂Introduction内与这派有关的陈述，而不需要真的看懂所有内文），照日期先后读，读的时候只考虑回答一个问题：这一派的创意和主要诉求是什么？这样把每一派的Abstract和Introduction读完，总结出这一派主要的诉求、方法特色和优点。</li><li>其次，重读前面这些论文的Introduction，回答问题：每篇论文对其他派别有什么批评？然后把读到的重点逐一记录到各派别的<strong>缺点</strong>栏内。</li></ul><p>​        通过以上程序，可以掌握到（2A）、（2B）和（2C）的答案。这时应该对该领域内主要方法、文献之间的关系比较熟悉了。此时，可以用这些论文测试看看之前用来搜寻该领域论文的keywords恰不恰当，再用修正过的keywords再搜寻一次论文，把该领域的主要文献补齐，也把原来30~40篇论文中关系较远的论文删除，只保留大概20篇左右确定跟自己关系较近的文献。甚至可以删除几个不想用的派别（要有充分理由），只保留另几个派别（也要有充分理由）。</p><p>​         然后再利用（2C）的答案，再进一步回答一个问题（2D）：<strong>这个领域内大家认为重要的关键问题有哪些？有哪些特性是大家重视的优点？有哪些特性是大家在意的缺点？这些优点与缺点通常在哪些应用场合时会比较被重视？在哪些应用场合时比较不会被重视？</strong>然后就可以整理出该领域主要的应用场合，以及这些应用场合上该注意的事项。</p><p>​         最后，根据（2A）和（2C）的答案，把各派别内的论文整理在同一个档案内，按时间顺序排好，然后依照这些派别与自己研究方向的关系远近，逐一把各派论文的Main Body读完。</p><h2 id="3-Main-Body（simulation-and-experimental-examples"><a href="#3-Main-Body（simulation-and-experimental-examples" class="headerlink" title="3. Main Body（simulation and experimental examples)"></a>3. Main Body（simulation and experimental examples)</h2><p>第一次有系统地读某派别的论文Main Body时，只需要读懂：</p><p>（3A）该论文的主要假设是什么（什么条件下是有效的），并评估下这些假设在现实条件下成立的难度。越难成立的假设，越不好用，参考价值也越低。</p><p>（3B）在这些假设下，这篇论文主要有什么好处。</p><p>（3C）这些好处主要表现在哪些公式的哪些项目的简化上。不需要懂这篇论文详细的推导过程。除了三、五个关键的公式（最后在应用上要使用的公式，可以从这些公式评估出该方法使用上的方便程度或计算效率，以及在非理想情境下这些公式使用起来的可靠度或稳定性），其他公式弄不懂也没事，公式之间的恒等式推导过程可完全略过。假如要看公式，重点应看公式推导过程中引入的假设条件，而不是恒等式的推导。</p><p>​         但是，在开始根据前述问题读论文前，应先把收集的该派别所有论文都拿出来，逐篇粗略浏览过去（不要勉强自己每篇或每行都弄懂，而是轻松读，能懂就懂，不懂就不懂），从中挑出容易读懂的papers，以及经常被引述的论文。然后把这些论文按时间顺序依次读下去。读的时候，记得只回答（3A）、（3B）、（3C）就好，不用读太细致。</p><p>​        这样读完论文后，应该把这一派的主要发展过程、主要假设、主要理论依据及主要成果做一个完整梳理。其次，还要根据（2D）的答案及这一派的主要假设，进一步回答问题：（3D）这一派主要的缺点有哪些。最后，根据（3A）、（3B）、（3C）、（3D）的答案综合整理出：这一派最适合什么时候使用，最不适合什么场合使用。</p><p>​        论文作者常常故意只提成功的实验案例，所以simulation examples and experiments表现好不代表这个方法真的很好。必须回到这个方法的基本假设以及在用该方法时所使用的主要公式（resultant equations)上去，参考（2C）和（2D）的答案，问自己：当某个假设无法成立时，该方法会不会出什么状况？猜测该方法应该会在哪些应用场合表现优异，又会在哪些应用场合出状况？根据猜测再检验一次simulation examples and experiments，看其优点和缺点是否确实在这些examples中被充分检验且充分表现出来。</p><p>==注==：任何时候都不需要弄懂一篇论文所有的恒等式推导过程，不需要把整篇论文细细读完，只需要把确定会用到的部分完全弄懂就好，其他的也只需要了解它主要的idea。</p><p><img src="http://images.cnitblog.com/i/326116/201403/211603473659485.png" alt="img"></p><h1 id="方法与应用场合特性表（有迹可寻的创意产生程序）"><a href="#方法与应用场合特性表（有迹可寻的创意产生程序）" class="headerlink" title="方法与应用场合特性表（有迹可寻的创意产生程序）"></a>方法与应用场合特性表（有迹可寻的创意产生程序）</h1><p>从上图的步骤（4）和（5）获得以下两张表：</p><p><img src="http://images.cnitblog.com/i/326116/201403/211602235683420.png" alt="img"></p><p>​         同样一个方法可能有许多不同的应用场合，而不同应用场合可能会对适用（或最佳）的方法有不同要求。<strong>方法没有好坏，只有相对优缺点；只有当方法的特性与应用场合的特性不合时，才能下结论说这方法「不适用」；而当方法的特性与应用场合的特性吻合时，则下结论说这方法「很适用」。</strong></p><p>==技巧==：上面的方法与问题分析对照表还可以用来把「突破瓶颈所需的创意」简化成一种「有迹可寻」的工作。譬如，假定我们要针对应用甲发展一套适用的方法，首先我们要先从上右表中标定这个应用场合关心哪些问题特性。根据上右表第一个 column，甲应用场合只关心四个特性：特性1、2、3、5。哪个方法最适用呢？看起来是方法一，它除了特性2表现普通之外，其它三个特性的表现都很出色。但是，假如我们对方法一的表现仍不够满意，怎么去改善它？最简单的办法就是从上左表找现成的方法和方法一结合，产生出一个更适用的方法。因为方法一只有在特性2上面表现不够令人满意，所以我们就优先针对在特性2上面表现出色的其它方法加以研究。根据上左表，在特性2上面表现出色的方法有方法二和方法四，所以我们就去研究这两个方法和方法一结合的可能性。或许（随便举例）方法四的创意刚好可以被结合进方法一而改善方法一在特性2上面的表现，那么，我们就可以因此轻易地获得一个方法一的改良，从而突破甲应用场合没有适用方法的瓶颈。</p><p><strong>多半时候只要应用上一段的分析技巧就可以产生足以解决实用问题的创意了。</strong></p><h1 id="论文阅读的补充说明"><a href="#论文阅读的补充说明" class="headerlink" title="论文阅读的补充说明"></a>论文阅读的补充说明</h1><p>不好的习惯：</p><p>（1）老是想逐行读懂，有一行读不懂就受不了。</p><p>（2）不敢发挥自己的想象，读论文像在读教科书，论文没写的就不会，瘫痪在那里；自己猜测或想象时，老怕弄错作者的意思，神经绷紧，脑筋根本动不了。</p><p>==注==：每次读论文都一定要带着问题去读，每次读的时候都只是图回答你要回答的问题。因此，一定是选择性地阅读，一定要逐渐由粗而细地一层一层去了解。一定是一整批一起读懂到某个层次，而不是逐篇逐篇地整篇一次读懂。</p><p>​        许多论文中没被交代的段落你也已经可以有一些属于你的想象，猜完以后要根据你的猜测在论文里找证据，用以判断你的猜测对不对。猜对了，就用你的猜测（其实是你的推理架构）去吸收作者的资讯与创意；猜错了，论文理会有一些信息告诉你说你错了，而且因为猜错所以你读到对的答案时反而印象更深刻。</p><h1 id="论文报告的要求与技巧"><a href="#论文报告的要求与技巧" class="headerlink" title="论文报告的要求与技巧"></a>论文报告的要求与技巧</h1><p>报告一篇论文（依报告次序排列）：</p><p>　　（1） 投影片第一页必须列出论文的题目、作者、论文出处与年份。</p><p>　　（2） 以下每一页投影片只能讲一个观念，不可以在一张投影片里讲两个观念。</p><p>　　（3） 说明这篇论文所研究的问题的重点，以及这个问题可能和工业界的哪些应用相关。</p><p>　　（4） 清楚交代这篇论文的主要假设，主要公式，与主要应用方式（以及应用上可能的解题流程）。</p><p>　　（5） 说明这篇论文的范例（simulation examples and/or experiments），预测这个方法在不同场合时可能会有的准确度或好用的程度</p><p>　　（6） 你个人的分析、评价与批评，包括：</p><p>（6A）这篇论文最主要的创意是什么？</p><p>（6B）这些创意在应用上有什么好处？</p><p>（6C）这些创意和应用上的好处是在哪些条件下才能成立？</p><p>（6D）这篇论文最主要的缺点或局限是什么？</p><p>（6E）这些缺点或局限在应用上有什么坏处？</p><p>（6F）这些缺点和应用上的坏处是因为哪些因素而引入的？</p><p>（6G）你建议学长学弟什么时候参考这篇论文的哪些部分（点子）？</p><p>　　一般来讲，刚开始报告论文（硕一上学期）时只要做到能把前四项要素说清楚就好了，但是硕一结束后（暑假开始）必须要设法做到六项要素都能触及。硕二下学期开始的时候，必须要做到六项都能说清楚。</p><p>　　注意：读论文和报告论文时，最重要的是它的创意和观念架构，而不是数学上恒等式推导过程的细节（顶多只要抓出关键的 equation 去弩懂以及说明清楚即可）。你报告观念与分析创意，别人容易听懂又觉得有趣；你讲恒等式，大家不耐烦又浪费时间。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/symoriaty/article/details/76578180?utm_medium=distribute.pc_relevant_right.none-task-blog-OPENSEARCH-4&amp;depth_1-utm_source=distribute.pc_relevant_right.none-task-blog-OPENSEARCH-4" target="_blank" rel="noopener">https://blog.csdn.net/symoriaty/article/details/76578180?utm_medium=distribute.pc_relevant_right.none-task-blog-OPENSEARCH-4&amp;depth_1-utm_source=distribute.pc_relevant_right.none-task-blog-OPENSEARCH-4</a></p>]]></content>
      
      
      <categories>
          
          <category> postgraduate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> papers reading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标检测mAP(mean Average Precision)</title>
      <link href="/2020/06/09/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8BmAP(mean%20Average%20Precision)/"/>
      <url>/2020/06/09/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8BmAP(mean%20Average%20Precision)/</url>
      
        <content type="html"><![CDATA[<p>​         mAP可译为平均精度均值，是目标检测中模型性能的衡量指标。多个类别的目标检测任务中，每个类别都可以根据recall（召回率）和precision（准确率）绘制一条曲线。AP可看作该曲线下的面积，而mAP就是指在求得每一类AP的基础上再计算其所有类别的平均值。</p><h2 id="1-几个概念"><a href="#1-几个概念" class="headerlink" title="1.几个概念"></a>1.几个概念</h2><ol><li><p>True Positives(TP)：实际为正例且被模型划分为正例的实例数。</p></li><li><p>False Positives(FP)：实际为负例但被模型划分为正例的实例数。</p></li><li><p>True  Negatives(TN)：实际为负例且被模型划分为负例的实例数。</p></li><li><p>False Negatives(FN)：实际为正例但被模型划分为负例的实例数。</p></li><li><p>准确率（Precision）可理解为<strong>查准率</strong>，是指在所有预测为正例的样本中，真正例所占的比例。</p><p>召回率 $(\mathrm{recall})=\frac{TP}{TP+FN}=\mathrm{R}$<br>(查全率)</p></li><li><p>召回率（Recall）可理解为<strong>查全率</strong>，是指在所有正例中被正确预测的比例。</p><p>准确率 $(\text { precision })=\frac{TP}{TP+FP}=\mathrm{P}$<br>$($ 查准率)</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/06/29/31e94cef78cf781b3f549e250d1ccb36.png" style="zoom:80%;" /></p></li></ol><h2 id="2-单类别AP"><a href="#2-单类别AP" class="headerlink" title="2.单类别AP"></a>2.单类别AP</h2><p>​        目标检测的预测结果通常包含两部分，即预测框(bounding box)和置信度P。而预测正确需要满足两个条件，①类别正确且置信度(confidence score)大于一定阈值(P_threshold)，②预测框与真实框(ground truth)的IoU大于一定阈值(IoU_threshold)。</p><p><strong>示例</strong></p><p>​         假设用训练好的模型得到所有测试样本的confidence score，每一类的confidence score保存到一个文件中，设共有20个测试样本，每个样本的id、confidence score和ground truth label如下。</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/06/29/fb7774ce5bf0cb75ee27796c374d09f7.png" style="zoom:80%;" /></p><p>然后对confidence score 排序得到，</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/06/29/3572ee3351d6f517d777fabe9c7b35c6.png" style="zoom:80%;" /></p><p>再计算precision和recall。比如想得到top-5的结果，则相当于在设定了置信阈值的情况下，上表中前5个样本被认定为正例，其余均为负例。</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/06/29/70605dd4b6c9bedfc82f756d391e7d92.png" style="zoom:80%;" /></p><p>则在这个例子中，True Positives就是指id为4和2的样本，因为它们的gt_label为1且同时被预测为正例。False Positives就是指id为13、19、6的样本。而从全表看，gt_label为1的有6个样本，即False Negatives为4个，True Negatives为15-4=11个。</p><p>因此，对于top-5而言，Precision=2/(2+3)=0.4，Recall=2/(2+4)=1/3。</p><p>在实际多类别检测任务中，通常不会只通过top-5来衡量模型的好坏，而是需要知道从top-1到top-N（N是所有测试样本个数）对应的Precision和Recall。易知，随着参与计算的样本增加，Recall会越来越大，Precision则整体呈下降趋势。把Recall作为横坐标，Precision 作为纵坐标，即可得到Precision-Recall曲线。</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/06/29/6cdc453a2895a81d77f2374012808a7b.png" style="zoom:80%;" /></p><p>在计算AP之前，需要先将平滑化。方法是<strong>取查全率大于等于r时最大的查准率p</strong>。即，$p(r)=\max _{\tilde{r} \geq r} p(\tilde{r})$。</p><p>从而得到平滑后的曲线（下图仅为示意图）。</p><p><img src="https://cdn.jsdelivr.net/gh/rgwang/CDN@latest/2020/06/29/6cd16cdf7078d91282559d9d49a9c4fa.png" style="zoom:80%;" /></p><p>而对于AP的计算有两种方法：</p><ol><li><p>voc2010之前的方法</p><p>AP=(平滑后PR曲线上，Recall分别等于0,0.1,0.2,…,1.0等11处Precision的平均值)</p><p>$A P=\frac{1}{11} \sum_{r \subseteq{0,0.1, . ., 1.0}} p(r)$</p></li><li><p>voc2010以后的方法</p><p>AP=平滑后PR曲线下的面积</p></li></ol><h2 id="3-mAP的计算"><a href="#3-mAP的计算" class="headerlink" title="3.mAP的计算"></a>3.mAP的计算</h2><ol><li><p>voc数据集的mAP</p><p>voc数据集中的mAP计算的是IoU_threshold=0.5时各个类别AP的均值。</p></li><li><p>coco数据集的mAP</p><p>coco认为固定IoU_threshold的取值无法有效衡量对模型性能的影响。</p><p>比如A模型在IoU_threshold=0.5时，mAP=0.4，而B模型在IoU_threshold=0.7时，mAP同样为0.4。根据voc的标准，A、B模型的性能一样，但显然B模型的预测框更准确，性能更好。</p><p>故，coco计算IoU_threshold=0.5,0.55,0.6,…,0.95时的各个mAP。</p></li></ol><h2 id="REFERENCE"><a href="#REFERENCE" class="headerlink" title="REFERENCE"></a>REFERENCE</h2><p><a href="https://blog.csdn.net/william_hehe/article/details/80006758" target="_blank" rel="noopener">https://blog.csdn.net/william_hehe/article/details/80006758</a></p><p><a href="https://zhuanlan.zhihu.com/p/56961620" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/56961620</a></p>]]></content>
      
      
      <categories>
          
          <category> object detection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> object detection </tag>
            
            <tag> mAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/04/hello-world/"/>
      <url>/2020/06/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
